import "primitives/math/math.fil";
import "primitives/state.fil";
import "primitives/reshape.fil";
import "primitives/core.fil";
import "apps/blas/util.fil";

// W: Width of nums
// N: Length of vectors
// M: Number of multipliers
comp Dot[W, N, M]<'G:II>(
  go: interface['G],
  x[N]: ['G, 'G+1] W,
  y[N]: ['G, 'G+1] W
) -> (
  out: ['G+L, 'G+L+1] W
) with {
  some L where L > 0;
  some II where II > 0;
} where W > 0,
        L > 0,
        N > 0,
        M > 0
{

  let reuses = N / M;

  Mults := new Multipliers[W, M] in ['G, 'G + reuses*Mults::II];
  RA := new RAdd[W, M] in ['G + Mults::L, 'G + reuses*Mults::II + Mults::L];

  // needed for typechecking
  assume RA::L == log2(M);

  let latency = reuses*Mults::II+Mults::L + RA::L;
  L := latency;

  let ii = reuses*Mults::II;
  II := ii;

  bundle mult_out[reuses][M]: for<k> ['G+k*Mults::II+Mults::L, 'G+k*Mults::II+Mults::L+1] W;
  bundle add_out[reuses]: for<q> ['G + q*Mults::II + Mults::L + RA::L, 'G + q*Mults::II + Mults::L + RA::L + 1] W;
  
  P := new Prev[W, 1];
  FA := new Add[W];

  for j in 0..reuses {

    let mul_start = j*Mults::II;
    let mul_end = j*Mults::II + Mults::L;
    let last_add_start = j*Mults::II + Mults::L + RA::L;

    // first use can use raw inputs
    if j == 0 {
      m := Mults<'G+mul_start>(x{j*M..(j+1)*M}, y{j*M..(j+1)*M});
      mult_out{j}{0..M} = m.out{0..M};
    // any other use should use registered inputs
    } else {
      x_reg := new Shift[W, mul_start, M]<'G>(x{j*M..(j+1)*M});
      y_reg := new Shift[W, mul_start, M]<'G>(y{j*M..(j+1)*M});
      m := Mults<'G+mul_start>(x_reg.out{0..M}, y_reg.out{0..M});
      mult_out{j}{0..M} = m.out{0..M};
    }

    ra := RA<'G+mul_end>(mult_out{j}{0..M});
    add_out{j} = ra.out;

    // do the additions as they come in
    if j == 0 {
      zero := new Const[W, 0]<'G+last_add_start>();
      add := FA<'G+last_add_start>(zero.out, add_out{j});
      prev := P<'G+last_add_start>(add.out);
    } else {
      add := FA<'G+last_add_start>(prev.prev, add_out{j});
      prev := P<'G+last_add_start>(add.out);
    }
  }

  final := P<'G+latency>(final.prev);
  out = final.prev;
}

// Addition-based reduction tree with latency, II as output params
comp RAdd[W, N]<'G:1>(
    in[N]: for<i> ['G, 'G+1] W
) -> (
     out: ['G+K, 'G+K+1] W
) with {
  let K = log2(N);
  some L where L >= 0;
  some II where II > 0;
} where W >= 1,
        N >= 1,
        K == log2(N),
        K >= 0
{
    L := K;
    II := 1;

    if N == 1 {
        out = in{0};
    } else {
        // Required to make recursive calls type check.
        assert K-1 == log2(N/2);
        // This is a corollary of K != 0
        assert N >= 2;
        // This is not true in general for integer division but
        // because N is a power of 2 it is true.
        assert N - N/2 == N/2;

        left := new RAdd[W, N/2]<'G>(in{0..N/2});
        right := new RAdd[W, N/2]<'G>(in{N/2..N});
        add := new Add[W]<'G+K-1>(left.out, right.out);
        d := new Delay[W]<'G+K-1>(add.out);
        out = d.out;
    }
}