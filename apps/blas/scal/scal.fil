import "primitives/math/math.fil";
import "primitives/state.fil";
import "apps/blas/util.fil";
import "primitives/reshape.fil";

// Scales a vector by a constant
// W: Width of nums
// N: Length of vectors
// M: number of multipliers
comp Scal[W, N, M]<'G:II>(
  go: interface['G],
  x[N]: ['G, 'G+1] W,
  a: ['G, 'G+1] W
) -> (
  out[N]: ['G+L, 'G+L+1] W
) with {
  some L where L > 0;
  some II where II > 0;
} where W > 0,
        L > 0,
        N > 0
{

  let reuses = N / M;

  Mults := new Multipliers[W, M] in ['G, 'G + reuses*Mults::II];

  let latency = reuses*Mults::II + Mults::L;
  L := latency;

  let ii = reuses*Mults::II;
  II := ii;

  bundle mult_out[reuses][M]: for<k> ['G+k*Mults::II+Mults::L, 'G+k*Mults::II+Mults::L+1] W;
  bundle a_bundle[reuses][M]: for<k> ['G+k*Mults::II, 'G+k*Mults::II+1] W;

  for j in 0..reuses {
    let mul_start = j*Mults::II;
    let mul_end = j*Mults::II + Mults::L;

    a_reg := new Shift[W, mul_start]<'G>(a);

    // use inputs
    if j == 0 {
      // fill bundle with `a`
      for i in 0..M {
        a_bundle{j}{i} = a;
      }
      m := Mults<'G+mul_start>(x{j*M..(j+1)*M}, a_bundle{j}{0..M});
      mult_out{j}{0..M} = m.out{0..M};
    }
    // register inputs and use
    else {
      // fill bundle with `a`
      for i in 0..M {
        a_bundle{j}{i} = a_reg.out;
      }
      x_reg := new Shift[W, mul_start, M]<'G>(x{j*M..(j+1)*M});
      m := Mults<'G+mul_start>(x_reg.out{0..M}, a_bundle{j}{0..M});
      mult_out{j}{0..M} = m.out{0..M};
    }

    mult_reg := new Shift[W, latency - mul_end, M]<'G+mul_end>(mult_out{j}{0..M});
    out{j*M..(j+1)*M} = mult_reg.out{0..M};
  }
}