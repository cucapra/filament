import "apps/blas/syr/syr.fil";
import "primitives/reshape.fil";

comp Harness[W, N, MultsN, AddsN]<'G:II>(
  go:interface['G],
  alpha: ['G, 'G+1] W,
  x:     ['G, 'G+1] N*W,
  A:     ['G, 'G+1] N*N*W,
) -> (
  A_out:  ['G+L, 'G+L+1] N*N*W
)  with {
  some L where L >= 0;
  some II where II > 0;
} where N > 0,
        W > 0,
        MultsN > 0,
        N % MultsN == 0,
        AddsN == MultsN
{
  x_vec := new SplitWire[W, N]<'G>(x);

  A_split := new SplitWire[W, N*N]<'G>(A);
  bundle A_mat[N][N]: ['G, 'G+1] W;

  for i in 0..N {
    A_mat{i}{0..N} = A_split.out{i*N .. (i+1)*N};
  }

  s := new Syr[W, N, MultsN, AddsN];

  run_s := s<'G>(alpha, x_vec.out{0..N}, A_mat{0..N}{0..N});
  
  bundle out_flat[N]: ['G+s::L, 'G+s::L+1] N*W;
  for i in 0..N {
    // represents a row flattened together
    row_concat := new ConcatBundle[W, N]<'G+s::L>(run_s.A_out{i}{0..N});
    out_flat{i} = row_concat.out;
  }

  // flatten all the rows together to have the same data format as input matrix
  out_flatter := new ConcatBundle[W*N, N]<'G+s::L>(out_flat{0..N});
  A_out = out_flatter.out;

  II := s::II;
  L := s::L;
}