import "apps/blas/syr/syr-comb.fil";
import "apps/blas/syr/syr-gen.fil";
import "primitives/reshape.fil";

// Syr requires A to be stored as a bundle of rows
// this test harness assumes A has been flattened into the form of:
// [A_00, A_01, ..., A_0N, A_10, A_11, ..., A_1N, ..., A_N0, A_N1, ..., A_NN]
comp main<'G:II>(
  go: interface['G],
  alpha: ['G, 'G+1] W,
  x:     ['G, 'G+1] N*W,
  A:     ['G, 'G+1] N*N*W,
) -> (
  A_out:  ['G+L, 'G+L+1] N*N*W
) with {
  some L;
  some II;
  let W = 4;
  let N = 2;
  let MultsN = 2;
  let AddsN = 2;
} where N > 0, W > 0 {
  x_vec := new SplitWire[W, N]<'G>(x);

  A_split := new SplitWire[W, N*N]<'G>(A);
  bundle A_mat[N][N]: ['G, 'G+1] W;

  for i in 0..N {
    A_mat{i}{0..N} = A_split.out{i*N .. (i+1)*N};
  }

  s := new Syr_Gen[W, N, MultsN];

  run_s := s<'G>(alpha, x_vec.out{0..N}, A_mat{0..N}{0..N});
  
  bundle out_flat[N]: ['G+s::L, 'G+s::L+1] N*W;
  for i in 0..N {
    // represents a row flattened together
    row_concat := new ConcatBundle[W, N]<'G+s::L>(run_s.A_out{i}{0..N});
    out_flat{i} = row_concat.out;
  }

  // flatten all the rows together to have the same data format as input matrix
  out_flatter := new ConcatBundle[W*N, N]<'G+s::L>(out_flat{0..N});
  A_out = out_flatter.out;

  II := s::II;
  L := s::L;
}