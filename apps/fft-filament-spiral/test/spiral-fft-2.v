/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

//   Input/output stream: 8 complex words per cycle
//   Throughput: one transform every 111 cycles
//   Latency: 115 cycles

//   Resources required:
//     24 multipliers (32 x 32 bit)
//     44 adders (32 x 32 bit)
//     12 ROMs (16 words, 32 bits per word)

// Generated on Mon Nov 20 18:59:07 UTC 2023

// Latency: 115 clock cycles
// Throughput: 1 transform every 111 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 111 cycles.  This means that
// 111 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
// on the following cycle.

// The system has a latency of 115 cycles.  This means that
// the 'next_out' will be asserted 115 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.


module dft_testbench_2 ();
  reg clk, reset, next;
  wire next_out;
  integer i, j, k, l, m;
  reg [15:0] counter;
  reg [31:0] in[15:0];
  wire [31:0] X0;
  wire [31:0] Y0;
  wire [31:0] X1;
  wire [31:0] Y1;
  wire [31:0] X2;
  wire [31:0] Y2;
  wire [31:0] X3;
  wire [31:0] Y3;
  wire [31:0] X4;
  wire [31:0] Y4;
  wire [31:0] X5;
  wire [31:0] Y5;
  wire [31:0] X6;
  wire [31:0] Y6;
  wire [31:0] X7;
  wire [31:0] Y7;
  wire [31:0] X8;
  wire [31:0] Y8;
  wire [31:0] X9;
  wire [31:0] Y9;
  wire [31:0] X10;
  wire [31:0] Y10;
  wire [31:0] X11;
  wire [31:0] Y11;
  wire [31:0] X12;
  wire [31:0] Y12;
  wire [31:0] X13;
  wire [31:0] Y13;
  wire [31:0] X14;
  wire [31:0] Y14;
  wire [31:0] X15;
  wire [31:0] Y15;
  reg clrCnt;
  assign X0  = in[0];
  assign X1  = in[1];
  assign X2  = in[2];
  assign X3  = in[3];
  assign X4  = in[4];
  assign X5  = in[5];
  assign X6  = in[6];
  assign X7  = in[7];
  assign X8  = in[8];
  assign X9  = in[9];
  assign X10 = in[10];
  assign X11 = in[11];
  assign X12 = in[12];
  assign X13 = in[13];
  assign X14 = in[14];
  assign X15 = in[15];

  initial clk = 0;

  always #10000 clk = ~clk;


  // Instantiate top-level module of core 'X' signals are system inputs
  // and 'Y' signals are system outputs
  dft_top_2 dft_top_instance (
      .clk(clk),
      .reset(reset),
      .next(next),
      .next_out(next_out),
      .X0(X0),
      .Y0(Y0),
      .X1(X1),
      .Y1(Y1),
      .X2(X2),
      .Y2(Y2),
      .X3(X3),
      .Y3(Y3),
      .X4(X4),
      .Y4(Y4),
      .X5(X5),
      .Y5(Y5),
      .X6(X6),
      .Y6(Y6),
      .X7(X7),
      .Y7(Y7),
      .X8(X8),
      .Y8(Y8),
      .X9(X9),
      .Y9(Y9),
      .X10(X10),
      .Y10(Y10),
      .X11(X11),
      .Y11(Y11),
      .X12(X12),
      .Y12(Y12),
      .X13(X13),
      .Y13(Y13),
      .X14(X14),
      .Y14(Y14),
      .X15(X15),
      .Y15(Y15)
  );

  // You can use this counter to verify that the gap and latency are as expected.
  always @(posedge clk) begin
    if (clrCnt) counter <= 0;
    else counter <= counter + 1;
  end


  initial begin
    @(posedge clk);
    @(posedge clk);

    // On the next cycle, begin loading input vector.
    next   <= 1;
    clrCnt <= 1;
    @(posedge clk);
    clrCnt <= 0;
    next   <= 0;

    // The 16 complex data points enter the system over 2 cycles
    for (j = 0; j < 1; j = j + 1) begin
      // Input: 8 complex words per cycle
      for (k = 0; k < 16; k = k + 1) begin
        in[k] <= j * 16 + k;
      end
      @(posedge clk);
    end
    j = 1;
    for (k = 0; k < 16; k = k + 1) begin
      in[k] <= j * 16 + k;
    end


    @(posedge clk);
    // Wait until the next data vector can be entered
    while (counter < 109) @(posedge clk);

    // On the next cycle, we will start the next data vector
    next   <= 1;
    clrCnt <= 1;
    @(posedge clk);
    clrCnt <= 0;
    next   <= 0;

    // Start entering next input vector
    for (j = 0; j < 1; j = j + 1) begin
      // Input 16 words per cycle
      for (k = 0; k < 16; k = k + 1) begin
        in[k] <= 32 + j * 16 + k;
      end
      @(posedge clk);
    end
    j = 1;
    for (k = 0; k < 16; k = k + 1) begin
      in[k] <= 32 + j * 16 + k;
    end
  end


  initial begin
    // set initial values
    in[0]  <= 0;
    in[1]  <= 0;
    in[2]  <= 0;
    in[3]  <= 0;
    in[4]  <= 0;
    in[5]  <= 0;
    in[6]  <= 0;
    in[7]  <= 0;
    in[8]  <= 0;
    in[9]  <= 0;
    in[10] <= 0;
    in[11] <= 0;
    in[12] <= 0;
    in[13] <= 0;
    in[14] <= 0;
    in[15] <= 0;
    next   <= 0;
    reset  <= 0;

    @(posedge clk);
    reset <= 1;
    @(posedge clk);
    reset <= 0;
    @(posedge clk);
    @(posedge clk);
    // Wait until next_out goes high, then wait one clock cycle and begin receiving data
    @(posedge next_out);
    @(posedge clk);
    #1;
    $display("--- begin output 1---");

    for (m = 0; m < 1; m = m + 1) begin
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      @(posedge clk);
      #1;
    end
    $display("%x", Y0);
    $display("%x", Y1);
    $display("%x", Y2);
    $display("%x", Y3);
    $display("%x", Y4);
    $display("%x", Y5);
    $display("%x", Y6);
    $display("%x", Y7);
    $display("%x", Y8);
    $display("%x", Y9);
    $display("%x", Y10);
    $display("%x", Y11);
    $display("%x", Y12);
    $display("%x", Y13);
    $display("%x", Y14);
    $display("%x", Y15);
    // Wait until next_out goes high, then wait one clock cycle and begin receiving data
    @(posedge next_out);
    @(posedge clk);
    #1;
    $display("--- begin output 2---");

    for (m = 0; m < 1; m = m + 1) begin
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      @(posedge clk);
      #1;
    end
    $display("%x", Y0);
    $display("%x", Y1);
    $display("%x", Y2);
    $display("%x", Y3);
    $display("%x", Y4);
    $display("%x", Y5);
    $display("%x", Y6);
    $display("%x", Y7);
    $display("%x", Y8);
    $display("%x", Y9);
    $display("%x", Y10);
    $display("%x", Y11);
    $display("%x", Y12);
    $display("%x", Y13);
    $display("%x", Y14);
    $display("%x", Y15);
    $finish;
  end
endmodule

// Latency: 115
// Gap: 111
// module_name_is:dft_top_2
module dft_top_2 (
    clk,
    reset,
    next,
    next_out,
    X0,
    Y0,
    X1,
    Y1,
    X2,
    Y2,
    X3,
    Y3,
    X4,
    Y4,
    X5,
    Y5,
    X6,
    Y6,
    X7,
    Y7,
    X8,
    Y8,
    X9,
    Y9,
    X10,
    Y10,
    X11,
    Y11,
    X12,
    Y12,
    X13,
    Y13,
    X14,
    Y14,
    X15,
    Y15
);

  output next_out;
  input clk, reset, next;

  input [31:0] X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15;

  output [31:0] Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y8, Y9, Y10, Y11, Y12, Y13, Y14, Y15;

  wire [31:0] t0_0;
  wire [31:0] t0_1;
  wire [31:0] t0_2;
  wire [31:0] t0_3;
  wire [31:0] t0_4;
  wire [31:0] t0_5;
  wire [31:0] t0_6;
  wire [31:0] t0_7;
  wire [31:0] t0_8;
  wire [31:0] t0_9;
  wire [31:0] t0_10;
  wire [31:0] t0_11;
  wire [31:0] t0_12;
  wire [31:0] t0_13;
  wire [31:0] t0_14;
  wire [31:0] t0_15;
  wire next_0;
  wire [31:0] t1_0;
  wire [31:0] t1_1;
  wire [31:0] t1_2;
  wire [31:0] t1_3;
  wire [31:0] t1_4;
  wire [31:0] t1_5;
  wire [31:0] t1_6;
  wire [31:0] t1_7;
  wire [31:0] t1_8;
  wire [31:0] t1_9;
  wire [31:0] t1_10;
  wire [31:0] t1_11;
  wire [31:0] t1_12;
  wire [31:0] t1_13;
  wire [31:0] t1_14;
  wire [31:0] t1_15;
  wire next_1;
  wire [31:0] t2_0;
  wire [31:0] t2_1;
  wire [31:0] t2_2;
  wire [31:0] t2_3;
  wire [31:0] t2_4;
  wire [31:0] t2_5;
  wire [31:0] t2_6;
  wire [31:0] t2_7;
  wire [31:0] t2_8;
  wire [31:0] t2_9;
  wire [31:0] t2_10;
  wire [31:0] t2_11;
  wire [31:0] t2_12;
  wire [31:0] t2_13;
  wire [31:0] t2_14;
  wire [31:0] t2_15;
  wire next_2;
  assign t0_0 = X0;
  assign Y0 = t2_0;
  assign t0_1 = X1;
  assign Y1 = t2_1;
  assign t0_2 = X2;
  assign Y2 = t2_2;
  assign t0_3 = X3;
  assign Y3 = t2_3;
  assign t0_4 = X4;
  assign Y4 = t2_4;
  assign t0_5 = X5;
  assign Y5 = t2_5;
  assign t0_6 = X6;
  assign Y6 = t2_6;
  assign t0_7 = X7;
  assign Y7 = t2_7;
  assign t0_8 = X8;
  assign Y8 = t2_8;
  assign t0_9 = X9;
  assign Y9 = t2_9;
  assign t0_10 = X10;
  assign Y10 = t2_10;
  assign t0_11 = X11;
  assign Y11 = t2_11;
  assign t0_12 = X12;
  assign Y12 = t2_12;
  assign t0_13 = X13;
  assign Y13 = t2_13;
  assign t0_14 = X14;
  assign Y14 = t2_14;
  assign t0_15 = X15;
  assign Y15 = t2_15;
  assign next_0 = next;
  assign next_out = next_2;

  // latency=4, gap=2
  rc46380 stage0 (
      .clk(clk),
      .reset(reset),
      .next(next_0),
      .next_out(next_1),
      .X0(t0_0),
      .Y0(t1_0),
      .X1(t0_1),
      .Y1(t1_1),
      .X2(t0_2),
      .Y2(t1_2),
      .X3(t0_3),
      .Y3(t1_3),
      .X4(t0_4),
      .Y4(t1_4),
      .X5(t0_5),
      .Y5(t1_5),
      .X6(t0_6),
      .Y6(t1_6),
      .X7(t0_7),
      .Y7(t1_7),
      .X8(t0_8),
      .Y8(t1_8),
      .X9(t0_9),
      .Y9(t1_9),
      .X10(t0_10),
      .Y10(t1_10),
      .X11(t0_11),
      .Y11(t1_11),
      .X12(t0_12),
      .Y12(t1_12),
      .X13(t0_13),
      .Y13(t1_13),
      .X14(t0_14),
      .Y14(t1_14),
      .X15(t0_15),
      .Y15(t1_15)
  );


  // latency=111, gap=111
  ICompose_47531 IComposeInst48718 (
      .next(next_1),
      .clk(clk),
      .reset(reset),
      .next_out(next_2),
      .X0(t1_0),
      .Y0(t2_0),
      .X1(t1_1),
      .Y1(t2_1),
      .X2(t1_2),
      .Y2(t2_2),
      .X3(t1_3),
      .Y3(t2_3),
      .X4(t1_4),
      .Y4(t2_4),
      .X5(t1_5),
      .Y5(t2_5),
      .X6(t1_6),
      .Y6(t2_6),
      .X7(t1_7),
      .Y7(t2_7),
      .X8(t1_8),
      .Y8(t2_8),
      .X9(t1_9),
      .Y9(t2_9),
      .X10(t1_10),
      .Y10(t2_10),
      .X11(t1_11),
      .Y11(t2_11),
      .X12(t1_12),
      .Y12(t2_12),
      .X13(t1_13),
      .Y13(t2_13),
      .X14(t1_14),
      .Y14(t2_14),
      .X15(t1_15),
      .Y15(t2_15)
  );


endmodule

// Latency: 4
// Gap: 2
module rc46380 (
    clk,
    reset,
    next,
    next_out,
    X0,
    Y0,
    X1,
    Y1,
    X2,
    Y2,
    X3,
    Y3,
    X4,
    Y4,
    X5,
    Y5,
    X6,
    Y6,
    X7,
    Y7,
    X8,
    Y8,
    X9,
    Y9,
    X10,
    Y10,
    X11,
    Y11,
    X12,
    Y12,
    X13,
    Y13,
    X14,
    Y14,
    X15,
    Y15
);

  output next_out;
  input clk, reset, next;

  input [31:0] X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15;

  output [31:0] Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y8, Y9, Y10, Y11, Y12, Y13, Y14, Y15;

  wire [63:0] t0;
  wire [63:0] s0;
  assign t0 = {X0, X1};
  wire [63:0] t1;
  wire [63:0] s1;
  assign t1 = {X2, X3};
  wire [63:0] t2;
  wire [63:0] s2;
  assign t2 = {X4, X5};
  wire [63:0] t3;
  wire [63:0] s3;
  assign t3 = {X6, X7};
  wire [63:0] t4;
  wire [63:0] s4;
  assign t4 = {X8, X9};
  wire [63:0] t5;
  wire [63:0] s5;
  assign t5 = {X10, X11};
  wire [63:0] t6;
  wire [63:0] s6;
  assign t6 = {X12, X13};
  wire [63:0] t7;
  wire [63:0] s7;
  assign t7  = {X14, X15};
  assign Y0  = s0[63:32];
  assign Y1  = s0[31:0];
  assign Y2  = s1[63:32];
  assign Y3  = s1[31:0];
  assign Y4  = s2[63:32];
  assign Y5  = s2[31:0];
  assign Y6  = s3[63:32];
  assign Y7  = s3[31:0];
  assign Y8  = s4[63:32];
  assign Y9  = s4[31:0];
  assign Y10 = s5[63:32];
  assign Y11 = s5[31:0];
  assign Y12 = s6[63:32];
  assign Y13 = s6[31:0];
  assign Y14 = s7[63:32];
  assign Y15 = s7[31:0];

  perm46378 instPerm48719 (
      .x0(t0),
      .y0(s0),
      .x1(t1),
      .y1(s1),
      .x2(t2),
      .y2(s2),
      .x3(t3),
      .y3(s3),
      .x4(t4),
      .y4(s4),
      .x5(t5),
      .y5(s5),
      .x6(t6),
      .y6(s6),
      .x7(t7),
      .y7(s7),
      .clk(clk),
      .next(next),
      .next_out(next_out),
      .reset(reset)
  );



endmodule

// Latency: 4
// Gap: 2
module perm46378 (
    clk,
    next,
    reset,
    next_out,
    x0,
    y0,
    x1,
    y1,
    x2,
    y2,
    x3,
    y3,
    x4,
    y4,
    x5,
    y5,
    x6,
    y6,
    x7,
    y7
);
  parameter numBanks = 8;
  parameter logBanks = 3;
  parameter depth = 2;
  parameter logDepth = 1;
  parameter width = 64;

  input [width-1:0] x0;
  output [width-1:0] y0;
  wire [width-1:0] ybuff0;
  input [width-1:0] x1;
  output [width-1:0] y1;
  wire [width-1:0] ybuff1;
  input [width-1:0] x2;
  output [width-1:0] y2;
  wire [width-1:0] ybuff2;
  input [width-1:0] x3;
  output [width-1:0] y3;
  wire [width-1:0] ybuff3;
  input [width-1:0] x4;
  output [width-1:0] y4;
  wire [width-1:0] ybuff4;
  input [width-1:0] x5;
  output [width-1:0] y5;
  wire [width-1:0] ybuff5;
  input [width-1:0] x6;
  output [width-1:0] y6;
  wire [width-1:0] ybuff6;
  input [width-1:0] x7;
  output [width-1:0] y7;
  wire [width-1:0] ybuff7;
  input clk, next, reset;
  output next_out;

  wire next0;

  reg inFlip0, outFlip0;
  reg inActive, outActive;

  wire [logBanks-1:0] inBank0, outBank0;
  wire [logDepth-1:0] inAddr0, outAddr0;
  wire [logBanks-1:0] outBank_a0;
  wire [logDepth-1:0] outAddr_a0;
  wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
  wire [logBanks-1:0] inBank1, outBank1;
  wire [logDepth-1:0] inAddr1, outAddr1;
  wire [logBanks-1:0] outBank_a1;
  wire [logDepth-1:0] outAddr_a1;
  wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
  wire [logBanks-1:0] inBank2, outBank2;
  wire [logDepth-1:0] inAddr2, outAddr2;
  wire [logBanks-1:0] outBank_a2;
  wire [logDepth-1:0] outAddr_a2;
  wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
  wire [logBanks-1:0] inBank3, outBank3;
  wire [logDepth-1:0] inAddr3, outAddr3;
  wire [logBanks-1:0] outBank_a3;
  wire [logDepth-1:0] outAddr_a3;
  wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
  wire [logBanks-1:0] inBank4, outBank4;
  wire [logDepth-1:0] inAddr4, outAddr4;
  wire [logBanks-1:0] outBank_a4;
  wire [logDepth-1:0] outAddr_a4;
  wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
  wire [logBanks-1:0] inBank5, outBank5;
  wire [logDepth-1:0] inAddr5, outAddr5;
  wire [logBanks-1:0] outBank_a5;
  wire [logDepth-1:0] outAddr_a5;
  wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
  wire [logBanks-1:0] inBank6, outBank6;
  wire [logDepth-1:0] inAddr6, outAddr6;
  wire [logBanks-1:0] outBank_a6;
  wire [logDepth-1:0] outAddr_a6;
  wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
  wire [logBanks-1:0] inBank7, outBank7;
  wire [logDepth-1:0] inAddr7, outAddr7;
  wire [logBanks-1:0] outBank_a7;
  wire [logDepth-1:0] outAddr_a7;
  wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


  reg [logDepth-1:0]
      inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;

  assign addr0  = {inCount, 3'd0};
  assign addr0b = {outCount, 3'd0};
  assign addr0c = {outCount_for_rd_addr, 3'd0};
  assign addr1  = {inCount, 3'd1};
  assign addr1b = {outCount, 3'd1};
  assign addr1c = {outCount_for_rd_addr, 3'd1};
  assign addr2  = {inCount, 3'd2};
  assign addr2b = {outCount, 3'd2};
  assign addr2c = {outCount_for_rd_addr, 3'd2};
  assign addr3  = {inCount, 3'd3};
  assign addr3b = {outCount, 3'd3};
  assign addr3c = {outCount_for_rd_addr, 3'd3};
  assign addr4  = {inCount, 3'd4};
  assign addr4b = {outCount, 3'd4};
  assign addr4c = {outCount_for_rd_addr, 3'd4};
  assign addr5  = {inCount, 3'd5};
  assign addr5b = {outCount, 3'd5};
  assign addr5c = {outCount_for_rd_addr, 3'd5};
  assign addr6  = {inCount, 3'd6};
  assign addr6b = {outCount, 3'd6};
  assign addr6c = {outCount_for_rd_addr, 3'd6};
  assign addr7  = {inCount, 3'd7};
  assign addr7b = {outCount, 3'd7};
  assign addr7c = {outCount_for_rd_addr, 3'd7};
  wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7;

  reg [width-1:0] z_0_0;
  reg [width-1:0] z_0_1;
  reg [width-1:0] z_0_2;
  reg [width-1:0] z_0_3;
  reg [width-1:0] z_0_4;
  reg [width-1:0] z_0_5;
  reg [width-1:0] z_0_6;
  reg [width-1:0] z_0_7;
  wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7;

  wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7;

  always @(posedge clk) begin
  end

  assign inBank0[0] = addr0[2];
  assign inBank0[1] = addr0[3] ^ addr0[1];
  assign inBank0[2] = addr0[0];
  assign inAddr0[0] = addr0[1];
  assign outBank0[0] = addr0b[0];
  assign outBank0[1] = addr0b[3] ^ addr0b[1];
  assign outBank0[2] = addr0b[2];
  assign outAddr0[0] = addr0b[3];
  assign outBank_a0[0] = addr0c[0];
  assign outBank_a0[1] = addr0c[3] ^ addr0c[1];
  assign outBank_a0[2] = addr0c[2];
  assign outAddr_a0[0] = addr0c[3];

  assign inBank1[0] = addr1[2];
  assign inBank1[1] = addr1[3] ^ addr1[1];
  assign inBank1[2] = addr1[0];
  assign inAddr1[0] = addr1[1];
  assign outBank1[0] = addr1b[0];
  assign outBank1[1] = addr1b[3] ^ addr1b[1];
  assign outBank1[2] = addr1b[2];
  assign outAddr1[0] = addr1b[3];
  assign outBank_a1[0] = addr1c[0];
  assign outBank_a1[1] = addr1c[3] ^ addr1c[1];
  assign outBank_a1[2] = addr1c[2];
  assign outAddr_a1[0] = addr1c[3];

  assign inBank2[0] = addr2[2];
  assign inBank2[1] = addr2[3] ^ addr2[1];
  assign inBank2[2] = addr2[0];
  assign inAddr2[0] = addr2[1];
  assign outBank2[0] = addr2b[0];
  assign outBank2[1] = addr2b[3] ^ addr2b[1];
  assign outBank2[2] = addr2b[2];
  assign outAddr2[0] = addr2b[3];
  assign outBank_a2[0] = addr2c[0];
  assign outBank_a2[1] = addr2c[3] ^ addr2c[1];
  assign outBank_a2[2] = addr2c[2];
  assign outAddr_a2[0] = addr2c[3];

  assign inBank3[0] = addr3[2];
  assign inBank3[1] = addr3[3] ^ addr3[1];
  assign inBank3[2] = addr3[0];
  assign inAddr3[0] = addr3[1];
  assign outBank3[0] = addr3b[0];
  assign outBank3[1] = addr3b[3] ^ addr3b[1];
  assign outBank3[2] = addr3b[2];
  assign outAddr3[0] = addr3b[3];
  assign outBank_a3[0] = addr3c[0];
  assign outBank_a3[1] = addr3c[3] ^ addr3c[1];
  assign outBank_a3[2] = addr3c[2];
  assign outAddr_a3[0] = addr3c[3];

  assign inBank4[0] = addr4[2];
  assign inBank4[1] = addr4[3] ^ addr4[1];
  assign inBank4[2] = addr4[0];
  assign inAddr4[0] = addr4[1];
  assign outBank4[0] = addr4b[0];
  assign outBank4[1] = addr4b[3] ^ addr4b[1];
  assign outBank4[2] = addr4b[2];
  assign outAddr4[0] = addr4b[3];
  assign outBank_a4[0] = addr4c[0];
  assign outBank_a4[1] = addr4c[3] ^ addr4c[1];
  assign outBank_a4[2] = addr4c[2];
  assign outAddr_a4[0] = addr4c[3];

  assign inBank5[0] = addr5[2];
  assign inBank5[1] = addr5[3] ^ addr5[1];
  assign inBank5[2] = addr5[0];
  assign inAddr5[0] = addr5[1];
  assign outBank5[0] = addr5b[0];
  assign outBank5[1] = addr5b[3] ^ addr5b[1];
  assign outBank5[2] = addr5b[2];
  assign outAddr5[0] = addr5b[3];
  assign outBank_a5[0] = addr5c[0];
  assign outBank_a5[1] = addr5c[3] ^ addr5c[1];
  assign outBank_a5[2] = addr5c[2];
  assign outAddr_a5[0] = addr5c[3];

  assign inBank6[0] = addr6[2];
  assign inBank6[1] = addr6[3] ^ addr6[1];
  assign inBank6[2] = addr6[0];
  assign inAddr6[0] = addr6[1];
  assign outBank6[0] = addr6b[0];
  assign outBank6[1] = addr6b[3] ^ addr6b[1];
  assign outBank6[2] = addr6b[2];
  assign outAddr6[0] = addr6b[3];
  assign outBank_a6[0] = addr6c[0];
  assign outBank_a6[1] = addr6c[3] ^ addr6c[1];
  assign outBank_a6[2] = addr6c[2];
  assign outAddr_a6[0] = addr6c[3];

  assign inBank7[0] = addr7[2];
  assign inBank7[1] = addr7[3] ^ addr7[1];
  assign inBank7[2] = addr7[0];
  assign inAddr7[0] = addr7[1];
  assign outBank7[0] = addr7b[0];
  assign outBank7[1] = addr7b[3] ^ addr7b[1];
  assign outBank7[2] = addr7b[2];
  assign outAddr7[0] = addr7b[3];
  assign outBank_a7[0] = addr7c[0];
  assign outBank_a7[1] = addr7c[3] ^ addr7c[1];
  assign outBank_a7[2] = addr7c[2];
  assign outAddr_a7[0] = addr7c[3];

  shiftRegFIFO #(2, 1) shiftFIFO_48722 (
      .X  (next),
      .Y  (next0),
      .clk(clk)
  );


  shiftRegFIFO #(2, 1) shiftFIFO_48725 (
      .X  (next0),
      .Y  (next_out),
      .clk(clk)
  );


  memArray16_46378 #(numBanks, logBanks, depth, logDepth, width) memSys (
      .inFlip(inFlip0),
      .outFlip(outFlip0),
      .next(next),
      .reset(reset),
      .x0(w_1_0[width+logDepth-1:logDepth]),
      .y0(ybuff0),
      .inAddr0(w_1_0[logDepth-1:0]),
      .outAddr0(u_1_0),
      .x1(w_1_1[width+logDepth-1:logDepth]),
      .y1(ybuff1),
      .inAddr1(w_1_1[logDepth-1:0]),
      .outAddr1(u_1_1),
      .x2(w_1_2[width+logDepth-1:logDepth]),
      .y2(ybuff2),
      .inAddr2(w_1_2[logDepth-1:0]),
      .outAddr2(u_1_2),
      .x3(w_1_3[width+logDepth-1:logDepth]),
      .y3(ybuff3),
      .inAddr3(w_1_3[logDepth-1:0]),
      .outAddr3(u_1_3),
      .x4(w_1_4[width+logDepth-1:logDepth]),
      .y4(ybuff4),
      .inAddr4(w_1_4[logDepth-1:0]),
      .outAddr4(u_1_4),
      .x5(w_1_5[width+logDepth-1:logDepth]),
      .y5(ybuff5),
      .inAddr5(w_1_5[logDepth-1:0]),
      .outAddr5(u_1_5),
      .x6(w_1_6[width+logDepth-1:logDepth]),
      .y6(ybuff6),
      .inAddr6(w_1_6[logDepth-1:0]),
      .outAddr6(u_1_6),
      .x7(w_1_7[width+logDepth-1:logDepth]),
      .y7(ybuff7),
      .inAddr7(w_1_7[logDepth-1:0]),
      .outAddr7(u_1_7),
      .clk(clk)
  );

  reg resetOutCountRd2_2;
  reg resetOutCountRd2_3;

  always @(posedge clk) begin
    if (reset == 1) begin
      resetOutCountRd2_2 <= 0;
      resetOutCountRd2_3 <= 0;
    end else begin
      resetOutCountRd2_2 <= (inCount == 1) ? 1'b1 : 1'b0;
      resetOutCountRd2_3 <= resetOutCountRd2_2;
      if (resetOutCountRd2_3 == 1'b1) outCount_for_rd_data <= 0;
      else outCount_for_rd_data <= outCount_for_rd_data + 1;
    end
  end
  always @(posedge clk) begin
    if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
      inFlip0 <= 0;
      outFlip0 <= 1;
      outCount <= 0;
      inCount <= 0;
      outCount_for_rd_addr <= 0;
    end else begin
      outCount_d  <= outCount;
      outCount_dd <= outCount_d;
      if (inCount == 1) outCount_for_rd_addr <= 0;
      else outCount_for_rd_addr <= outCount_for_rd_addr + 1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
      if (inCount == 1) begin
        outFlip0 <= ~outFlip0;
        outCount <= 0;
      end else outCount <= outCount + 1;
      if (inCount == 1) begin
        inFlip0 <= ~inFlip0;
      end
      if (next == 1) begin
        if (inCount >= 1) inFlip0 <= ~inFlip0;
        inCount <= 0;
      end else inCount <= inCount + 1;
    end
  end
  assign w_0_0 = {x0, inAddr0};
  assign w_0_4 = {x1, inAddr1};
  assign w_0_2 = {x2, inAddr2};
  assign w_0_6 = {x3, inAddr3};
  assign w_0_1 = {x4, inAddr4};
  assign w_0_5 = {x5, inAddr5};
  assign w_0_3 = {x6, inAddr6};
  assign w_0_7 = {x7, inAddr7};
  assign y0 = z_1_0;
  assign y1 = z_1_1;
  assign y2 = z_1_2;
  assign y3 = z_1_3;
  assign y4 = z_1_4;
  assign y5 = z_1_5;
  assign y6 = z_1_6;
  assign y7 = z_1_7;
  assign u_0_0 = outAddr_a0;
  assign u_0_1 = outAddr_a1;
  assign u_0_2 = outAddr_a2;
  assign u_0_3 = outAddr_a3;
  assign u_0_4 = outAddr_a4;
  assign u_0_5 = outAddr_a5;
  assign u_0_6 = outAddr_a6;
  assign u_0_7 = outAddr_a7;
  wire wr_ctrl_st_0;
  assign wr_ctrl_st_0 = inCount[0];

  switch #(logDepth + width) in_sw_0_0 (
      .x0  (w_0_0),
      .x1  (w_0_2),
      .y0  (w_1_0),
      .y1  (w_1_2),
      .ctrl(wr_ctrl_st_0)
  );
  switch #(logDepth + width) in_sw_0_1 (
      .x0  (w_0_1),
      .x1  (w_0_3),
      .y0  (w_1_1),
      .y1  (w_1_3),
      .ctrl(wr_ctrl_st_0)
  );
  switch #(logDepth + width) in_sw_0_2 (
      .x0  (w_0_4),
      .x1  (w_0_6),
      .y0  (w_1_4),
      .y1  (w_1_6),
      .ctrl(wr_ctrl_st_0)
  );
  switch #(logDepth + width) in_sw_0_3 (
      .x0  (w_0_5),
      .x1  (w_0_7),
      .y0  (w_1_5),
      .y1  (w_1_7),
      .ctrl(wr_ctrl_st_0)
  );
  wire rdd_ctrl_st_0;
  assign rdd_ctrl_st_0 = outCount_for_rd_data[0];

  switch #(width) out_sw_0_0 (
      .x0  (z_0_0),
      .x1  (z_0_2),
      .y0  (z_1_0),
      .y1  (z_1_2),
      .ctrl(rdd_ctrl_st_0)
  );
  switch #(width) out_sw_0_1 (
      .x0  (z_0_1),
      .x1  (z_0_3),
      .y0  (z_1_1),
      .y1  (z_1_3),
      .ctrl(rdd_ctrl_st_0)
  );
  switch #(width) out_sw_0_2 (
      .x0  (z_0_4),
      .x1  (z_0_6),
      .y0  (z_1_4),
      .y1  (z_1_6),
      .ctrl(rdd_ctrl_st_0)
  );
  switch #(width) out_sw_0_3 (
      .x0  (z_0_5),
      .x1  (z_0_7),
      .y0  (z_1_5),
      .y1  (z_1_7),
      .ctrl(rdd_ctrl_st_0)
  );
  wire rda_ctrl_st_0;
  assign rda_ctrl_st_0 = outCount_for_rd_addr[0];

  switch #(logDepth) rdaddr_sw_0_0 (
      .x0  (u_0_0),
      .x1  (u_0_2),
      .y0  (u_1_0),
      .y1  (u_1_2),
      .ctrl(rda_ctrl_st_0)
  );
  switch #(logDepth) rdaddr_sw_0_1 (
      .x0  (u_0_1),
      .x1  (u_0_3),
      .y0  (u_1_1),
      .y1  (u_1_3),
      .ctrl(rda_ctrl_st_0)
  );
  switch #(logDepth) rdaddr_sw_0_2 (
      .x0  (u_0_4),
      .x1  (u_0_6),
      .y0  (u_1_4),
      .y1  (u_1_6),
      .ctrl(rda_ctrl_st_0)
  );
  switch #(logDepth) rdaddr_sw_0_3 (
      .x0  (u_0_5),
      .x1  (u_0_7),
      .y0  (u_1_5),
      .y1  (u_1_7),
      .ctrl(rda_ctrl_st_0)
  );
endmodule

module memArray16_46378 (
    next,
    reset,
    x0,
    y0,
    inAddr0,
    outAddr0,
    x1,
    y1,
    inAddr1,
    outAddr1,
    x2,
    y2,
    inAddr2,
    outAddr2,
    x3,
    y3,
    inAddr3,
    outAddr3,
    x4,
    y4,
    inAddr4,
    outAddr4,
    x5,
    y5,
    inAddr5,
    outAddr5,
    x6,
    y6,
    inAddr6,
    outAddr6,
    x7,
    y7,
    inAddr7,
    outAddr7,
    clk,
    inFlip,
    outFlip
);

  parameter numBanks = 8;
  parameter logBanks = 3;
  parameter depth = 2;
  parameter logDepth = 1;
  parameter width = 64;

  input clk, next, reset;
  input inFlip, outFlip;
  wire next0;

  input [width-1:0] x0;
  output [width-1:0] y0;
  input [logDepth-1:0] inAddr0, outAddr0;
  input [width-1:0] x1;
  output [width-1:0] y1;
  input [logDepth-1:0] inAddr1, outAddr1;
  input [width-1:0] x2;
  output [width-1:0] y2;
  input [logDepth-1:0] inAddr2, outAddr2;
  input [width-1:0] x3;
  output [width-1:0] y3;
  input [logDepth-1:0] inAddr3, outAddr3;
  input [width-1:0] x4;
  output [width-1:0] y4;
  input [logDepth-1:0] inAddr4, outAddr4;
  input [width-1:0] x5;
  output [width-1:0] y5;
  input [logDepth-1:0] inAddr5, outAddr5;
  input [width-1:0] x6;
  output [width-1:0] y6;
  input [logDepth-1:0] inAddr6, outAddr6;
  input [width-1:0] x7;
  output [width-1:0] y7;
  input [logDepth-1:0] inAddr7, outAddr7;
  shiftRegFIFO #(2, 1) shiftFIFO_48728 (
      .X  (next),
      .Y  (next0),
      .clk(clk)
  );


  memMod_dist #(depth * 2, width, logDepth + 1) memMod0 (
      .in(x0),
      .out(y0),
      .inAddr({inFlip, inAddr0}),
      .outAddr({outFlip, outAddr0}),
      .writeSel(1'b1),
      .clk(clk)
  );
  memMod_dist #(depth * 2, width, logDepth + 1) memMod1 (
      .in(x1),
      .out(y1),
      .inAddr({inFlip, inAddr1}),
      .outAddr({outFlip, outAddr1}),
      .writeSel(1'b1),
      .clk(clk)
  );
  memMod_dist #(depth * 2, width, logDepth + 1) memMod2 (
      .in(x2),
      .out(y2),
      .inAddr({inFlip, inAddr2}),
      .outAddr({outFlip, outAddr2}),
      .writeSel(1'b1),
      .clk(clk)
  );
  memMod_dist #(depth * 2, width, logDepth + 1) memMod3 (
      .in(x3),
      .out(y3),
      .inAddr({inFlip, inAddr3}),
      .outAddr({outFlip, outAddr3}),
      .writeSel(1'b1),
      .clk(clk)
  );
  memMod_dist #(depth * 2, width, logDepth + 1) memMod4 (
      .in(x4),
      .out(y4),
      .inAddr({inFlip, inAddr4}),
      .outAddr({outFlip, outAddr4}),
      .writeSel(1'b1),
      .clk(clk)
  );
  memMod_dist #(depth * 2, width, logDepth + 1) memMod5 (
      .in(x5),
      .out(y5),
      .inAddr({inFlip, inAddr5}),
      .outAddr({outFlip, outAddr5}),
      .writeSel(1'b1),
      .clk(clk)
  );
  memMod_dist #(depth * 2, width, logDepth + 1) memMod6 (
      .in(x6),
      .out(y6),
      .inAddr({inFlip, inAddr6}),
      .outAddr({outFlip, outAddr6}),
      .writeSel(1'b1),
      .clk(clk)
  );
  memMod_dist #(depth * 2, width, logDepth + 1) memMod7 (
      .in(x7),
      .out(y7),
      .inAddr({inFlip, inAddr7}),
      .outAddr({outFlip, outAddr7}),
      .writeSel(1'b1),
      .clk(clk)
  );
endmodule

module memMod (
    in,
    out,
    inAddr,
    outAddr,
    writeSel,
    clk
);

  parameter depth = 1024, width = 16, logDepth = 10;

  input [width-1:0] in;
  input [logDepth-1:0] inAddr, outAddr;
  input writeSel, clk;
  output [width-1:0] out;
  reg [width-1:0] out;

  // synthesis attribute ram_style of mem is block

  reg [width-1:0] mem [depth-1:0];

  always @(posedge clk) begin
    out <= mem[outAddr];

    if (writeSel) mem[inAddr] <= in;
  end
endmodule



module memMod_dist (
    in,
    out,
    inAddr,
    outAddr,
    writeSel,
    clk
);

  parameter depth = 1024, width = 16, logDepth = 10;

  input [width-1:0] in;
  input [logDepth-1:0] inAddr, outAddr;
  input writeSel, clk;
  output [width-1:0] out;
  reg [width-1:0] out;

  // synthesis attribute ram_style of mem is distributed

  reg [width-1:0] mem [depth-1:0];

  always @(posedge clk) begin
    out <= mem[outAddr];

    if (writeSel) mem[inAddr] <= in;
  end
endmodule

module switch (
    ctrl,
    x0,
    x1,
    y0,
    y1
);
  parameter width = 16;
  input [width-1:0] x0, x1;
  output [width-1:0] y0, y1;
  input ctrl;
  assign y0 = (ctrl == 0) ? x0 : x1;
  assign y1 = (ctrl == 0) ? x1 : x0;
endmodule

// Latency: 111
// Gap: 111
module ICompose_47531 (
    clk,
    reset,
    next,
    next_out,
    X0,
    Y0,
    X1,
    Y1,
    X2,
    Y2,
    X3,
    Y3,
    X4,
    Y4,
    X5,
    Y5,
    X6,
    Y6,
    X7,
    Y7,
    X8,
    Y8,
    X9,
    Y9,
    X10,
    Y10,
    X11,
    Y11,
    X12,
    Y12,
    X13,
    Y13,
    X14,
    Y14,
    X15,
    Y15
);

  output next_out;
  reg next_out;
  input clk, reset, next;

  reg [5:0] cycle_count;
  reg [1:0] count;

  input [31:0] X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15;

  output [31:0] Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y8, Y9, Y10, Y11, Y12, Y13, Y14, Y15;

  reg [31:0] Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y8, Y9, Y10, Y11, Y12, Y13, Y14, Y15;

  reg int_next;
  reg state;
  wire [31:0] t0;
  reg [31:0] s0;
  wire [31:0] t1;
  reg [31:0] s1;
  wire [31:0] t2;
  reg [31:0] s2;
  wire [31:0] t3;
  reg [31:0] s3;
  wire [31:0] t4;
  reg [31:0] s4;
  wire [31:0] t5;
  reg [31:0] s5;
  wire [31:0] t6;
  reg [31:0] s6;
  wire [31:0] t7;
  reg [31:0] s7;
  wire [31:0] t8;
  reg [31:0] s8;
  wire [31:0] t9;
  reg [31:0] s9;
  wire [31:0] t10;
  reg [31:0] s10;
  wire [31:0] t11;
  reg [31:0] s11;
  wire [31:0] t12;
  reg [31:0] s12;
  wire [31:0] t13;
  reg [31:0] s13;
  wire [31:0] t14;
  reg [31:0] s14;
  wire [31:0] t15;
  reg [31:0] s15;

  reg [1:0] iri_state;
  wire int_next_out;
  reg [1:0] i1;

  statementList47529 instList48729 (
      .clk(clk),
      .reset(reset),
      .next(int_next),
      .next_out(int_next_out),
      .i1_in(i1),
      .X0(s0),
      .Y0(t0),
      .X1(s1),
      .Y1(t1),
      .X2(s2),
      .Y2(t2),
      .X3(s3),
      .Y3(t3),
      .X4(s4),
      .Y4(t4),
      .X5(s5),
      .Y5(t5),
      .X6(s6),
      .Y6(t6),
      .X7(s7),
      .Y7(t7),
      .X8(s8),
      .Y8(t8),
      .X9(s9),
      .Y9(t9),
      .X10(s10),
      .Y10(t10),
      .X11(s11),
      .Y11(t11),
      .X12(s12),
      .Y12(t12),
      .X13(s13),
      .Y13(t13),
      .X14(s14),
      .Y14(t14),
      .X15(s15),
      .Y15(t15)
  );

  always @(posedge clk) begin
    if (reset == 1) begin
      int_next <= 0;
      i1 <= 1;
      cycle_count <= 0;
      next_out <= 0;
      iri_state <= 0;
      Y0 <= 0;
      Y1 <= 0;
      Y2 <= 0;
      Y3 <= 0;
      Y4 <= 0;
      Y5 <= 0;
      Y6 <= 0;
      Y7 <= 0;
      Y8 <= 0;
      Y9 <= 0;
      Y10 <= 0;
      Y11 <= 0;
      Y12 <= 0;
      Y13 <= 0;
      Y14 <= 0;
      Y15 <= 0;
    end else begin
      Y0 <= t0;
      Y1 <= t1;
      Y2 <= t2;
      Y3 <= t3;
      Y4 <= t4;
      Y5 <= t5;
      Y6 <= t6;
      Y7 <= t7;
      Y8 <= t8;
      Y9 <= t9;
      Y10 <= t10;
      Y11 <= t11;
      Y12 <= t12;
      Y13 <= t13;
      Y14 <= t14;
      Y15 <= t15;
      next_out <= 0;
      case (iri_state)
        0: begin
          i1 <= 1;
          cycle_count <= 0;
          if (next == 1) begin
            int_next  <= 1;
            iri_state <= 1;

          end else begin
            int_next  <= 0;
            iri_state <= 0;
          end
        end
        1: begin
          int_next <= 0;
          cycle_count <= cycle_count + 1;
          i1 <= i1;
          if (cycle_count < 53) iri_state <= 1;
          else iri_state <= 2;
        end
        2: begin
          cycle_count <= 0;
          i1 <= i1 - 1;
          if (i1 > 0) begin
            iri_state <= 1;
            int_next  <= 1;
          end else begin
            iri_state <= 0;
            next_out  <= 1;
            int_next  <= 0;
          end
        end
      endcase
    end
  end

  always @(posedge clk) begin
    if (reset == 1) begin
      state <= 0;
      count <= 0;
      s0 <= 0;
      s1 <= 0;
      s2 <= 0;
      s3 <= 0;
      s4 <= 0;
      s5 <= 0;
      s6 <= 0;
      s7 <= 0;
      s8 <= 0;
      s9 <= 0;
      s10 <= 0;
      s11 <= 0;
      s12 <= 0;
      s13 <= 0;
      s14 <= 0;
      s15 <= 0;
    end else begin
      case (state)
        0: begin
          count <= 0;
          if (next == 1) begin
            state <= 1;
            count <= 0;
            s0 <= X0;
            s1 <= X1;
            s2 <= X2;
            s3 <= X3;
            s4 <= X4;
            s5 <= X5;
            s6 <= X6;
            s7 <= X7;
            s8 <= X8;
            s9 <= X9;
            s10 <= X10;
            s11 <= X11;
            s12 <= X12;
            s13 <= X13;
            s14 <= X14;
            s15 <= X15;
          end else begin
            state <= 0;
            count <= 0;
            s0 <= t0;
            s1 <= t1;
            s2 <= t2;
            s3 <= t3;
            s4 <= t4;
            s5 <= t5;
            s6 <= t6;
            s7 <= t7;
            s8 <= t8;
            s9 <= t9;
            s10 <= t10;
            s11 <= t11;
            s12 <= t12;
            s13 <= t13;
            s14 <= t14;
            s15 <= t15;
          end
        end
        1: begin
          count <= count + 1;
          if (count < 2) begin
            s0 <= X0;
            s1 <= X1;
            s2 <= X2;
            s3 <= X3;
            s4 <= X4;
            s5 <= X5;
            s6 <= X6;
            s7 <= X7;
            s8 <= X8;
            s9 <= X9;
            s10 <= X10;
            s11 <= X11;
            s12 <= X12;
            s13 <= X13;
            s14 <= X14;
            s15 <= X15;
            state <= 1;
          end else begin
            s0 <= t0;
            s1 <= t1;
            s2 <= t2;
            s3 <= t3;
            s4 <= t4;
            s5 <= t5;
            s6 <= t6;
            s7 <= t7;
            s8 <= t8;
            s9 <= t9;
            s10 <= t10;
            s11 <= t11;
            s12 <= t12;
            s13 <= t13;
            s14 <= t14;
            s15 <= t15;
            state <= 0;
          end
        end
      endcase
    end
  end
endmodule

// Latency: 54
// Gap: 2
// module_name_is:statementList47529
module statementList47529 (
    clk,
    reset,
    next,
    next_out,
    i1_in,
    X0,
    Y0,
    X1,
    Y1,
    X2,
    Y2,
    X3,
    Y3,
    X4,
    Y4,
    X5,
    Y5,
    X6,
    Y6,
    X7,
    Y7,
    X8,
    Y8,
    X9,
    Y9,
    X10,
    Y10,
    X11,
    Y11,
    X12,
    Y12,
    X13,
    Y13,
    X14,
    Y14,
    X15,
    Y15
);

  output next_out;
  input clk, reset, next;

  input [1:0] i1_in;
  input [31:0] X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15;

  output [31:0] Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y8, Y9, Y10, Y11, Y12, Y13, Y14, Y15;

  wire [31:0] t0_0;
  wire [31:0] t0_1;
  wire [31:0] t0_2;
  wire [31:0] t0_3;
  wire [31:0] t0_4;
  wire [31:0] t0_5;
  wire [31:0] t0_6;
  wire [31:0] t0_7;
  wire [31:0] t0_8;
  wire [31:0] t0_9;
  wire [31:0] t0_10;
  wire [31:0] t0_11;
  wire [31:0] t0_12;
  wire [31:0] t0_13;
  wire [31:0] t0_14;
  wire [31:0] t0_15;
  wire next_0;
  wire [31:0] t1_0;
  wire [31:0] t1_1;
  wire [31:0] t1_2;
  wire [31:0] t1_3;
  wire [31:0] t1_4;
  wire [31:0] t1_5;
  wire [31:0] t1_6;
  wire [31:0] t1_7;
  wire [31:0] t1_8;
  wire [31:0] t1_9;
  wire [31:0] t1_10;
  wire [31:0] t1_11;
  wire [31:0] t1_12;
  wire [31:0] t1_13;
  wire [31:0] t1_14;
  wire [31:0] t1_15;
  wire next_1;
  wire [31:0] t2_0;
  wire [31:0] t2_1;
  wire [31:0] t2_2;
  wire [31:0] t2_3;
  wire [31:0] t2_4;
  wire [31:0] t2_5;
  wire [31:0] t2_6;
  wire [31:0] t2_7;
  wire [31:0] t2_8;
  wire [31:0] t2_9;
  wire [31:0] t2_10;
  wire [31:0] t2_11;
  wire [31:0] t2_12;
  wire [31:0] t2_13;
  wire [31:0] t2_14;
  wire [31:0] t2_15;
  wire next_2;
  wire [31:0] t3_0;
  wire [31:0] t3_1;
  wire [31:0] t3_2;
  wire [31:0] t3_3;
  wire [31:0] t3_4;
  wire [31:0] t3_5;
  wire [31:0] t3_6;
  wire [31:0] t3_7;
  wire [31:0] t3_8;
  wire [31:0] t3_9;
  wire [31:0] t3_10;
  wire [31:0] t3_11;
  wire [31:0] t3_12;
  wire [31:0] t3_13;
  wire [31:0] t3_14;
  wire [31:0] t3_15;
  wire next_3;
  wire [1:0] i1;
  wire [1:0] i1_0;
  assign t0_0 = X0;
  assign Y0 = t3_0;
  assign t0_1 = X1;
  assign Y1 = t3_1;
  assign t0_2 = X2;
  assign Y2 = t3_2;
  assign t0_3 = X3;
  assign Y3 = t3_3;
  assign t0_4 = X4;
  assign Y4 = t3_4;
  assign t0_5 = X5;
  assign Y5 = t3_5;
  assign t0_6 = X6;
  assign Y6 = t3_6;
  assign t0_7 = X7;
  assign Y7 = t3_7;
  assign t0_8 = X8;
  assign Y8 = t3_8;
  assign t0_9 = X9;
  assign Y9 = t3_9;
  assign t0_10 = X10;
  assign Y10 = t3_10;
  assign t0_11 = X11;
  assign Y11 = t3_11;
  assign t0_12 = X12;
  assign Y12 = t3_12;
  assign t0_13 = X13;
  assign Y13 = t3_13;
  assign t0_14 = X14;
  assign Y14 = t3_14;
  assign t0_15 = X15;
  assign Y15 = t3_15;
  assign next_0 = next;
  assign next_out = next_3;

  assign i1_0 = i1_in;

  // latency=27, gap=2
  DirSum_47104 DirSumInst48732 (
      .next(next_0),
      .clk(clk),
      .reset(reset),
      .next_out(next_1),
      .i1(i1_0),
      .X0(t0_0),
      .Y0(t1_0),
      .X1(t0_1),
      .Y1(t1_1),
      .X2(t0_2),
      .Y2(t1_2),
      .X3(t0_3),
      .Y3(t1_3),
      .X4(t0_4),
      .Y4(t1_4),
      .X5(t0_5),
      .Y5(t1_5),
      .X6(t0_6),
      .Y6(t1_6),
      .X7(t0_7),
      .Y7(t1_7),
      .X8(t0_8),
      .Y8(t1_8),
      .X9(t0_9),
      .Y9(t1_9),
      .X10(t0_10),
      .Y10(t1_10),
      .X11(t0_11),
      .Y11(t1_11),
      .X12(t0_12),
      .Y12(t1_12),
      .X13(t0_13),
      .Y13(t1_13),
      .X14(t0_14),
      .Y14(t1_14),
      .X15(t0_15),
      .Y15(t1_15)
  );


  // latency=23, gap=2
  codeBlock47106 codeBlockIsnt48733 (
      .clk(clk),
      .reset(reset),
      .next_in(next_1),
      .next_out(next_2),
      .X0_in(t1_0),
      .Y0(t2_0),
      .X1_in(t1_1),
      .Y1(t2_1),
      .X2_in(t1_2),
      .Y2(t2_2),
      .X3_in(t1_3),
      .Y3(t2_3),
      .X4_in(t1_4),
      .Y4(t2_4),
      .X5_in(t1_5),
      .Y5(t2_5),
      .X6_in(t1_6),
      .Y6(t2_6),
      .X7_in(t1_7),
      .Y7(t2_7),
      .X8_in(t1_8),
      .Y8(t2_8),
      .X9_in(t1_9),
      .Y9(t2_9),
      .X10_in(t1_10),
      .Y10(t2_10),
      .X11_in(t1_11),
      .Y11(t2_11),
      .X12_in(t1_12),
      .Y12(t2_12),
      .X13_in(t1_13),
      .Y13(t2_13),
      .X14_in(t1_14),
      .Y14(t2_14),
      .X15_in(t1_15),
      .Y15(t2_15)
  );


  // latency=4, gap=2
  rc47527 instrc48734 (
      .clk(clk),
      .reset(reset),
      .next(next_2),
      .next_out(next_3),
      .X0(t2_0),
      .Y0(t3_0),
      .X1(t2_1),
      .Y1(t3_1),
      .X2(t2_2),
      .Y2(t3_2),
      .X3(t2_3),
      .Y3(t3_3),
      .X4(t2_4),
      .Y4(t3_4),
      .X5(t2_5),
      .Y5(t3_5),
      .X6(t2_6),
      .Y6(t3_6),
      .X7(t2_7),
      .Y7(t3_7),
      .X8(t2_8),
      .Y8(t3_8),
      .X9(t2_9),
      .Y9(t3_9),
      .X10(t2_10),
      .Y10(t3_10),
      .X11(t2_11),
      .Y11(t3_11),
      .X12(t2_12),
      .Y12(t3_12),
      .X13(t2_13),
      .Y13(t3_13),
      .X14(t2_14),
      .Y14(t3_14),
      .X15(t2_15),
      .Y15(t3_15)
  );


endmodule

// Latency: 27
// Gap: 2
module DirSum_47104 (
    clk,
    reset,
    next,
    next_out,
    i1,
    X0,
    Y0,
    X1,
    Y1,
    X2,
    Y2,
    X3,
    Y3,
    X4,
    Y4,
    X5,
    Y5,
    X6,
    Y6,
    X7,
    Y7,
    X8,
    Y8,
    X9,
    Y9,
    X10,
    Y10,
    X11,
    Y11,
    X12,
    Y12,
    X13,
    Y13,
    X14,
    Y14,
    X15,
    Y15
);

  output next_out;
  input clk, reset, next;

  input [1:0] i1;
  reg [0:0] i2;

  input [31:0] X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15;

  output [31:0] Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y8, Y9, Y10, Y11, Y12, Y13, Y14, Y15;

  always @(posedge clk) begin
    if (reset == 1) begin
      i2 <= 0;
    end else begin
      if (next == 1) i2 <= 0;
      else if (i2 == 1) i2 <= 0;
      else i2 <= i2 + 1;
    end
  end

  codeBlock46382 codeBlockIsnt48735 (
      .clk(clk),
      .reset(reset),
      .next_in(next),
      .next_out(next_out),
      .i2_in(i2),
      .i1_in(i1),
      .X0_in(X0),
      .Y0(Y0),
      .X1_in(X1),
      .Y1(Y1),
      .X2_in(X2),
      .Y2(Y2),
      .X3_in(X3),
      .Y3(Y3),
      .X4_in(X4),
      .Y4(Y4),
      .X5_in(X5),
      .Y5(Y5),
      .X6_in(X6),
      .Y6(Y6),
      .X7_in(X7),
      .Y7(Y7),
      .X8_in(X8),
      .Y8(Y8),
      .X9_in(X9),
      .Y9(Y9),
      .X10_in(X10),
      .Y10(Y10),
      .X11_in(X11),
      .Y11(Y11),
      .X12_in(X12),
      .Y12(Y12),
      .X13_in(X13),
      .Y13(Y13),
      .X14_in(X14),
      .Y14(Y14),
      .X15_in(X15),
      .Y15(Y15)
  );

endmodule

module D4_47084 (
    addr,
    out,
    clk
);
  input clk;
  output [31:0] out;
  reg [31:0] out, out2, out3;
  input [3:0] addr;

  always @(posedge clk) begin
    out2 <= out3;
    out  <= out2;
    case (addr)
      0: out3 <= 32'h0;
      1: out3 <= 32'hbec3ef15;
      2: out3 <= 32'hbf3504f3;
      3: out3 <= 32'hbf6c835e;
      4: out3 <= 32'h0;
      5: out3 <= 32'hbf3504f3;
      6: out3 <= 32'hbf800000;
      7: out3 <= 32'hbf3504f3;
      8: out3 <= 32'h0;
      9: out3 <= 32'hbf6c835e;
      10: out3 <= 32'hbf3504f3;
      11: out3 <= 32'h3ec3ef15;
      12: out3 <= 32'h0;
      13: out3 <= 32'hbf800000;
      14: out3 <= 32'h0;
      15: out3 <= 32'h3f800000;
      default: out3 <= 0;
    endcase
  end
  // synthesis attribute rom_style of out3 is "distributed"
endmodule



module D3_47102 (
    addr,
    out,
    clk
);
  input clk;
  output [31:0] out;
  reg [31:0] out, out2, out3;
  input [3:0] addr;

  always @(posedge clk) begin
    out2 <= out3;
    out  <= out2;
    case (addr)
      0: out3 <= 32'h3f800000;
      1: out3 <= 32'h3f6c835e;
      2: out3 <= 32'h3f3504f3;
      3: out3 <= 32'h3ec3ef15;
      4: out3 <= 32'h3f800000;
      5: out3 <= 32'h3f3504f3;
      6: out3 <= 32'h0;
      7: out3 <= 32'hbf3504f3;
      8: out3 <= 32'h3f800000;
      9: out3 <= 32'h3ec3ef15;
      10: out3 <= 32'hbf3504f3;
      11: out3 <= 32'hbf6c835e;
      12: out3 <= 32'h3f800000;
      13: out3 <= 32'h0;
      14: out3 <= 32'hbf800000;
      15: out3 <= 32'h0;
      default: out3 <= 0;
    endcase
  end
  // synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 27
// Gap: 1
module codeBlock46382 (
    clk,
    reset,
    next_in,
    next_out,
    i2_in,
    i1_in,
    X0_in,
    Y0,
    X1_in,
    Y1,
    X2_in,
    Y2,
    X3_in,
    Y3,
    X4_in,
    Y4,
    X5_in,
    Y5,
    X6_in,
    Y6,
    X7_in,
    Y7,
    X8_in,
    Y8,
    X9_in,
    Y9,
    X10_in,
    Y10,
    X11_in,
    Y11,
    X12_in,
    Y12,
    X13_in,
    Y13,
    X14_in,
    Y14,
    X15_in,
    Y15
);

  output next_out;
  input clk, reset, next_in;

  reg next;
  input [0:0] i2_in;
  reg [0:0] i2;
  input [1:0] i1_in;
  reg [1:0] i1;

  input [31:0] X0_in,
     X1_in,
     X2_in,
     X3_in,
     X4_in,
     X5_in,
     X6_in,
     X7_in,
     X8_in,
     X9_in,
     X10_in,
     X11_in,
     X12_in,
     X13_in,
     X14_in,
     X15_in;

  reg [31:0] X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15;

  output [31:0] Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y8, Y9, Y10, Y11, Y12, Y13, Y14, Y15;

  shiftRegFIFO #(26, 1) shiftFIFO_48738 (
      .X  (next),
      .Y  (next_out),
      .clk(clk)
  );


  wire [3:0] a329;
  wire [2:0] a331;
  wire [1:0] a332;
  wire [3:0] a333;
  wire signed [31:0] a394;
  wire signed [31:0] a395;
  wire signed [31:0] a398;
  wire signed [31:0] a399;
  wire signed [31:0] a402;
  wire signed [31:0] a403;
  wire signed [31:0] a406;
  wire signed [31:0] a407;
  wire signed [31:0] a410;
  wire signed [31:0] a411;
  wire signed [31:0] a414;
  wire signed [31:0] a415;
  wire [4:0] a330;
  wire [4:0] a343;
  wire [4:0] a353;
  wire [4:0] a363;
  wire [4:0] a373;
  wire [4:0] a383;
  reg [3:0] tm52;
  reg signed [31:0] tm53;
  reg signed [31:0] tm60;
  reg signed [31:0] tm82;
  reg signed [31:0] tm89;
  reg signed [31:0] tm111;
  reg signed [31:0] tm118;
  reg signed [31:0] tm140;
  reg signed [31:0] tm147;
  reg signed [31:0] tm169;
  reg signed [31:0] tm176;
  reg signed [31:0] tm198;
  reg signed [31:0] tm205;
  reg signed [31:0] tm226;
  reg signed [31:0] tm252;
  reg signed [31:0] tm278;
  reg signed [31:0] tm304;
  reg [4:0] a334;
  wire [3:0] a335;
  reg [4:0] a344;
  wire [3:0] a345;
  reg [4:0] a354;
  wire [3:0] a355;
  reg [4:0] a364;
  wire [3:0] a365;
  reg [4:0] a374;
  wire [3:0] a375;
  reg [4:0] a384;
  wire [3:0] a385;
  reg signed [31:0] tm54;
  reg signed [31:0] tm61;
  reg signed [31:0] tm83;
  reg signed [31:0] tm90;
  reg signed [31:0] tm112;
  reg signed [31:0] tm119;
  reg signed [31:0] tm141;
  reg signed [31:0] tm148;
  reg signed [31:0] tm170;
  reg signed [31:0] tm177;
  reg signed [31:0] tm199;
  reg signed [31:0] tm206;
  reg signed [31:0] tm227;
  reg signed [31:0] tm253;
  reg signed [31:0] tm279;
  reg signed [31:0] tm305;
  wire [4:0] a336;
  wire [4:0] a346;
  wire [4:0] a356;
  wire [4:0] a366;
  wire [4:0] a376;
  wire [4:0] a387;
  reg signed [31:0] tm55;
  reg signed [31:0] tm62;
  reg signed [31:0] tm84;
  reg signed [31:0] tm91;
  reg signed [31:0] tm113;
  reg signed [31:0] tm120;
  reg signed [31:0] tm142;
  reg signed [31:0] tm149;
  reg signed [31:0] tm171;
  reg signed [31:0] tm178;
  reg signed [31:0] tm200;
  reg signed [31:0] tm207;
  reg signed [31:0] tm228;
  reg signed [31:0] tm254;
  reg signed [31:0] tm280;
  reg signed [31:0] tm306;
  reg signed [31:0] tm56;
  reg signed [31:0] tm63;
  reg signed [31:0] tm85;
  reg signed [31:0] tm92;
  reg signed [31:0] tm114;
  reg signed [31:0] tm121;
  reg signed [31:0] tm143;
  reg signed [31:0] tm150;
  reg signed [31:0] tm172;
  reg signed [31:0] tm179;
  reg signed [31:0] tm201;
  reg signed [31:0] tm208;
  reg signed [31:0] tm229;
  reg signed [31:0] tm255;
  reg signed [31:0] tm281;
  reg signed [31:0] tm307;
  reg signed [31:0] tm57;
  reg signed [31:0] tm64;
  reg signed [31:0] tm86;
  reg signed [31:0] tm93;
  reg signed [31:0] tm115;
  reg signed [31:0] tm122;
  reg signed [31:0] tm144;
  reg signed [31:0] tm151;
  reg signed [31:0] tm173;
  reg signed [31:0] tm180;
  reg signed [31:0] tm202;
  reg signed [31:0] tm209;
  reg signed [31:0] tm230;
  reg signed [31:0] tm256;
  reg signed [31:0] tm282;
  reg signed [31:0] tm308;
  wire signed [31:0] tm6;
  wire signed [31:0] a337;
  wire signed [31:0] tm7;
  wire signed [31:0] a339;
  wire signed [31:0] tm10;
  wire signed [31:0] a347;
  wire signed [31:0] tm11;
  wire signed [31:0] a349;
  wire signed [31:0] tm14;
  wire signed [31:0] a357;
  wire signed [31:0] tm15;
  wire signed [31:0] a359;
  wire signed [31:0] tm18;
  wire signed [31:0] a367;
  wire signed [31:0] tm19;
  wire signed [31:0] a369;
  wire signed [31:0] tm22;
  wire signed [31:0] a377;
  wire signed [31:0] tm23;
  wire signed [31:0] a379;
  wire signed [31:0] tm26;
  wire signed [31:0] a388;
  wire signed [31:0] tm27;
  wire signed [31:0] a390;
  reg signed [31:0] tm58;
  reg signed [31:0] tm65;
  reg signed [31:0] tm87;
  reg signed [31:0] tm94;
  reg signed [31:0] tm116;
  reg signed [31:0] tm123;
  reg signed [31:0] tm145;
  reg signed [31:0] tm152;
  reg signed [31:0] tm174;
  reg signed [31:0] tm181;
  reg signed [31:0] tm203;
  reg signed [31:0] tm210;
  reg signed [31:0] tm231;
  reg signed [31:0] tm257;
  reg signed [31:0] tm283;
  reg signed [31:0] tm309;
  reg signed [31:0] tm28;
  reg signed [31:0] tm29;
  reg signed [31:0] tm32;
  reg signed [31:0] tm33;
  reg signed [31:0] tm36;
  reg signed [31:0] tm37;
  reg signed [31:0] tm40;
  reg signed [31:0] tm41;
  reg signed [31:0] tm44;
  reg signed [31:0] tm45;
  reg signed [31:0] tm48;
  reg signed [31:0] tm49;
  reg signed [31:0] tm59;
  reg signed [31:0] tm66;
  reg signed [31:0] tm88;
  reg signed [31:0] tm95;
  reg signed [31:0] tm117;
  reg signed [31:0] tm124;
  reg signed [31:0] tm146;
  reg signed [31:0] tm153;
  reg signed [31:0] tm175;
  reg signed [31:0] tm182;
  reg signed [31:0] tm204;
  reg signed [31:0] tm211;
  reg signed [31:0] tm232;
  reg signed [31:0] tm258;
  reg signed [31:0] tm284;
  reg signed [31:0] tm310;
  reg signed [31:0] tm233;
  reg signed [31:0] tm259;
  reg signed [31:0] tm285;
  reg signed [31:0] tm311;
  reg signed [31:0] tm234;
  reg signed [31:0] tm260;
  reg signed [31:0] tm286;
  reg signed [31:0] tm312;
  reg signed [31:0] tm235;
  reg signed [31:0] tm261;
  reg signed [31:0] tm287;
  reg signed [31:0] tm313;
  reg signed [31:0] tm236;
  reg signed [31:0] tm262;
  reg signed [31:0] tm288;
  reg signed [31:0] tm314;
  reg signed [31:0] tm237;
  reg signed [31:0] tm263;
  reg signed [31:0] tm289;
  reg signed [31:0] tm315;
  reg signed [31:0] tm238;
  reg signed [31:0] tm264;
  reg signed [31:0] tm290;
  reg signed [31:0] tm316;
  reg signed [31:0] tm239;
  reg signed [31:0] tm265;
  reg signed [31:0] tm291;
  reg signed [31:0] tm317;
  wire [31:0] a338;
  wire [31:0] a340;
  wire [31:0] a341;
  wire [31:0] a342;
  wire [31:0] a348;
  wire [31:0] a350;
  wire [31:0] a351;
  wire [31:0] a352;
  wire [31:0] a358;
  wire [31:0] a360;
  wire [31:0] a361;
  wire [31:0] a362;
  wire [31:0] a368;
  wire [31:0] a370;
  wire [31:0] a371;
  wire [31:0] a372;
  wire [31:0] a378;
  wire [31:0] a380;
  wire [31:0] a381;
  wire [31:0] a382;
  wire [31:0] a389;
  wire [31:0] a391;
  wire [31:0] a392;
  wire [31:0] a393;
  reg signed [31:0] tm240;
  reg signed [31:0] tm266;
  reg signed [31:0] tm292;
  reg signed [31:0] tm318;
  reg signed [31:0] tm241;
  reg signed [31:0] tm267;
  reg signed [31:0] tm293;
  reg signed [31:0] tm319;
  reg signed [31:0] tm242;
  reg signed [31:0] tm268;
  reg signed [31:0] tm294;
  reg signed [31:0] tm320;
  reg signed [31:0] tm243;
  reg signed [31:0] tm269;
  reg signed [31:0] tm295;
  reg signed [31:0] tm321;
  reg signed [31:0] tm244;
  reg signed [31:0] tm270;
  reg signed [31:0] tm296;
  reg signed [31:0] tm322;
  reg signed [31:0] tm245;
  reg signed [31:0] tm271;
  reg signed [31:0] tm297;
  reg signed [31:0] tm323;
  reg signed [31:0] tm246;
  reg signed [31:0] tm272;
  reg signed [31:0] tm298;
  reg signed [31:0] tm324;
  reg signed [31:0] tm247;
  reg signed [31:0] tm273;
  reg signed [31:0] tm299;
  reg signed [31:0] tm325;
  reg signed [31:0] tm248;
  reg signed [31:0] tm274;
  reg signed [31:0] tm300;
  reg signed [31:0] tm326;
  reg signed [31:0] tm249;
  reg signed [31:0] tm275;
  reg signed [31:0] tm301;
  reg signed [31:0] tm327;
  reg signed [31:0] tm250;
  reg signed [31:0] tm276;
  reg signed [31:0] tm302;
  reg signed [31:0] tm328;
  wire signed [31:0] Y0;
  wire signed [31:0] Y1;
  wire [31:0] Y2;
  wire [31:0] Y3;
  wire [31:0] Y4;
  wire [31:0] Y5;
  wire [31:0] Y6;
  wire [31:0] Y7;
  wire signed [31:0] Y8;
  wire signed [31:0] Y9;
  wire [31:0] Y10;
  wire [31:0] Y11;
  wire [31:0] Y12;
  wire [31:0] Y13;
  wire [31:0] Y14;
  wire [31:0] Y15;
  reg signed [31:0] tm251;
  reg signed [31:0] tm277;
  reg signed [31:0] tm303;
  reg signed [31:0] tm329;

  wire [0:0] tm1;
  assign tm1 = 1'h1;
  wire [1:0] tm3;
  assign tm3 = 2'h3;
  wire [2:0] tm5;
  assign tm5 = 3'h4;
  wire [1:0] tm8;
  assign tm8 = 2'h2;
  wire [2:0] tm16;
  assign tm16 = 3'h5;
  wire [2:0] tm20;
  assign tm20 = 3'h6;
  wire [2:0] tm24;
  assign tm24 = 3'h7;

  assign a329 = i2 << 3;
  assign a331 = i1 << 1;
  assign a332 = tm3 << a331;
  assign a333 = {a332, tm3[1:0]};
  assign a394 = X2;
  assign a395 = X3;
  assign a398 = X4;
  assign a399 = X5;
  assign a402 = X6;
  assign a403 = X7;
  assign a406 = X10;
  assign a407 = X11;
  assign a410 = X12;
  assign a411 = X13;
  assign a414 = X14;
  assign a415 = X15;
  assign a335 = {a334[1:0], a334[3:2]};
  assign a345 = {a344[1:0], a344[3:2]};
  assign a355 = {a354[1:0], a354[3:2]};
  assign a365 = {a364[1:0], a364[3:2]};
  assign a375 = {a374[1:0], a374[3:2]};
  assign a385 = {a384[1:0], a384[3:2]};
  assign a337 = tm6;
  assign a339 = tm7;
  assign a347 = tm10;
  assign a349 = tm11;
  assign a357 = tm14;
  assign a359 = tm15;
  assign a367 = tm18;
  assign a369 = tm19;
  assign a377 = tm22;
  assign a379 = tm23;
  assign a388 = tm26;
  assign a390 = tm27;
  assign Y0   = tm251;
  assign Y1   = tm277;
  assign Y8   = tm303;
  assign Y9   = tm329;

  D4_47084 instD4inst0_47084 (
      .addr(a336[3:0]),
      .out (tm7),
      .clk (clk)
  );

  D4_47084 instD4inst1_47084 (
      .addr(a346[3:0]),
      .out (tm11),
      .clk (clk)
  );

  D4_47084 instD4inst2_47084 (
      .addr(a356[3:0]),
      .out (tm15),
      .clk (clk)
  );

  D4_47084 instD4inst3_47084 (
      .addr(a366[3:0]),
      .out (tm19),
      .clk (clk)
  );

  D4_47084 instD4inst4_47084 (
      .addr(a376[3:0]),
      .out (tm23),
      .clk (clk)
  );

  D4_47084 instD4inst5_47084 (
      .addr(a387[3:0]),
      .out (tm27),
      .clk (clk)
  );

  D3_47102 instD3inst0_47102 (
      .addr(a336[3:0]),
      .out (tm6),
      .clk (clk)
  );

  D3_47102 instD3inst1_47102 (
      .addr(a346[3:0]),
      .out (tm10),
      .clk (clk)
  );

  D3_47102 instD3inst2_47102 (
      .addr(a356[3:0]),
      .out (tm14),
      .clk (clk)
  );

  D3_47102 instD3inst3_47102 (
      .addr(a366[3:0]),
      .out (tm18),
      .clk (clk)
  );

  D3_47102 instD3inst4_47102 (
      .addr(a376[3:0]),
      .out (tm22),
      .clk (clk)
  );

  D3_47102 instD3inst5_47102 (
      .addr(a387[3:0]),
      .out (tm26),
      .clk (clk)
  );

  addfxp #(5, 1) add46401 (
      .a  ({1'b0, a329}),
      .b  ({4'b0, tm1}),
      .clk(clk),
      .q  (a330)
  );  // 0
  addfxp #(5, 1) add46527 (
      .a  ({1'b0, a329}),
      .b  ({3'b0, tm8}),
      .clk(clk),
      .q  (a343)
  );  // 0
  addfxp #(5, 1) add46634 (
      .a  ({1'b0, a329}),
      .b  ({3'b0, tm3}),
      .clk(clk),
      .q  (a353)
  );  // 0
  addfxp #(5, 1) add46749 (
      .a  ({1'b0, a329}),
      .b  ({2'b0, tm16}),
      .clk(clk),
      .q  (a363)
  );  // 0
  addfxp #(5, 1) add46856 (
      .a  ({1'b0, a329}),
      .b  ({2'b0, tm20}),
      .clk(clk),
      .q  (a373)
  );  // 0
  addfxp #(5, 1) add46963 (
      .a  ({1'b0, a329}),
      .b  ({2'b0, tm24}),
      .clk(clk),
      .q  (a383)
  );  // 0
  subfxp #(5, 1) sub46440 (
      .a  ({1'b0, a335}),
      .b  ({2'b0, tm5}),
      .clk(clk),
      .q  (a336)
  );  // 2
  subfxp #(5, 1) sub46547 (
      .a  ({1'b0, a345}),
      .b  ({2'b0, tm5}),
      .clk(clk),
      .q  (a346)
  );  // 2
  subfxp #(5, 1) sub46654 (
      .a  ({1'b0, a355}),
      .b  ({2'b0, tm5}),
      .clk(clk),
      .q  (a356)
  );  // 2
  subfxp #(5, 1) sub46769 (
      .a  ({1'b0, a365}),
      .b  ({2'b0, tm5}),
      .clk(clk),
      .q  (a366)
  );  // 2
  subfxp #(5, 1) sub46876 (
      .a  ({1'b0, a375}),
      .b  ({2'b0, tm5}),
      .clk(clk),
      .q  (a376)
  );  // 2
  subfxp #(5, 1) sub46983 (
      .a  ({1'b0, a385}),
      .b  ({2'b0, tm5}),
      .clk(clk),
      .q  (a387)
  );  // 2
  multfp32fp32 m46462 (
      .a(tm28),
      .b(tm59),
      .clk(clk),
      .out(a338),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46484 (
      .a(tm29),
      .b(tm66),
      .clk(clk),
      .out(a340),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46502 (
      .a(tm29),
      .b(tm59),
      .clk(clk),
      .out(a341),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46513 (
      .a(tm28),
      .b(tm66),
      .clk(clk),
      .out(a342),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46569 (
      .a(tm32),
      .b(tm88),
      .clk(clk),
      .out(a348),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46591 (
      .a(tm33),
      .b(tm95),
      .clk(clk),
      .out(a350),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46609 (
      .a(tm33),
      .b(tm88),
      .clk(clk),
      .out(a351),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46620 (
      .a(tm32),
      .b(tm95),
      .clk(clk),
      .out(a352),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46676 (
      .a(tm36),
      .b(tm117),
      .clk(clk),
      .out(a358),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46698 (
      .a(tm37),
      .b(tm124),
      .clk(clk),
      .out(a360),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46716 (
      .a(tm37),
      .b(tm117),
      .clk(clk),
      .out(a361),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46727 (
      .a(tm36),
      .b(tm124),
      .clk(clk),
      .out(a362),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46791 (
      .a(tm40),
      .b(tm146),
      .clk(clk),
      .out(a368),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46813 (
      .a(tm41),
      .b(tm153),
      .clk(clk),
      .out(a370),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46831 (
      .a(tm41),
      .b(tm146),
      .clk(clk),
      .out(a371),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46842 (
      .a(tm40),
      .b(tm153),
      .clk(clk),
      .out(a372),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46898 (
      .a(tm44),
      .b(tm175),
      .clk(clk),
      .out(a378),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46920 (
      .a(tm45),
      .b(tm182),
      .clk(clk),
      .out(a380),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46938 (
      .a(tm45),
      .b(tm175),
      .clk(clk),
      .out(a381),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m46949 (
      .a(tm44),
      .b(tm182),
      .clk(clk),
      .out(a382),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m47005 (
      .a(tm48),
      .b(tm204),
      .clk(clk),
      .out(a389),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m47027 (
      .a(tm49),
      .b(tm211),
      .clk(clk),
      .out(a391),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m47045 (
      .a(tm49),
      .b(tm204),
      .clk(clk),
      .out(a392),
      .enable(1'b1),
      .rst(reset)
  );
  multfp32fp32 m47056 (
      .a(tm48),
      .b(tm211),
      .clk(clk),
      .out(a393),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub46491 (
      .a(a338),
      .b(a340),
      .clk(clk),
      .out(Y2),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add46520 (
      .a(a341),
      .b(a342),
      .clk(clk),
      .out(Y3),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub46598 (
      .a(a348),
      .b(a350),
      .clk(clk),
      .out(Y4),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add46627 (
      .a(a351),
      .b(a352),
      .clk(clk),
      .out(Y5),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub46705 (
      .a(a358),
      .b(a360),
      .clk(clk),
      .out(Y6),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add46734 (
      .a(a361),
      .b(a362),
      .clk(clk),
      .out(Y7),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub46820 (
      .a(a368),
      .b(a370),
      .clk(clk),
      .out(Y10),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add46849 (
      .a(a371),
      .b(a372),
      .clk(clk),
      .out(Y11),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub46927 (
      .a(a378),
      .b(a380),
      .clk(clk),
      .out(Y12),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add46956 (
      .a(a381),
      .b(a382),
      .clk(clk),
      .out(Y13),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub47034 (
      .a(a389),
      .b(a391),
      .clk(clk),
      .out(Y14),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add47063 (
      .a(a392),
      .b(a393),
      .clk(clk),
      .out(Y15),
      .enable(1'b1),
      .rst(reset)
  );


  always @(posedge clk) begin
    if (reset == 1) begin
      tm28  <= 0;
      tm59  <= 0;
      tm29  <= 0;
      tm66  <= 0;
      tm29  <= 0;
      tm59  <= 0;
      tm28  <= 0;
      tm66  <= 0;
      tm32  <= 0;
      tm88  <= 0;
      tm33  <= 0;
      tm95  <= 0;
      tm33  <= 0;
      tm88  <= 0;
      tm32  <= 0;
      tm95  <= 0;
      tm36  <= 0;
      tm117 <= 0;
      tm37  <= 0;
      tm124 <= 0;
      tm37  <= 0;
      tm117 <= 0;
      tm36  <= 0;
      tm124 <= 0;
      tm40  <= 0;
      tm146 <= 0;
      tm41  <= 0;
      tm153 <= 0;
      tm41  <= 0;
      tm146 <= 0;
      tm40  <= 0;
      tm153 <= 0;
      tm44  <= 0;
      tm175 <= 0;
      tm45  <= 0;
      tm182 <= 0;
      tm45  <= 0;
      tm175 <= 0;
      tm44  <= 0;
      tm182 <= 0;
      tm48  <= 0;
      tm204 <= 0;
      tm49  <= 0;
      tm211 <= 0;
      tm49  <= 0;
      tm204 <= 0;
      tm48  <= 0;
      tm211 <= 0;
    end else begin
      i2 <= i2_in;
      i1 <= i1_in;
      X0 <= X0_in;
      X1 <= X1_in;
      X2 <= X2_in;
      X3 <= X3_in;
      X4 <= X4_in;
      X5 <= X5_in;
      X6 <= X6_in;
      X7 <= X7_in;
      X8 <= X8_in;
      X9 <= X9_in;
      X10 <= X10_in;
      X11 <= X11_in;
      X12 <= X12_in;
      X13 <= X13_in;
      X14 <= X14_in;
      X15 <= X15_in;
      next <= next_in;
      tm52 <= a333;
      tm53 <= a394;
      tm60 <= a395;
      tm82 <= a398;
      tm89 <= a399;
      tm111 <= a402;
      tm118 <= a403;
      tm140 <= a406;
      tm147 <= a407;
      tm169 <= a410;
      tm176 <= a411;
      tm198 <= a414;
      tm205 <= a415;
      tm226 <= X0;
      tm252 <= X1;
      tm278 <= X8;
      tm304 <= X9;
      a334 <= (a330 & tm52);
      a344 <= (a343 & tm52);
      a354 <= (a353 & tm52);
      a364 <= (a363 & tm52);
      a374 <= (a373 & tm52);
      a384 <= (a383 & tm52);
      tm54 <= tm53;
      tm61 <= tm60;
      tm83 <= tm82;
      tm90 <= tm89;
      tm112 <= tm111;
      tm119 <= tm118;
      tm141 <= tm140;
      tm148 <= tm147;
      tm170 <= tm169;
      tm177 <= tm176;
      tm199 <= tm198;
      tm206 <= tm205;
      tm227 <= tm226;
      tm253 <= tm252;
      tm279 <= tm278;
      tm305 <= tm304;
      tm55 <= tm54;
      tm62 <= tm61;
      tm84 <= tm83;
      tm91 <= tm90;
      tm113 <= tm112;
      tm120 <= tm119;
      tm142 <= tm141;
      tm149 <= tm148;
      tm171 <= tm170;
      tm178 <= tm177;
      tm200 <= tm199;
      tm207 <= tm206;
      tm228 <= tm227;
      tm254 <= tm253;
      tm280 <= tm279;
      tm306 <= tm305;
      tm56 <= tm55;
      tm63 <= tm62;
      tm85 <= tm84;
      tm92 <= tm91;
      tm114 <= tm113;
      tm121 <= tm120;
      tm143 <= tm142;
      tm150 <= tm149;
      tm172 <= tm171;
      tm179 <= tm178;
      tm201 <= tm200;
      tm208 <= tm207;
      tm229 <= tm228;
      tm255 <= tm254;
      tm281 <= tm280;
      tm307 <= tm306;
      tm57 <= tm56;
      tm64 <= tm63;
      tm86 <= tm85;
      tm93 <= tm92;
      tm115 <= tm114;
      tm122 <= tm121;
      tm144 <= tm143;
      tm151 <= tm150;
      tm173 <= tm172;
      tm180 <= tm179;
      tm202 <= tm201;
      tm209 <= tm208;
      tm230 <= tm229;
      tm256 <= tm255;
      tm282 <= tm281;
      tm308 <= tm307;
      tm58 <= tm57;
      tm65 <= tm64;
      tm87 <= tm86;
      tm94 <= tm93;
      tm116 <= tm115;
      tm123 <= tm122;
      tm145 <= tm144;
      tm152 <= tm151;
      tm174 <= tm173;
      tm181 <= tm180;
      tm203 <= tm202;
      tm210 <= tm209;
      tm231 <= tm230;
      tm257 <= tm256;
      tm283 <= tm282;
      tm309 <= tm308;
      tm28 <= a337;
      tm29 <= a339;
      tm32 <= a347;
      tm33 <= a349;
      tm36 <= a357;
      tm37 <= a359;
      tm40 <= a367;
      tm41 <= a369;
      tm44 <= a377;
      tm45 <= a379;
      tm48 <= a388;
      tm49 <= a390;
      tm59 <= tm58;
      tm66 <= tm65;
      tm88 <= tm87;
      tm95 <= tm94;
      tm117 <= tm116;
      tm124 <= tm123;
      tm146 <= tm145;
      tm153 <= tm152;
      tm175 <= tm174;
      tm182 <= tm181;
      tm204 <= tm203;
      tm211 <= tm210;
      tm232 <= tm231;
      tm258 <= tm257;
      tm284 <= tm283;
      tm310 <= tm309;
      tm233 <= tm232;
      tm259 <= tm258;
      tm285 <= tm284;
      tm311 <= tm310;
      tm234 <= tm233;
      tm260 <= tm259;
      tm286 <= tm285;
      tm312 <= tm311;
      tm235 <= tm234;
      tm261 <= tm260;
      tm287 <= tm286;
      tm313 <= tm312;
      tm236 <= tm235;
      tm262 <= tm261;
      tm288 <= tm287;
      tm314 <= tm313;
      tm237 <= tm236;
      tm263 <= tm262;
      tm289 <= tm288;
      tm315 <= tm314;
      tm238 <= tm237;
      tm264 <= tm263;
      tm290 <= tm289;
      tm316 <= tm315;
      tm239 <= tm238;
      tm265 <= tm264;
      tm291 <= tm290;
      tm317 <= tm316;
      tm240 <= tm239;
      tm266 <= tm265;
      tm292 <= tm291;
      tm318 <= tm317;
      tm241 <= tm240;
      tm267 <= tm266;
      tm293 <= tm292;
      tm319 <= tm318;
      tm242 <= tm241;
      tm268 <= tm267;
      tm294 <= tm293;
      tm320 <= tm319;
      tm243 <= tm242;
      tm269 <= tm268;
      tm295 <= tm294;
      tm321 <= tm320;
      tm244 <= tm243;
      tm270 <= tm269;
      tm296 <= tm295;
      tm322 <= tm321;
      tm245 <= tm244;
      tm271 <= tm270;
      tm297 <= tm296;
      tm323 <= tm322;
      tm246 <= tm245;
      tm272 <= tm271;
      tm298 <= tm297;
      tm324 <= tm323;
      tm247 <= tm246;
      tm273 <= tm272;
      tm299 <= tm298;
      tm325 <= tm324;
      tm248 <= tm247;
      tm274 <= tm273;
      tm300 <= tm299;
      tm326 <= tm325;
      tm249 <= tm248;
      tm275 <= tm274;
      tm301 <= tm300;
      tm327 <= tm326;
      tm250 <= tm249;
      tm276 <= tm275;
      tm302 <= tm301;
      tm328 <= tm327;
      tm251 <= tm250;
      tm277 <= tm276;
      tm303 <= tm302;
      tm329 <= tm328;
    end
  end
endmodule

// Latency: 23
// Gap: 1
module codeBlock47106 (
    clk,
    reset,
    next_in,
    next_out,
    X0_in,
    Y0,
    X1_in,
    Y1,
    X2_in,
    Y2,
    X3_in,
    Y3,
    X4_in,
    Y4,
    X5_in,
    Y5,
    X6_in,
    Y6,
    X7_in,
    Y7,
    X8_in,
    Y8,
    X9_in,
    Y9,
    X10_in,
    Y10,
    X11_in,
    Y11,
    X12_in,
    Y12,
    X13_in,
    Y13,
    X14_in,
    Y14,
    X15_in,
    Y15
);

  output next_out;
  input clk, reset, next_in;

  reg next;

  input [31:0] X0_in,
     X1_in,
     X2_in,
     X3_in,
     X4_in,
     X5_in,
     X6_in,
     X7_in,
     X8_in,
     X9_in,
     X10_in,
     X11_in,
     X12_in,
     X13_in,
     X14_in,
     X15_in;

  reg [31:0] X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15;

  output [31:0] Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y8, Y9, Y10, Y11, Y12, Y13, Y14, Y15;

  shiftRegFIFO #(22, 1) shiftFIFO_48741 (
      .X  (next),
      .Y  (next_out),
      .clk(clk)
  );


  wire signed [31:0] a33;
  wire signed [31:0] a34;
  wire signed [31:0] a35;
  wire signed [31:0] a36;
  wire signed [31:0] a41;
  wire signed [31:0] a42;
  wire signed [31:0] a43;
  wire signed [31:0] a44;
  wire signed [31:0] a49;
  wire signed [31:0] a50;
  wire signed [31:0] a51;
  wire signed [31:0] a52;
  wire signed [31:0] a57;
  wire signed [31:0] a58;
  wire signed [31:0] a59;
  wire signed [31:0] a60;
  wire [31:0] t209;
  wire [31:0] t210;
  wire [31:0] t211;
  wire [31:0] t212;
  wire [31:0] t213;
  wire [31:0] t214;
  wire [31:0] t215;
  wire [31:0] t216;
  wire [31:0] t225;
  wire [31:0] t226;
  wire [31:0] t227;
  wire [31:0] t228;
  wire [31:0] t229;
  wire [31:0] t230;
  wire [31:0] t231;
  wire [31:0] t232;
  wire [31:0] t217;
  wire [31:0] t218;
  wire [31:0] t219;
  wire [31:0] t220;
  wire signed [31:0] Y0;
  wire signed [31:0] Y1;
  wire signed [31:0] Y4;
  wire signed [31:0] Y5;
  wire [31:0] t221;
  wire [31:0] t222;
  wire [31:0] t223;
  wire [31:0] t224;
  wire signed [31:0] Y2;
  wire signed [31:0] Y3;
  wire signed [31:0] Y6;
  wire signed [31:0] Y7;
  wire [31:0] t233;
  wire [31:0] t234;
  wire [31:0] t235;
  wire [31:0] t236;
  wire signed [31:0] Y8;
  wire signed [31:0] Y9;
  wire signed [31:0] Y12;
  wire signed [31:0] Y13;
  wire [31:0] t237;
  wire [31:0] t238;
  wire [31:0] t239;
  wire [31:0] t240;
  wire signed [31:0] Y10;
  wire signed [31:0] Y11;
  wire signed [31:0] Y14;
  wire signed [31:0] Y15;


  assign a33 = X0;
  assign a34 = X4;
  assign a35 = X1;
  assign a36 = X5;
  assign a41 = X2;
  assign a42 = X6;
  assign a43 = X3;
  assign a44 = X7;
  assign a49 = X8;
  assign a50 = X12;
  assign a51 = X9;
  assign a52 = X13;
  assign a57 = X10;
  assign a58 = X14;
  assign a59 = X11;
  assign a60 = X15;
  assign Y0  = t217;
  assign Y1  = t218;
  assign Y4  = t219;
  assign Y5  = t220;
  assign Y2  = t221;
  assign Y3  = t222;
  assign Y6  = t223;
  assign Y7  = t224;
  assign Y8  = t233;
  assign Y9  = t234;
  assign Y12 = t235;
  assign Y13 = t236;
  assign Y10 = t237;
  assign Y11 = t238;
  assign Y14 = t239;
  assign Y15 = t240;

  addfp32 add47118 (
      .a(a33),
      .b(a34),
      .clk(clk),
      .out(t209),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add47133 (
      .a(a35),
      .b(a36),
      .clk(clk),
      .out(t210),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub47148 (
      .a(a33),
      .b(a34),
      .clk(clk),
      .out(t211),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub47163 (
      .a(a35),
      .b(a36),
      .clk(clk),
      .out(t212),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add47178 (
      .a(a41),
      .b(a42),
      .clk(clk),
      .out(t213),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add47193 (
      .a(a43),
      .b(a44),
      .clk(clk),
      .out(t214),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub47208 (
      .a(a41),
      .b(a42),
      .clk(clk),
      .out(t215),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub47223 (
      .a(a43),
      .b(a44),
      .clk(clk),
      .out(t216),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add47326 (
      .a(a49),
      .b(a50),
      .clk(clk),
      .out(t225),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add47341 (
      .a(a51),
      .b(a52),
      .clk(clk),
      .out(t226),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub47356 (
      .a(a49),
      .b(a50),
      .clk(clk),
      .out(t227),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub47371 (
      .a(a51),
      .b(a52),
      .clk(clk),
      .out(t228),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add47386 (
      .a(a57),
      .b(a58),
      .clk(clk),
      .out(t229),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add47401 (
      .a(a59),
      .b(a60),
      .clk(clk),
      .out(t230),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub47416 (
      .a(a57),
      .b(a58),
      .clk(clk),
      .out(t231),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub47431 (
      .a(a59),
      .b(a60),
      .clk(clk),
      .out(t232),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add47230 (
      .a(t209),
      .b(t213),
      .clk(clk),
      .out(t217),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add47237 (
      .a(t210),
      .b(t214),
      .clk(clk),
      .out(t218),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub47244 (
      .a(t209),
      .b(t213),
      .clk(clk),
      .out(t219),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub47251 (
      .a(t210),
      .b(t214),
      .clk(clk),
      .out(t220),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add47274 (
      .a(t211),
      .b(t216),
      .clk(clk),
      .out(t221),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub47281 (
      .a(t212),
      .b(t215),
      .clk(clk),
      .out(t222),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub47288 (
      .a(t211),
      .b(t216),
      .clk(clk),
      .out(t223),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add47295 (
      .a(t212),
      .b(t215),
      .clk(clk),
      .out(t224),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add47438 (
      .a(t225),
      .b(t229),
      .clk(clk),
      .out(t233),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add47445 (
      .a(t226),
      .b(t230),
      .clk(clk),
      .out(t234),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub47452 (
      .a(t225),
      .b(t229),
      .clk(clk),
      .out(t235),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub47459 (
      .a(t226),
      .b(t230),
      .clk(clk),
      .out(t236),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add47482 (
      .a(t227),
      .b(t232),
      .clk(clk),
      .out(t237),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub47489 (
      .a(t228),
      .b(t231),
      .clk(clk),
      .out(t238),
      .enable(1'b1),
      .rst(reset)
  );
  subfp32 sub47496 (
      .a(t227),
      .b(t232),
      .clk(clk),
      .out(t239),
      .enable(1'b1),
      .rst(reset)
  );
  addfp32 add47503 (
      .a(t228),
      .b(t231),
      .clk(clk),
      .out(t240),
      .enable(1'b1),
      .rst(reset)
  );


  always @(posedge clk) begin
    if (reset == 1) begin
    end else begin
      X0   <= X0_in;
      X1   <= X1_in;
      X2   <= X2_in;
      X3   <= X3_in;
      X4   <= X4_in;
      X5   <= X5_in;
      X6   <= X6_in;
      X7   <= X7_in;
      X8   <= X8_in;
      X9   <= X9_in;
      X10  <= X10_in;
      X11  <= X11_in;
      X12  <= X12_in;
      X13  <= X13_in;
      X14  <= X14_in;
      X15  <= X15_in;
      next <= next_in;
    end
  end
endmodule

// Latency: 4
// Gap: 2
module rc47527 (
    clk,
    reset,
    next,
    next_out,
    X0,
    Y0,
    X1,
    Y1,
    X2,
    Y2,
    X3,
    Y3,
    X4,
    Y4,
    X5,
    Y5,
    X6,
    Y6,
    X7,
    Y7,
    X8,
    Y8,
    X9,
    Y9,
    X10,
    Y10,
    X11,
    Y11,
    X12,
    Y12,
    X13,
    Y13,
    X14,
    Y14,
    X15,
    Y15
);

  output next_out;
  input clk, reset, next;

  input [31:0] X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15;

  output [31:0] Y0, Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y8, Y9, Y10, Y11, Y12, Y13, Y14, Y15;

  wire [63:0] t0;
  wire [63:0] s0;
  assign t0 = {X0, X1};
  wire [63:0] t1;
  wire [63:0] s1;
  assign t1 = {X2, X3};
  wire [63:0] t2;
  wire [63:0] s2;
  assign t2 = {X4, X5};
  wire [63:0] t3;
  wire [63:0] s3;
  assign t3 = {X6, X7};
  wire [63:0] t4;
  wire [63:0] s4;
  assign t4 = {X8, X9};
  wire [63:0] t5;
  wire [63:0] s5;
  assign t5 = {X10, X11};
  wire [63:0] t6;
  wire [63:0] s6;
  assign t6 = {X12, X13};
  wire [63:0] t7;
  wire [63:0] s7;
  assign t7  = {X14, X15};
  assign Y0  = s0[63:32];
  assign Y1  = s0[31:0];
  assign Y2  = s1[63:32];
  assign Y3  = s1[31:0];
  assign Y4  = s2[63:32];
  assign Y5  = s2[31:0];
  assign Y6  = s3[63:32];
  assign Y7  = s3[31:0];
  assign Y8  = s4[63:32];
  assign Y9  = s4[31:0];
  assign Y10 = s5[63:32];
  assign Y11 = s5[31:0];
  assign Y12 = s6[63:32];
  assign Y13 = s6[31:0];
  assign Y14 = s7[63:32];
  assign Y15 = s7[31:0];

  perm47525 instPerm48742 (
      .x0(t0),
      .y0(s0),
      .x1(t1),
      .y1(s1),
      .x2(t2),
      .y2(s2),
      .x3(t3),
      .y3(s3),
      .x4(t4),
      .y4(s4),
      .x5(t5),
      .y5(s5),
      .x6(t6),
      .y6(s6),
      .x7(t7),
      .y7(s7),
      .clk(clk),
      .next(next),
      .next_out(next_out),
      .reset(reset)
  );



endmodule

// Latency: 4
// Gap: 2
module perm47525 (
    clk,
    next,
    reset,
    next_out,
    x0,
    y0,
    x1,
    y1,
    x2,
    y2,
    x3,
    y3,
    x4,
    y4,
    x5,
    y5,
    x6,
    y6,
    x7,
    y7
);
  parameter numBanks = 8;
  parameter logBanks = 3;
  parameter depth = 2;
  parameter logDepth = 1;
  parameter width = 64;

  input [width-1:0] x0;
  output [width-1:0] y0;
  wire [width-1:0] ybuff0;
  input [width-1:0] x1;
  output [width-1:0] y1;
  wire [width-1:0] ybuff1;
  input [width-1:0] x2;
  output [width-1:0] y2;
  wire [width-1:0] ybuff2;
  input [width-1:0] x3;
  output [width-1:0] y3;
  wire [width-1:0] ybuff3;
  input [width-1:0] x4;
  output [width-1:0] y4;
  wire [width-1:0] ybuff4;
  input [width-1:0] x5;
  output [width-1:0] y5;
  wire [width-1:0] ybuff5;
  input [width-1:0] x6;
  output [width-1:0] y6;
  wire [width-1:0] ybuff6;
  input [width-1:0] x7;
  output [width-1:0] y7;
  wire [width-1:0] ybuff7;
  input clk, next, reset;
  output next_out;

  wire next0;

  reg inFlip0, outFlip0;
  reg inActive, outActive;

  wire [logBanks-1:0] inBank0, outBank0;
  wire [logDepth-1:0] inAddr0, outAddr0;
  wire [logBanks-1:0] outBank_a0;
  wire [logDepth-1:0] outAddr_a0;
  wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
  wire [logBanks-1:0] inBank1, outBank1;
  wire [logDepth-1:0] inAddr1, outAddr1;
  wire [logBanks-1:0] outBank_a1;
  wire [logDepth-1:0] outAddr_a1;
  wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
  wire [logBanks-1:0] inBank2, outBank2;
  wire [logDepth-1:0] inAddr2, outAddr2;
  wire [logBanks-1:0] outBank_a2;
  wire [logDepth-1:0] outAddr_a2;
  wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
  wire [logBanks-1:0] inBank3, outBank3;
  wire [logDepth-1:0] inAddr3, outAddr3;
  wire [logBanks-1:0] outBank_a3;
  wire [logDepth-1:0] outAddr_a3;
  wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
  wire [logBanks-1:0] inBank4, outBank4;
  wire [logDepth-1:0] inAddr4, outAddr4;
  wire [logBanks-1:0] outBank_a4;
  wire [logDepth-1:0] outAddr_a4;
  wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
  wire [logBanks-1:0] inBank5, outBank5;
  wire [logDepth-1:0] inAddr5, outAddr5;
  wire [logBanks-1:0] outBank_a5;
  wire [logDepth-1:0] outAddr_a5;
  wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
  wire [logBanks-1:0] inBank6, outBank6;
  wire [logDepth-1:0] inAddr6, outAddr6;
  wire [logBanks-1:0] outBank_a6;
  wire [logDepth-1:0] outAddr_a6;
  wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
  wire [logBanks-1:0] inBank7, outBank7;
  wire [logDepth-1:0] inAddr7, outAddr7;
  wire [logBanks-1:0] outBank_a7;
  wire [logDepth-1:0] outAddr_a7;
  wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


  reg [logDepth-1:0]
      inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;

  assign addr0  = {inCount, 3'd0};
  assign addr0b = {outCount, 3'd0};
  assign addr0c = {outCount_for_rd_addr, 3'd0};
  assign addr1  = {inCount, 3'd1};
  assign addr1b = {outCount, 3'd1};
  assign addr1c = {outCount_for_rd_addr, 3'd1};
  assign addr2  = {inCount, 3'd2};
  assign addr2b = {outCount, 3'd2};
  assign addr2c = {outCount_for_rd_addr, 3'd2};
  assign addr3  = {inCount, 3'd3};
  assign addr3b = {outCount, 3'd3};
  assign addr3c = {outCount_for_rd_addr, 3'd3};
  assign addr4  = {inCount, 3'd4};
  assign addr4b = {outCount, 3'd4};
  assign addr4c = {outCount_for_rd_addr, 3'd4};
  assign addr5  = {inCount, 3'd5};
  assign addr5b = {outCount, 3'd5};
  assign addr5c = {outCount_for_rd_addr, 3'd5};
  assign addr6  = {inCount, 3'd6};
  assign addr6b = {outCount, 3'd6};
  assign addr6c = {outCount_for_rd_addr, 3'd6};
  assign addr7  = {inCount, 3'd7};
  assign addr7b = {outCount, 3'd7};
  assign addr7c = {outCount_for_rd_addr, 3'd7};
  wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7;

  reg [width-1:0] z_0_0;
  reg [width-1:0] z_0_1;
  reg [width-1:0] z_0_2;
  reg [width-1:0] z_0_3;
  reg [width-1:0] z_0_4;
  reg [width-1:0] z_0_5;
  reg [width-1:0] z_0_6;
  reg [width-1:0] z_0_7;
  wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7;

  wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7;

  always @(posedge clk) begin
  end

  assign inBank0[0] = addr0[2];
  assign inBank0[1] = addr0[3] ^ addr0[1];
  assign inBank0[2] = addr0[0];
  assign inAddr0[0] = addr0[1];
  assign outBank0[0] = addr0b[0];
  assign outBank0[1] = addr0b[3] ^ addr0b[1];
  assign outBank0[2] = addr0b[2];
  assign outAddr0[0] = addr0b[3];
  assign outBank_a0[0] = addr0c[0];
  assign outBank_a0[1] = addr0c[3] ^ addr0c[1];
  assign outBank_a0[2] = addr0c[2];
  assign outAddr_a0[0] = addr0c[3];

  assign inBank1[0] = addr1[2];
  assign inBank1[1] = addr1[3] ^ addr1[1];
  assign inBank1[2] = addr1[0];
  assign inAddr1[0] = addr1[1];
  assign outBank1[0] = addr1b[0];
  assign outBank1[1] = addr1b[3] ^ addr1b[1];
  assign outBank1[2] = addr1b[2];
  assign outAddr1[0] = addr1b[3];
  assign outBank_a1[0] = addr1c[0];
  assign outBank_a1[1] = addr1c[3] ^ addr1c[1];
  assign outBank_a1[2] = addr1c[2];
  assign outAddr_a1[0] = addr1c[3];

  assign inBank2[0] = addr2[2];
  assign inBank2[1] = addr2[3] ^ addr2[1];
  assign inBank2[2] = addr2[0];
  assign inAddr2[0] = addr2[1];
  assign outBank2[0] = addr2b[0];
  assign outBank2[1] = addr2b[3] ^ addr2b[1];
  assign outBank2[2] = addr2b[2];
  assign outAddr2[0] = addr2b[3];
  assign outBank_a2[0] = addr2c[0];
  assign outBank_a2[1] = addr2c[3] ^ addr2c[1];
  assign outBank_a2[2] = addr2c[2];
  assign outAddr_a2[0] = addr2c[3];

  assign inBank3[0] = addr3[2];
  assign inBank3[1] = addr3[3] ^ addr3[1];
  assign inBank3[2] = addr3[0];
  assign inAddr3[0] = addr3[1];
  assign outBank3[0] = addr3b[0];
  assign outBank3[1] = addr3b[3] ^ addr3b[1];
  assign outBank3[2] = addr3b[2];
  assign outAddr3[0] = addr3b[3];
  assign outBank_a3[0] = addr3c[0];
  assign outBank_a3[1] = addr3c[3] ^ addr3c[1];
  assign outBank_a3[2] = addr3c[2];
  assign outAddr_a3[0] = addr3c[3];

  assign inBank4[0] = addr4[2];
  assign inBank4[1] = addr4[3] ^ addr4[1];
  assign inBank4[2] = addr4[0];
  assign inAddr4[0] = addr4[1];
  assign outBank4[0] = addr4b[0];
  assign outBank4[1] = addr4b[3] ^ addr4b[1];
  assign outBank4[2] = addr4b[2];
  assign outAddr4[0] = addr4b[3];
  assign outBank_a4[0] = addr4c[0];
  assign outBank_a4[1] = addr4c[3] ^ addr4c[1];
  assign outBank_a4[2] = addr4c[2];
  assign outAddr_a4[0] = addr4c[3];

  assign inBank5[0] = addr5[2];
  assign inBank5[1] = addr5[3] ^ addr5[1];
  assign inBank5[2] = addr5[0];
  assign inAddr5[0] = addr5[1];
  assign outBank5[0] = addr5b[0];
  assign outBank5[1] = addr5b[3] ^ addr5b[1];
  assign outBank5[2] = addr5b[2];
  assign outAddr5[0] = addr5b[3];
  assign outBank_a5[0] = addr5c[0];
  assign outBank_a5[1] = addr5c[3] ^ addr5c[1];
  assign outBank_a5[2] = addr5c[2];
  assign outAddr_a5[0] = addr5c[3];

  assign inBank6[0] = addr6[2];
  assign inBank6[1] = addr6[3] ^ addr6[1];
  assign inBank6[2] = addr6[0];
  assign inAddr6[0] = addr6[1];
  assign outBank6[0] = addr6b[0];
  assign outBank6[1] = addr6b[3] ^ addr6b[1];
  assign outBank6[2] = addr6b[2];
  assign outAddr6[0] = addr6b[3];
  assign outBank_a6[0] = addr6c[0];
  assign outBank_a6[1] = addr6c[3] ^ addr6c[1];
  assign outBank_a6[2] = addr6c[2];
  assign outAddr_a6[0] = addr6c[3];

  assign inBank7[0] = addr7[2];
  assign inBank7[1] = addr7[3] ^ addr7[1];
  assign inBank7[2] = addr7[0];
  assign inAddr7[0] = addr7[1];
  assign outBank7[0] = addr7b[0];
  assign outBank7[1] = addr7b[3] ^ addr7b[1];
  assign outBank7[2] = addr7b[2];
  assign outAddr7[0] = addr7b[3];
  assign outBank_a7[0] = addr7c[0];
  assign outBank_a7[1] = addr7c[3] ^ addr7c[1];
  assign outBank_a7[2] = addr7c[2];
  assign outAddr_a7[0] = addr7c[3];

  shiftRegFIFO #(2, 1) shiftFIFO_48745 (
      .X  (next),
      .Y  (next0),
      .clk(clk)
  );


  shiftRegFIFO #(2, 1) shiftFIFO_48748 (
      .X  (next0),
      .Y  (next_out),
      .clk(clk)
  );


  memArray16_47525 #(numBanks, logBanks, depth, logDepth, width) memSys (
      .inFlip(inFlip0),
      .outFlip(outFlip0),
      .next(next),
      .reset(reset),
      .x0(w_1_0[width+logDepth-1:logDepth]),
      .y0(ybuff0),
      .inAddr0(w_1_0[logDepth-1:0]),
      .outAddr0(u_1_0),
      .x1(w_1_1[width+logDepth-1:logDepth]),
      .y1(ybuff1),
      .inAddr1(w_1_1[logDepth-1:0]),
      .outAddr1(u_1_1),
      .x2(w_1_2[width+logDepth-1:logDepth]),
      .y2(ybuff2),
      .inAddr2(w_1_2[logDepth-1:0]),
      .outAddr2(u_1_2),
      .x3(w_1_3[width+logDepth-1:logDepth]),
      .y3(ybuff3),
      .inAddr3(w_1_3[logDepth-1:0]),
      .outAddr3(u_1_3),
      .x4(w_1_4[width+logDepth-1:logDepth]),
      .y4(ybuff4),
      .inAddr4(w_1_4[logDepth-1:0]),
      .outAddr4(u_1_4),
      .x5(w_1_5[width+logDepth-1:logDepth]),
      .y5(ybuff5),
      .inAddr5(w_1_5[logDepth-1:0]),
      .outAddr5(u_1_5),
      .x6(w_1_6[width+logDepth-1:logDepth]),
      .y6(ybuff6),
      .inAddr6(w_1_6[logDepth-1:0]),
      .outAddr6(u_1_6),
      .x7(w_1_7[width+logDepth-1:logDepth]),
      .y7(ybuff7),
      .inAddr7(w_1_7[logDepth-1:0]),
      .outAddr7(u_1_7),
      .clk(clk)
  );

  reg resetOutCountRd2_2;
  reg resetOutCountRd2_3;

  always @(posedge clk) begin
    if (reset == 1) begin
      resetOutCountRd2_2 <= 0;
      resetOutCountRd2_3 <= 0;
    end else begin
      resetOutCountRd2_2 <= (inCount == 1) ? 1'b1 : 1'b0;
      resetOutCountRd2_3 <= resetOutCountRd2_2;
      if (resetOutCountRd2_3 == 1'b1) outCount_for_rd_data <= 0;
      else outCount_for_rd_data <= outCount_for_rd_data + 1;
    end
  end
  always @(posedge clk) begin
    if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
      inFlip0 <= 0;
      outFlip0 <= 1;
      outCount <= 0;
      inCount <= 0;
      outCount_for_rd_addr <= 0;
    end else begin
      outCount_d  <= outCount;
      outCount_dd <= outCount_d;
      if (inCount == 1) outCount_for_rd_addr <= 0;
      else outCount_for_rd_addr <= outCount_for_rd_addr + 1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
      if (inCount == 1) begin
        outFlip0 <= ~outFlip0;
        outCount <= 0;
      end else outCount <= outCount + 1;
      if (inCount == 1) begin
        inFlip0 <= ~inFlip0;
      end
      if (next == 1) begin
        if (inCount >= 1) inFlip0 <= ~inFlip0;
        inCount <= 0;
      end else inCount <= inCount + 1;
    end
  end
  assign w_0_0 = {x0, inAddr0};
  assign w_0_4 = {x1, inAddr1};
  assign w_0_2 = {x2, inAddr2};
  assign w_0_6 = {x3, inAddr3};
  assign w_0_1 = {x4, inAddr4};
  assign w_0_5 = {x5, inAddr5};
  assign w_0_3 = {x6, inAddr6};
  assign w_0_7 = {x7, inAddr7};
  assign y0 = z_1_0;
  assign y1 = z_1_1;
  assign y2 = z_1_2;
  assign y3 = z_1_3;
  assign y4 = z_1_4;
  assign y5 = z_1_5;
  assign y6 = z_1_6;
  assign y7 = z_1_7;
  assign u_0_0 = outAddr_a0;
  assign u_0_1 = outAddr_a1;
  assign u_0_2 = outAddr_a2;
  assign u_0_3 = outAddr_a3;
  assign u_0_4 = outAddr_a4;
  assign u_0_5 = outAddr_a5;
  assign u_0_6 = outAddr_a6;
  assign u_0_7 = outAddr_a7;
  wire wr_ctrl_st_0;
  assign wr_ctrl_st_0 = inCount[0];

  switch #(logDepth + width) in_sw_0_0 (
      .x0  (w_0_0),
      .x1  (w_0_2),
      .y0  (w_1_0),
      .y1  (w_1_2),
      .ctrl(wr_ctrl_st_0)
  );
  switch #(logDepth + width) in_sw_0_1 (
      .x0  (w_0_1),
      .x1  (w_0_3),
      .y0  (w_1_1),
      .y1  (w_1_3),
      .ctrl(wr_ctrl_st_0)
  );
  switch #(logDepth + width) in_sw_0_2 (
      .x0  (w_0_4),
      .x1  (w_0_6),
      .y0  (w_1_4),
      .y1  (w_1_6),
      .ctrl(wr_ctrl_st_0)
  );
  switch #(logDepth + width) in_sw_0_3 (
      .x0  (w_0_5),
      .x1  (w_0_7),
      .y0  (w_1_5),
      .y1  (w_1_7),
      .ctrl(wr_ctrl_st_0)
  );
  wire rdd_ctrl_st_0;
  assign rdd_ctrl_st_0 = outCount_for_rd_data[0];

  switch #(width) out_sw_0_0 (
      .x0  (z_0_0),
      .x1  (z_0_2),
      .y0  (z_1_0),
      .y1  (z_1_2),
      .ctrl(rdd_ctrl_st_0)
  );
  switch #(width) out_sw_0_1 (
      .x0  (z_0_1),
      .x1  (z_0_3),
      .y0  (z_1_1),
      .y1  (z_1_3),
      .ctrl(rdd_ctrl_st_0)
  );
  switch #(width) out_sw_0_2 (
      .x0  (z_0_4),
      .x1  (z_0_6),
      .y0  (z_1_4),
      .y1  (z_1_6),
      .ctrl(rdd_ctrl_st_0)
  );
  switch #(width) out_sw_0_3 (
      .x0  (z_0_5),
      .x1  (z_0_7),
      .y0  (z_1_5),
      .y1  (z_1_7),
      .ctrl(rdd_ctrl_st_0)
  );
  wire rda_ctrl_st_0;
  assign rda_ctrl_st_0 = outCount_for_rd_addr[0];

  switch #(logDepth) rdaddr_sw_0_0 (
      .x0  (u_0_0),
      .x1  (u_0_2),
      .y0  (u_1_0),
      .y1  (u_1_2),
      .ctrl(rda_ctrl_st_0)
  );
  switch #(logDepth) rdaddr_sw_0_1 (
      .x0  (u_0_1),
      .x1  (u_0_3),
      .y0  (u_1_1),
      .y1  (u_1_3),
      .ctrl(rda_ctrl_st_0)
  );
  switch #(logDepth) rdaddr_sw_0_2 (
      .x0  (u_0_4),
      .x1  (u_0_6),
      .y0  (u_1_4),
      .y1  (u_1_6),
      .ctrl(rda_ctrl_st_0)
  );
  switch #(logDepth) rdaddr_sw_0_3 (
      .x0  (u_0_5),
      .x1  (u_0_7),
      .y0  (u_1_5),
      .y1  (u_1_7),
      .ctrl(rda_ctrl_st_0)
  );
endmodule

module memArray16_47525 (
    next,
    reset,
    x0,
    y0,
    inAddr0,
    outAddr0,
    x1,
    y1,
    inAddr1,
    outAddr1,
    x2,
    y2,
    inAddr2,
    outAddr2,
    x3,
    y3,
    inAddr3,
    outAddr3,
    x4,
    y4,
    inAddr4,
    outAddr4,
    x5,
    y5,
    inAddr5,
    outAddr5,
    x6,
    y6,
    inAddr6,
    outAddr6,
    x7,
    y7,
    inAddr7,
    outAddr7,
    clk,
    inFlip,
    outFlip
);

  parameter numBanks = 8;
  parameter logBanks = 3;
  parameter depth = 2;
  parameter logDepth = 1;
  parameter width = 64;

  input clk, next, reset;
  input inFlip, outFlip;
  wire next0;

  input [width-1:0] x0;
  output [width-1:0] y0;
  input [logDepth-1:0] inAddr0, outAddr0;
  input [width-1:0] x1;
  output [width-1:0] y1;
  input [logDepth-1:0] inAddr1, outAddr1;
  input [width-1:0] x2;
  output [width-1:0] y2;
  input [logDepth-1:0] inAddr2, outAddr2;
  input [width-1:0] x3;
  output [width-1:0] y3;
  input [logDepth-1:0] inAddr3, outAddr3;
  input [width-1:0] x4;
  output [width-1:0] y4;
  input [logDepth-1:0] inAddr4, outAddr4;
  input [width-1:0] x5;
  output [width-1:0] y5;
  input [logDepth-1:0] inAddr5, outAddr5;
  input [width-1:0] x6;
  output [width-1:0] y6;
  input [logDepth-1:0] inAddr6, outAddr6;
  input [width-1:0] x7;
  output [width-1:0] y7;
  input [logDepth-1:0] inAddr7, outAddr7;
  shiftRegFIFO #(2, 1) shiftFIFO_48751 (
      .X  (next),
      .Y  (next0),
      .clk(clk)
  );


  memMod_dist #(depth * 2, width, logDepth + 1) memMod0 (
      .in(x0),
      .out(y0),
      .inAddr({inFlip, inAddr0}),
      .outAddr({outFlip, outAddr0}),
      .writeSel(1'b1),
      .clk(clk)
  );
  memMod_dist #(depth * 2, width, logDepth + 1) memMod1 (
      .in(x1),
      .out(y1),
      .inAddr({inFlip, inAddr1}),
      .outAddr({outFlip, outAddr1}),
      .writeSel(1'b1),
      .clk(clk)
  );
  memMod_dist #(depth * 2, width, logDepth + 1) memMod2 (
      .in(x2),
      .out(y2),
      .inAddr({inFlip, inAddr2}),
      .outAddr({outFlip, outAddr2}),
      .writeSel(1'b1),
      .clk(clk)
  );
  memMod_dist #(depth * 2, width, logDepth + 1) memMod3 (
      .in(x3),
      .out(y3),
      .inAddr({inFlip, inAddr3}),
      .outAddr({outFlip, outAddr3}),
      .writeSel(1'b1),
      .clk(clk)
  );
  memMod_dist #(depth * 2, width, logDepth + 1) memMod4 (
      .in(x4),
      .out(y4),
      .inAddr({inFlip, inAddr4}),
      .outAddr({outFlip, outAddr4}),
      .writeSel(1'b1),
      .clk(clk)
  );
  memMod_dist #(depth * 2, width, logDepth + 1) memMod5 (
      .in(x5),
      .out(y5),
      .inAddr({inFlip, inAddr5}),
      .outAddr({outFlip, outAddr5}),
      .writeSel(1'b1),
      .clk(clk)
  );
  memMod_dist #(depth * 2, width, logDepth + 1) memMod6 (
      .in(x6),
      .out(y6),
      .inAddr({inFlip, inAddr6}),
      .outAddr({outFlip, outAddr6}),
      .writeSel(1'b1),
      .clk(clk)
  );
  memMod_dist #(depth * 2, width, logDepth + 1) memMod7 (
      .in(x7),
      .out(y7),
      .inAddr({inFlip, inAddr7}),
      .outAddr({outFlip, outAddr7}),
      .writeSel(1'b1),
      .clk(clk)
  );
endmodule
