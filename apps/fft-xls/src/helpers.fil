comp TwiddleFactor[NPoints, ?D=1]<'G: D>() -> (
  out[NPoints/2][2]: ['G, 'G+D] 32
) with {
  let W = 32;
} where
  NPoints > 0,
  NPoints % 2 == 0,
  D > 0
{
  // generate twiddle factors
  for i in 0..NPoints/2 {
    cosbits := new SignedConst[W, cos_bits(i, NPoints), D]<'G>();
    sinbits := new SignedConst[W, sin_bits(i+NPoints/2, NPoints), D]<'G>(); // equivalent to -sin
    out{i}{0} = cosbits.out;
    out{i}{1} = sinbits.out;
  }
}

comp BitRev[NStages, W]<'G: 1>(
  in[NPoints][2]: ['G, 'G+1] W
) -> (
  out[NPoints][2]: ['G, 'G+1] W
) with {
  let NPoints = pow2(NStages);
} where 
  NStages > 0,
  W > 0
{
  // bit reverse the input
  for j in 0..NPoints {
    let br = bit_rev(j, NStages);
    assume br < NPoints;
    out{j}{0..2} = in{br}{0..2};
  }
}

/// Generates the twiddle factors for a stage of the fft.
/// Separated out to simplify typechecking.
comp TwiddleStage[NStages, Stage, W, ?D=1]<'G: D>(
  twiddle[pow2(NStages-1)][2]: ['G, 'G+D] W
) -> (
  out[pow2(NStages-1)][2]: ['G, 'G+D] W
) with {
  let NPoints = pow2(NStages);
} where 
  NStages > 0,
  Stage < NStages,
  Stage >= 0,
  W > 0,
  D > 0
{
  assume NPoints/2 == pow2(NStages-1);
  // calculate the twiddle factors.
  // Uses the fact that the twiddle factors can be generated recursively
  for twiddle_j in 0..pow2(Stage) {
    let twiddle_index = twiddle_j * pow2(NStages-Stage-1);
    assume twiddle_index < NPoints/2;
    for twiddle_i in 0..pow2(NStages-Stage-1) {
      let stage_twiddle_index = twiddle_index + twiddle_i;
      assume stage_twiddle_index < NPoints/2;
      out{stage_twiddle_index}{0..2} = twiddle{twiddle_index}{0..2};
    }
  }
}

/// Performs an `NPoints` point stride permutation.
comp StridePermutation[NStages, W]<'G: 1>(
  in[NPoints][2]: ['G, 'G+1] W
) -> (
  out[NPoints][2]: ['G, 'G+1] W
) with {
  let NPoints = pow2(NStages);
} where
  NStages > 0,
  W > 0
{
  // Described on page 33 of https://link.springer.com/chapter/10.1007/978-1-4757-2767-8_2.
  assume NPoints/2 == pow2(NStages-1);

  for i in 0..NPoints/2 {
    out{i}{0..2} = in{i*2}{0..2};
    out{i+NPoints/2}{0..2} = in{i*2+1}{0..2};
  }
}