import "primitives/math/complex.fil";
import "primitives/math/float.fil";
import "primitives/state.fil";
import "primitives/flopoco/def.fil";

/// Butterfly module using existential parameters.
comp Butterfly[W, E, ?M=W-E-1]<'G: 1>(
  go: interface['G],
  in0[2]: ['G, 'G+1] W, // real and imaginary parts of input
  in1[2]: ['G, 'G+1] W,
  twiddle[2]: ['G, 'G+1] W // twiddle factor
) -> (
  out0[2]: ['G+L, 'G+L+1] W,
  out1[2]: ['G+L, 'G+L+1] W
) with {
  some L where L > 0;
} where
    W == E + M + 1,
    E > 1,
    M > 1,
    L > 0
{
  // switches between the type of butterfly unit
  let T = 1;
  if T == 0 {
    // Fully combinational butterfly module
    // multiply by twiddle
    t1 := new ComplexMult[W, E, M]<'G>(in1{0..2}, twiddle{0..2});
    
    O0 := new ComplexAdd[W, E, M]<'G>(in0{0..2}, t1.out{0..2});
    O1 := new ComplexSub[W, E, M]<'G>(in0{0..2}, t1.out{0..2});

    // registers
    d00 := new Delay[W]<'G>(O0.out{0});
    d01 := new Delay[W]<'G>(O0.out{1});
    d10 := new Delay[W]<'G>(O1.out{0});
    d11 := new Delay[W]<'G>(O1.out{1});
    out0{0} = d00.out;
    out0{1} = d01.out;
    out1{0} = d10.out;
    out1{1} = d11.out;

    L := 1;
  } else {
    if T == 1 {
      // Butterfly unit using flopoco's modules

      // instantiations for latency access
      FM := new FPMult[E, M];
      FA := new FPAdd[E, M];
      FS := new FPSub[E, M];

      assume FA::L == FS::L; // we can assume this because we know the internal implementation of FPSub

      // delay first input
      in00_delay := new Shift[W, FM::L+FA::L]<'G>(in0{0});
      in01_delay := new Shift[W, FM::L+FA::L]<'G>(in0{1});

      // convert inputs to flopoco
      in00 := new InputIEEE[E, M, E, M]<'G+FM::L+FA::L>(in00_delay.out);
      in01 := new InputIEEE[E, M, E, M]<'G+FM::L+FA::L>(in01_delay.out);
      in10 := new InputIEEE[E, M, E, M]<'G>(in1{0});
      in11 := new InputIEEE[E, M, E, M]<'G>(in1{1});

      // convert twiddle to flopoco
      twiddle0 := new InputIEEE[E, M, E, M]<'G>(twiddle{0});
      twiddle1 := new InputIEEE[E, M, E, M]<'G>(twiddle{1});
      
      // Perform w * in1
      ac := new FPMult[E, M]<'G>(in10.R, twiddle0.R); // ac
      bd := new FPMult[E, M]<'G>(in11.R, twiddle1.R); // bd

      re := new FPSub[E, M]<'G+FM::L>(ac.R, bd.R); // ac - bd

      ad := new FPMult[E, M]<'G>(in10.R, twiddle1.R); // ad
      bc := new FPMult[E, M]<'G>(in11.R, twiddle0.R); // bc
      im := new FPAdd[E, M]<'G+FM::L>(ad.R, bc.R); // ad + bc

      // in0 + (w * in1)
      out00 := new FPAdd[E, M]<'G+FM::L+FA::L>(in00.R, re.R); // re
      out01 := new FPAdd[E, M]<'G+FM::L+FA::L>(in01.R, im.R); // im
      
      // in0 - (w * in1)
      out10 := new FPSub[E, M]<'G+FM::L+FA::L>(in00.R, re.R); // re
      out11 := new FPSub[E, M]<'G+FM::L+FA::L>(in01.R, im.R); // im

      out00_IEEE := new OutputIEEE[E, M, E, M]<'G+FM::L+FA::L*2>(out00.R);
      out01_IEEE := new OutputIEEE[E, M, E, M]<'G+FM::L+FA::L*2>(out01.R);
      out10_IEEE := new OutputIEEE[E, M, E, M]<'G+FM::L+FA::L*2>(out10.R);
      out11_IEEE := new OutputIEEE[E, M, E, M]<'G+FM::L+FA::L*2>(out11.R);

      out0{0} = out00_IEEE.R;
      out0{1} = out01_IEEE.R;
      out1{0} = out10_IEEE.R;
      out1{1} = out11_IEEE.R;

      L := 2*FA::L+FM::L;
    }
  }
}