import "../../cmn/bundled.fil";
import "primitives/math/float.fil";
/*
Here, we specify the concrete implementations of all the abstract floating point modules used in the FFT
*/

/// Floating point addition with Flopoco's internal format
comp AbstractFPAdd[E, M]<'G:1>(
  X: ['G, 'G+1] W,
  Y: ['G, 'G+1] W,
) -> (
  R: ['G+L, 'G+L+1] W,
) with {
  some W where W > 0;
  some L where L >= 0;
} where 
  E > 0,
  M > 0
{
  assume E == 8;
  assume M == 23;

  let shift = 2;
  a_shift := new Shift[32, shift]<'G>(X);
  b_shift := new Shift[32, shift]<'G>(Y);
  mult := new FAdd[32, 8, 23]<'G+shift>(a_shift.out, b_shift.out);
  mult_shift := new Shift[32, shift]<'G+shift>(mult.out);
  R = mult_shift.out;
  L := shift * 2;
  W := 32;
}

/// Floating point addition with Flopoco's internal format
comp AbstractFPSub[E, M]<'G:1>(
  X: ['G, 'G+1] W,
  Y: ['G, 'G+1] W,
) -> (
  R: ['G+L, 'G+L+1] W,
) with {
  some W where W > 0;
  some L where L >= 0;
} where 
  E > 0,
  M > 0
{
  assume E == 8;
  assume M == 23;

  let shift = 2;
  a_shift := new Shift[32, shift]<'G>(X);
  b_shift := new Shift[32, shift]<'G>(Y);
  mult := new FSub[32, 8, 23]<'G+shift>(a_shift.out, b_shift.out);
  mult_shift := new Shift[32, shift]<'G+shift>(mult.out);
  R = mult_shift.out;
  L := shift * 2;
  W := 32;
}


/// Floating point multiplication with Flopoco's internal format
comp AbstractFPMult[E, M]<'G: 1>(
  X: ['G, 'G+1] W,
  Y: ['G, 'G+1] W,
) -> (
  R: ['G+L, 'G+L+1] W,
) with {
  some W where W > 0;
  some L where L >= 0;
} where 
  E > 0,
  M > 0
{
  assume E == 8;
  assume M == 23;

  let shift = 2;
  a_shift := new Shift[32, shift]<'G>(X);
  b_shift := new Shift[32, shift]<'G>(Y);
  mult := new FMult[32, 8, 23]<'G+shift>(a_shift.out, b_shift.out);
  mult_shift := new Shift[32, shift]<'G+shift>(mult.out);
  R = mult_shift.out;

  L := shift * 2;
  W := 32;
}

/// Converts an IEEE floating point number to Internal format
/// This does nothing as the internal format is the same as IEEE
comp AbstractFPfromIEEE[E, M]<'G:1>(
  X: ['G, 'G+1] WidthIEEE
) -> (
  R: ['G+L, 'G+L+1] W
) with {
  let WidthIEEE = E + M + 1;
  some W where W > 0;
  some L where L == 0;
} where 
  E > 0,
  M > 0
{
  assume E == 8;
  assume M == 23;
  L := 0;
  W := 32;
  R = X;
}

/// Converts a Internal format floating point number to IEEE
/// This does nothing as the internal format is the same as IEEE
comp AbstractFPtoIEEE[E, M]<'G:1>(
  X: ['G, 'G+1] W
) -> (
  R: ['G+L, 'G+L+1] WidthIEEE
) with {
  some W where W > 0;
  let WidthIEEE = E + M + 1;
  some L where L == 0;
} where 
  E > 0,
  M > 0
{
  assume E == 8;
  assume M == 23;
  L := 0;
  W := 32;
  R = X;
}

/// Floating point negation
comp AbstractFPNeg[E, M]<'G:1>(
  X: ['G, 'G+1] W
) -> (
  R: ['G+L, 'G+L+1] W
) with {
  some W where W > 0;
  some L where L == 0;
} where 
  E > 0,
  M > 0
{
  assume E == 8;
  assume M == 23;
  L := 0;
  W := 32;
  fn := new FNeg[32, 8, 23]<'G>(X);
  R = fn.out;
}