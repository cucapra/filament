import "frisc.futil";
import "primitives/memories/comb.futil";

component main (@clk clk: 1, @reset reset: 1, @go go: 1) -> () {
  cells {
    @external iram = comb_mem_d1(32,2,32);
    @external res = comb_mem_d1(32,2,32);
    cpu = CPU();

    pc_reg = std_reg(32);
  }
  wires {
    static<1> group read_iram {
      iram.addr0 = cpu.pc;

      cpu.instr = iram.read_data;
      // cpu.dataIn = dram.read_data;

      // dram.addr0 = cpu.memAddr;
      // dram.write_data = cpu.memData;
      // dram.write_mask = cpu.memWriteMask;
    }

    static<1> group write_res {
      res.addr0 = cpu.memAddr;
      res.write_data = cpu.memData;
      res.write_en = cpu.isStore;
    }

    static<1> group reg_pc {
      pc_reg.in = cpu.pc;
      pc_reg.write_en = %0 ? 1'd1;
    }

    cpu.pcin = cpu.nextpc;
    cpu.rfDataIn = cpu.rfDataOut;
  }
  control {
    static seq {
      static repeat 6 {
        static par {
          read_iram;
          write_res;
          reg_pc;
        } 
      }
    }
  }
}