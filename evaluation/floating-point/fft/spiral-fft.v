/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

//   Input/output stream: 8 complex words per cycle
//   Throughput: one transform every 1 cycles
//   Latency: 54 cycles

//   Resources required:
//     4 multipliers (32 x 32 bit)
//     52 adders (32 x 32 bit)

// Generated on Fri Sep 08 17:17:15 UTC 2023

// Latency: 54 clock cycles
// Throughput: 1 transform every 1 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 1 cycles.  This means that
// 1 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 54 cycles.  This means that
// the 'next_out' will be asserted 54 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.


module dft_testbench();
   reg clk, reset, next;
   wire next_out;
   integer i, j, k, l, m;
   reg [15:0] counter;
   reg [31:0] in [15:0];
   wire [31:0] X0;
   wire [31:0] Y0;
   wire [31:0] X1;
   wire [31:0] Y1;
   wire [31:0] X2;
   wire [31:0] Y2;
   wire [31:0] X3;
   wire [31:0] Y3;
   wire [31:0] X4;
   wire [31:0] Y4;
   wire [31:0] X5;
   wire [31:0] Y5;
   wire [31:0] X6;
   wire [31:0] Y6;
   wire [31:0] X7;
   wire [31:0] Y7;
   wire [31:0] X8;
   wire [31:0] Y8;
   wire [31:0] X9;
   wire [31:0] Y9;
   wire [31:0] X10;
   wire [31:0] Y10;
   wire [31:0] X11;
   wire [31:0] Y11;
   wire [31:0] X12;
   wire [31:0] Y12;
   wire [31:0] X13;
   wire [31:0] Y13;
   wire [31:0] X14;
   wire [31:0] Y14;
   wire [31:0] X15;
   wire [31:0] Y15;
   reg clrCnt;
   assign X0 = in[0];
   assign X1 = in[1];
   assign X2 = in[2];
   assign X3 = in[3];
   assign X4 = in[4];
   assign X5 = in[5];
   assign X6 = in[6];
   assign X7 = in[7];
   assign X8 = in[8];
   assign X9 = in[9];
   assign X10 = in[10];
   assign X11 = in[11];
   assign X12 = in[12];
   assign X13 = in[13];
   assign X14 = in[14];
   assign X15 = in[15];

   initial clk = 0;

   always #10000 clk = ~clk;


   // Instantiate top-level module of core 'X' signals are system inputs
   // and 'Y' signals are system outputs
   dft_top dft_top_instance (.clk(clk), .reset(reset), .next(next), .next_out(next_out),
    .X0(X0), .Y0(Y0),
    .X1(X1), .Y1(Y1),
    .X2(X2), .Y2(Y2),
    .X3(X3), .Y3(Y3),
    .X4(X4), .Y4(Y4),
    .X5(X5), .Y5(Y5),
    .X6(X6), .Y6(Y6),
    .X7(X7), .Y7(Y7),
    .X8(X8), .Y8(Y8),
    .X9(X9), .Y9(Y9),
    .X10(X10), .Y10(Y10),
    .X11(X11), .Y11(Y11),
    .X12(X12), .Y12(Y12),
    .X13(X13), .Y13(Y13),
    .X14(X14), .Y14(Y14),
    .X15(X15), .Y15(Y15));

   // You can use this counter to verify that the gap and latency are as expected.
   always @(posedge clk) begin
      if (clrCnt) counter <= 0;
      else counter <= counter+1;
   end


   initial begin
      @(posedge clk);
      @(posedge clk);

      // On the next cycle, begin loading input vector.
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // The 8 complex data points enter the system over 1 cycles
      for (j=0; j < 0; j = j+1) begin
          // Input: 8 complex words per cycle
         for (k=0; k < 16; k = k+1) begin
            in[k] <= j*16 + k;
         end
         @(posedge clk);
      end
      j = 0;
      for (k=0; k < 16; k = k+1) begin
         in[k] <= j*16 + k;
      end


      @(posedge clk);
      // Wait until the next data vector can be entered
      while (counter < 0)
        @(posedge clk);

      // On the next cycle, we will start the next data vector
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // Start entering next input vector
      for (j=0; j < 0; j = j+1) begin
         // Input 16 words per cycle
         for (k=0; k < 16; k = k+1) begin
            in[k] <= 16 + j*16 + k;
          end
          @(posedge clk);
       end
       j = 0;
       for (k=0; k < 16; k = k+1) begin
          in[k] <= 16 + j*16 + k;
       end
   end


   initial begin
      // set initial values
      in[0] <= 0;
      in[1] <= 0;
      in[2] <= 0;
      in[3] <= 0;
      in[4] <= 0;
      in[5] <= 0;
      in[6] <= 0;
      in[7] <= 0;
      in[8] <= 0;
      in[9] <= 0;
      in[10] <= 0;
      in[11] <= 0;
      in[12] <= 0;
      in[13] <= 0;
      in[14] <= 0;
      in[15] <= 0;
      next <= 0;
      reset <= 0;

      @(posedge clk);
      reset <= 1;
      @(posedge clk);
      reset <= 0;
      @(posedge clk);
      @(posedge clk);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 1---");

      for (m=0; m < 0; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 2---");

      for (m=0; m < 0; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      $finish;
   end
endmodule

// Latency: 54
// Gap: 1
// module_name_is:dft_top
module dft_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0_0;
   wire [31:0] t0_1;
   wire [31:0] t0_2;
   wire [31:0] t0_3;
   wire [31:0] t0_4;
   wire [31:0] t0_5;
   wire [31:0] t0_6;
   wire [31:0] t0_7;
   wire [31:0] t0_8;
   wire [31:0] t0_9;
   wire [31:0] t0_10;
   wire [31:0] t0_11;
   wire [31:0] t0_12;
   wire [31:0] t0_13;
   wire [31:0] t0_14;
   wire [31:0] t0_15;
   wire next_0;
   wire [31:0] t1_0;
   wire [31:0] t1_1;
   wire [31:0] t1_2;
   wire [31:0] t1_3;
   wire [31:0] t1_4;
   wire [31:0] t1_5;
   wire [31:0] t1_6;
   wire [31:0] t1_7;
   wire [31:0] t1_8;
   wire [31:0] t1_9;
   wire [31:0] t1_10;
   wire [31:0] t1_11;
   wire [31:0] t1_12;
   wire [31:0] t1_13;
   wire [31:0] t1_14;
   wire [31:0] t1_15;
   wire next_1;
   wire [31:0] t2_0;
   wire [31:0] t2_1;
   wire [31:0] t2_2;
   wire [31:0] t2_3;
   wire [31:0] t2_4;
   wire [31:0] t2_5;
   wire [31:0] t2_6;
   wire [31:0] t2_7;
   wire [31:0] t2_8;
   wire [31:0] t2_9;
   wire [31:0] t2_10;
   wire [31:0] t2_11;
   wire [31:0] t2_12;
   wire [31:0] t2_13;
   wire [31:0] t2_14;
   wire [31:0] t2_15;
   wire next_2;
   assign t0_0 = X0;
   assign Y0 = t2_0;
   assign t0_1 = X1;
   assign Y1 = t2_1;
   assign t0_2 = X2;
   assign Y2 = t2_2;
   assign t0_3 = X3;
   assign Y3 = t2_3;
   assign t0_4 = X4;
   assign Y4 = t2_4;
   assign t0_5 = X5;
   assign Y5 = t2_5;
   assign t0_6 = X6;
   assign Y6 = t2_6;
   assign t0_7 = X7;
   assign Y7 = t2_7;
   assign t0_8 = X8;
   assign Y8 = t2_8;
   assign t0_9 = X9;
   assign Y9 = t2_9;
   assign t0_10 = X10;
   assign Y10 = t2_10;
   assign t0_11 = X11;
   assign Y11 = t2_11;
   assign t0_12 = X12;
   assign Y12 = t2_12;
   assign t0_13 = X13;
   assign Y13 = t2_13;
   assign t0_14 = X14;
   assign Y14 = t2_14;
   assign t0_15 = X15;
   assign Y15 = t2_15;
   assign next_0 = next;
   assign next_out = next_2;

// latency=31, gap=1
   codeBlock34881 stage0(.clk(clk), .reset(reset), .next_in(next_0), .next_out(next_1),
       .X0_in(t0_0), .Y0(t1_0),
       .X1_in(t0_1), .Y1(t1_1),
       .X2_in(t0_2), .Y2(t1_2),
       .X3_in(t0_3), .Y3(t1_3),
       .X4_in(t0_4), .Y4(t1_4),
       .X5_in(t0_5), .Y5(t1_5),
       .X6_in(t0_6), .Y6(t1_6),
       .X7_in(t0_7), .Y7(t1_7),
       .X8_in(t0_8), .Y8(t1_8),
       .X9_in(t0_9), .Y9(t1_9),
       .X10_in(t0_10), .Y10(t1_10),
       .X11_in(t0_11), .Y11(t1_11),
       .X12_in(t0_12), .Y12(t1_12),
       .X13_in(t0_13), .Y13(t1_13),
       .X14_in(t0_14), .Y14(t1_14),
       .X15_in(t0_15), .Y15(t1_15));


// latency=23, gap=1
   codeBlock35245 stage1(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7),
       .X8_in(t1_8), .Y8(t2_8),
       .X9_in(t1_9), .Y9(t2_9),
       .X10_in(t1_10), .Y10(t2_10),
       .X11_in(t1_11), .Y11(t2_11),
       .X12_in(t1_12), .Y12(t2_12),
       .X13_in(t1_13), .Y13(t2_13),
       .X14_in(t1_14), .Y14(t2_14),
       .X15_in(t1_15), .Y15(t2_15));


endmodule

// Latency: 31
// Gap: 1
module codeBlock34881(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(30, 1) shiftFIFO_36578(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a109;
   wire signed [31:0] a110;
   wire signed [31:0] a111;
   wire signed [31:0] a112;
   wire signed [31:0] a117;
   wire signed [31:0] a118;
   wire signed [31:0] a119;
   wire signed [31:0] a120;
   wire signed [31:0] a125;
   wire signed [31:0] a126;
   wire signed [31:0] a127;
   wire signed [31:0] a128;
   wire signed [31:0] a133;
   wire signed [31:0] a134;
   wire signed [31:0] a135;
   wire signed [31:0] a136;
   wire  [31:0] t349;
   wire  [31:0] t350;
   wire  [31:0] t351;
   wire  [31:0] t352;
   wire  [31:0] t353;
   wire  [31:0] t354;
   wire  [31:0] t355;
   wire  [31:0] t356;
   wire  [31:0] t359;
   wire  [31:0] t360;
   wire  [31:0] t361;
   wire  [31:0] t362;
   wire  [31:0] t363;
   wire  [31:0] t364;
   wire  [31:0] t365;
   wire  [31:0] t366;
   reg signed [31:0] tm4;
   reg signed [31:0] tm23;
   reg signed [31:0] tm42;
   reg signed [31:0] tm61;
   reg signed [31:0] tm80;
   reg signed [31:0] tm99;
   reg signed [31:0] tm118;
   reg signed [31:0] tm137;
   reg signed [31:0] tm156;
   reg signed [31:0] tm175;
   reg signed [31:0] tm194;
   reg signed [31:0] tm213;
   reg signed [31:0] tm5;
   reg signed [31:0] tm24;
   reg signed [31:0] tm43;
   reg signed [31:0] tm62;
   reg signed [31:0] tm81;
   reg signed [31:0] tm100;
   reg signed [31:0] tm119;
   reg signed [31:0] tm138;
   reg signed [31:0] tm157;
   reg signed [31:0] tm176;
   reg signed [31:0] tm195;
   reg signed [31:0] tm214;
   reg signed [31:0] tm6;
   reg signed [31:0] tm25;
   reg signed [31:0] tm44;
   reg signed [31:0] tm63;
   reg signed [31:0] tm82;
   reg signed [31:0] tm101;
   reg signed [31:0] tm120;
   reg signed [31:0] tm139;
   reg signed [31:0] tm158;
   reg signed [31:0] tm177;
   reg signed [31:0] tm196;
   reg signed [31:0] tm215;
   reg signed [31:0] tm7;
   reg signed [31:0] tm26;
   reg signed [31:0] tm45;
   reg signed [31:0] tm64;
   reg signed [31:0] tm83;
   reg signed [31:0] tm102;
   reg signed [31:0] tm121;
   reg signed [31:0] tm140;
   reg signed [31:0] tm159;
   reg signed [31:0] tm178;
   reg signed [31:0] tm197;
   reg signed [31:0] tm216;
   reg signed [31:0] tm8;
   reg signed [31:0] tm27;
   reg signed [31:0] tm46;
   reg signed [31:0] tm65;
   reg signed [31:0] tm84;
   reg signed [31:0] tm103;
   reg signed [31:0] tm122;
   reg signed [31:0] tm141;
   reg signed [31:0] tm160;
   reg signed [31:0] tm179;
   reg signed [31:0] tm198;
   reg signed [31:0] tm217;
   reg signed [31:0] tm9;
   reg signed [31:0] tm28;
   reg signed [31:0] tm47;
   reg signed [31:0] tm66;
   reg signed [31:0] tm85;
   reg signed [31:0] tm104;
   reg signed [31:0] tm123;
   reg signed [31:0] tm142;
   reg signed [31:0] tm161;
   reg signed [31:0] tm180;
   reg signed [31:0] tm199;
   reg signed [31:0] tm218;
   reg signed [31:0] tm10;
   reg signed [31:0] tm29;
   reg signed [31:0] tm48;
   reg signed [31:0] tm67;
   reg signed [31:0] tm86;
   reg signed [31:0] tm105;
   reg signed [31:0] tm124;
   reg signed [31:0] tm143;
   reg signed [31:0] tm162;
   reg signed [31:0] tm181;
   reg signed [31:0] tm200;
   reg signed [31:0] tm219;
   wire  [31:0] a105;
   wire  [31:0] a106;
   wire  [31:0] a107;
   wire  [31:0] a108;
   reg signed [31:0] tm11;
   reg signed [31:0] tm30;
   reg signed [31:0] tm49;
   reg signed [31:0] tm68;
   reg signed [31:0] tm87;
   reg signed [31:0] tm106;
   reg signed [31:0] tm125;
   reg signed [31:0] tm144;
   reg signed [31:0] tm163;
   reg signed [31:0] tm182;
   reg signed [31:0] tm201;
   reg signed [31:0] tm220;
   reg signed [31:0] tm12;
   reg signed [31:0] tm31;
   reg signed [31:0] tm50;
   reg signed [31:0] tm69;
   reg signed [31:0] tm88;
   reg signed [31:0] tm107;
   reg signed [31:0] tm126;
   reg signed [31:0] tm145;
   reg signed [31:0] tm164;
   reg signed [31:0] tm183;
   reg signed [31:0] tm202;
   reg signed [31:0] tm221;
   reg signed [31:0] tm13;
   reg signed [31:0] tm32;
   reg signed [31:0] tm51;
   reg signed [31:0] tm70;
   reg signed [31:0] tm89;
   reg signed [31:0] tm108;
   reg signed [31:0] tm127;
   reg signed [31:0] tm146;
   reg signed [31:0] tm165;
   reg signed [31:0] tm184;
   reg signed [31:0] tm203;
   reg signed [31:0] tm222;
   reg signed [31:0] tm14;
   reg signed [31:0] tm33;
   reg signed [31:0] tm52;
   reg signed [31:0] tm71;
   reg signed [31:0] tm90;
   reg signed [31:0] tm109;
   reg signed [31:0] tm128;
   reg signed [31:0] tm147;
   reg signed [31:0] tm166;
   reg signed [31:0] tm185;
   reg signed [31:0] tm204;
   reg signed [31:0] tm223;
   reg signed [31:0] tm15;
   reg signed [31:0] tm34;
   reg signed [31:0] tm53;
   reg signed [31:0] tm72;
   reg signed [31:0] tm91;
   reg signed [31:0] tm110;
   reg signed [31:0] tm129;
   reg signed [31:0] tm148;
   reg signed [31:0] tm167;
   reg signed [31:0] tm186;
   reg signed [31:0] tm205;
   reg signed [31:0] tm224;
   reg signed [31:0] tm16;
   reg signed [31:0] tm35;
   reg signed [31:0] tm54;
   reg signed [31:0] tm73;
   reg signed [31:0] tm92;
   reg signed [31:0] tm111;
   reg signed [31:0] tm130;
   reg signed [31:0] tm149;
   reg signed [31:0] tm168;
   reg signed [31:0] tm187;
   reg signed [31:0] tm206;
   reg signed [31:0] tm225;
   reg signed [31:0] tm17;
   reg signed [31:0] tm36;
   reg signed [31:0] tm55;
   reg signed [31:0] tm74;
   reg signed [31:0] tm93;
   reg signed [31:0] tm112;
   reg signed [31:0] tm131;
   reg signed [31:0] tm150;
   reg signed [31:0] tm169;
   reg signed [31:0] tm188;
   reg signed [31:0] tm207;
   reg signed [31:0] tm226;
   reg signed [31:0] tm18;
   reg signed [31:0] tm37;
   reg signed [31:0] tm56;
   reg signed [31:0] tm75;
   reg signed [31:0] tm94;
   reg signed [31:0] tm113;
   reg signed [31:0] tm132;
   reg signed [31:0] tm151;
   reg signed [31:0] tm170;
   reg signed [31:0] tm189;
   reg signed [31:0] tm208;
   reg signed [31:0] tm227;
   reg signed [31:0] tm19;
   reg signed [31:0] tm38;
   reg signed [31:0] tm57;
   reg signed [31:0] tm76;
   reg signed [31:0] tm95;
   reg signed [31:0] tm114;
   reg signed [31:0] tm133;
   reg signed [31:0] tm152;
   reg signed [31:0] tm171;
   reg signed [31:0] tm190;
   reg signed [31:0] tm209;
   reg signed [31:0] tm228;
   reg signed [31:0] tm20;
   reg signed [31:0] tm39;
   reg signed [31:0] tm58;
   reg signed [31:0] tm77;
   reg signed [31:0] tm96;
   reg signed [31:0] tm115;
   reg signed [31:0] tm134;
   reg signed [31:0] tm153;
   reg signed [31:0] tm172;
   reg signed [31:0] tm191;
   reg signed [31:0] tm210;
   reg signed [31:0] tm229;
   reg signed [31:0] tm21;
   reg signed [31:0] tm40;
   reg signed [31:0] tm59;
   reg signed [31:0] tm78;
   reg signed [31:0] tm97;
   reg signed [31:0] tm116;
   reg signed [31:0] tm135;
   reg signed [31:0] tm154;
   reg signed [31:0] tm173;
   reg signed [31:0] tm192;
   reg signed [31:0] tm211;
   reg signed [31:0] tm230;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;
   wire  [31:0] t357;
   wire  [31:0] t358;
   wire signed [31:0] Y4;
   wire signed [31:0] Y5;
   wire signed [31:0] Y6;
   wire signed [31:0] Y7;
   wire signed [31:0] Y8;
   wire signed [31:0] Y9;
   wire signed [31:0] Y10;
   wire signed [31:0] Y11;
   wire  [31:0] t367;
   wire  [31:0] t368;
   wire signed [31:0] Y12;
   wire signed [31:0] Y13;
   wire signed [31:0] Y14;
   wire signed [31:0] Y15;
   reg signed [31:0] tm22;
   reg signed [31:0] tm41;
   reg signed [31:0] tm60;
   reg signed [31:0] tm79;
   reg signed [31:0] tm98;
   reg signed [31:0] tm117;
   reg signed [31:0] tm136;
   reg signed [31:0] tm155;
   reg signed [31:0] tm174;
   reg signed [31:0] tm193;
   reg signed [31:0] tm212;
   reg signed [31:0] tm231;

   wire signed [31:0] tm0;
   assign tm0 = 32'h3f3504f3;

   assign a109 = X0;
   assign a110 = X8;
   assign a111 = X1;
   assign a112 = X9;
   assign a117 = X2;
   assign a118 = X10;
   assign a119 = X3;
   assign a120 = X11;
   assign a125 = X4;
   assign a126 = X12;
   assign a127 = X5;
   assign a128 = X13;
   assign a133 = X6;
   assign a134 = X14;
   assign a135 = X7;
   assign a136 = X15;
   assign Y0 = tm22;
   assign Y1 = tm41;
   assign Y2 = tm60;
   assign Y3 = tm79;
   assign Y4 = tm98;
   assign Y5 = tm117;
   assign Y6 = t357;
   assign Y7 = t358;
   assign Y8 = tm136;
   assign Y9 = tm155;
   assign Y10 = tm174;
   assign Y11 = tm193;
   assign Y12 = tm212;
   assign Y13 = tm231;
   assign Y14 = t367;
   assign Y15 = {~(t368[31]), t368[30:0]};

    addfp32 add34893(.a(a109), .b(a110), .clk(clk), .out(t349), .enable(1'b1), .rst(reset));
    addfp32 add34908(.a(a111), .b(a112), .clk(clk), .out(t350), .enable(1'b1), .rst(reset));
    subfp32 sub34923(.a(a109), .b(a110), .clk(clk), .out(t351), .enable(1'b1), .rst(reset));
    subfp32 sub34938(.a(a111), .b(a112), .clk(clk), .out(t352), .enable(1'b1), .rst(reset));
    addfp32 add34969(.a(a117), .b(a118), .clk(clk), .out(t353), .enable(1'b1), .rst(reset));
    addfp32 add34984(.a(a119), .b(a120), .clk(clk), .out(t354), .enable(1'b1), .rst(reset));
    subfp32 sub34999(.a(a117), .b(a118), .clk(clk), .out(t355), .enable(1'b1), .rst(reset));
    subfp32 sub35014(.a(a119), .b(a120), .clk(clk), .out(t356), .enable(1'b1), .rst(reset));
    addfp32 add35073(.a(a125), .b(a126), .clk(clk), .out(t359), .enable(1'b1), .rst(reset));
    addfp32 add35088(.a(a127), .b(a128), .clk(clk), .out(t360), .enable(1'b1), .rst(reset));
    subfp32 sub35103(.a(a125), .b(a126), .clk(clk), .out(t361), .enable(1'b1), .rst(reset));
    subfp32 sub35118(.a(a127), .b(a128), .clk(clk), .out(t362), .enable(1'b1), .rst(reset));
    addfp32 add35150(.a(a133), .b(a134), .clk(clk), .out(t363), .enable(1'b1), .rst(reset));
    addfp32 add35165(.a(a135), .b(a136), .clk(clk), .out(t364), .enable(1'b1), .rst(reset));
    subfp32 sub35180(.a(a133), .b(a134), .clk(clk), .out(t365), .enable(1'b1), .rst(reset));
    subfp32 sub35195(.a(a135), .b(a136), .clk(clk), .out(t366), .enable(1'b1), .rst(reset));
    multfp32fp32 m35021(.a(tm0), .b(t355), .clk(clk), .out(a105), .enable(1'b1), .rst(reset));
    multfp32fp32 m35028(.a(tm0), .b(t356), .clk(clk), .out(a106), .enable(1'b1), .rst(reset));
    multfp32fp32 m35202(.a(tm0), .b(t366), .clk(clk), .out(a107), .enable(1'b1), .rst(reset));
    multfp32fp32 m35209(.a(tm0), .b(t365), .clk(clk), .out(a108), .enable(1'b1), .rst(reset));
    addfp32 add35035(.a(a105), .b(a106), .clk(clk), .out(t357), .enable(1'b1), .rst(reset));
    subfp32 sub35042(.a(a106), .b(a105), .clk(clk), .out(t358), .enable(1'b1), .rst(reset));
    subfp32 sub35216(.a(a107), .b(a108), .clk(clk), .out(t367), .enable(1'b1), .rst(reset));
    addfp32 add35223(.a(a108), .b(a107), .clk(clk), .out(t368), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm4 <= t349;
         tm23 <= t350;
         tm42 <= t351;
         tm61 <= t352;
         tm80 <= t353;
         tm99 <= t354;
         tm118 <= t359;
         tm137 <= t360;
         tm156 <= t362;
         tm175 <= {~(t361[31]), t361[30:0]};
         tm194 <= t363;
         tm213 <= t364;
         tm5 <= tm4;
         tm24 <= tm23;
         tm43 <= tm42;
         tm62 <= tm61;
         tm81 <= tm80;
         tm100 <= tm99;
         tm119 <= tm118;
         tm138 <= tm137;
         tm157 <= tm156;
         tm176 <= tm175;
         tm195 <= tm194;
         tm214 <= tm213;
         tm6 <= tm5;
         tm25 <= tm24;
         tm44 <= tm43;
         tm63 <= tm62;
         tm82 <= tm81;
         tm101 <= tm100;
         tm120 <= tm119;
         tm139 <= tm138;
         tm158 <= tm157;
         tm177 <= tm176;
         tm196 <= tm195;
         tm215 <= tm214;
         tm7 <= tm6;
         tm26 <= tm25;
         tm45 <= tm44;
         tm64 <= tm63;
         tm83 <= tm82;
         tm102 <= tm101;
         tm121 <= tm120;
         tm140 <= tm139;
         tm159 <= tm158;
         tm178 <= tm177;
         tm197 <= tm196;
         tm216 <= tm215;
         tm8 <= tm7;
         tm27 <= tm26;
         tm46 <= tm45;
         tm65 <= tm64;
         tm84 <= tm83;
         tm103 <= tm102;
         tm122 <= tm121;
         tm141 <= tm140;
         tm160 <= tm159;
         tm179 <= tm178;
         tm198 <= tm197;
         tm217 <= tm216;
         tm9 <= tm8;
         tm28 <= tm27;
         tm47 <= tm46;
         tm66 <= tm65;
         tm85 <= tm84;
         tm104 <= tm103;
         tm123 <= tm122;
         tm142 <= tm141;
         tm161 <= tm160;
         tm180 <= tm179;
         tm199 <= tm198;
         tm218 <= tm217;
         tm10 <= tm9;
         tm29 <= tm28;
         tm48 <= tm47;
         tm67 <= tm66;
         tm86 <= tm85;
         tm105 <= tm104;
         tm124 <= tm123;
         tm143 <= tm142;
         tm162 <= tm161;
         tm181 <= tm180;
         tm200 <= tm199;
         tm219 <= tm218;
         tm11 <= tm10;
         tm30 <= tm29;
         tm49 <= tm48;
         tm68 <= tm67;
         tm87 <= tm86;
         tm106 <= tm105;
         tm125 <= tm124;
         tm144 <= tm143;
         tm163 <= tm162;
         tm182 <= tm181;
         tm201 <= tm200;
         tm220 <= tm219;
         tm12 <= tm11;
         tm31 <= tm30;
         tm50 <= tm49;
         tm69 <= tm68;
         tm88 <= tm87;
         tm107 <= tm106;
         tm126 <= tm125;
         tm145 <= tm144;
         tm164 <= tm163;
         tm183 <= tm182;
         tm202 <= tm201;
         tm221 <= tm220;
         tm13 <= tm12;
         tm32 <= tm31;
         tm51 <= tm50;
         tm70 <= tm69;
         tm89 <= tm88;
         tm108 <= tm107;
         tm127 <= tm126;
         tm146 <= tm145;
         tm165 <= tm164;
         tm184 <= tm183;
         tm203 <= tm202;
         tm222 <= tm221;
         tm14 <= tm13;
         tm33 <= tm32;
         tm52 <= tm51;
         tm71 <= tm70;
         tm90 <= tm89;
         tm109 <= tm108;
         tm128 <= tm127;
         tm147 <= tm146;
         tm166 <= tm165;
         tm185 <= tm184;
         tm204 <= tm203;
         tm223 <= tm222;
         tm15 <= tm14;
         tm34 <= tm33;
         tm53 <= tm52;
         tm72 <= tm71;
         tm91 <= tm90;
         tm110 <= tm109;
         tm129 <= tm128;
         tm148 <= tm147;
         tm167 <= tm166;
         tm186 <= tm185;
         tm205 <= tm204;
         tm224 <= tm223;
         tm16 <= tm15;
         tm35 <= tm34;
         tm54 <= tm53;
         tm73 <= tm72;
         tm92 <= tm91;
         tm111 <= tm110;
         tm130 <= tm129;
         tm149 <= tm148;
         tm168 <= tm167;
         tm187 <= tm186;
         tm206 <= tm205;
         tm225 <= tm224;
         tm17 <= tm16;
         tm36 <= tm35;
         tm55 <= tm54;
         tm74 <= tm73;
         tm93 <= tm92;
         tm112 <= tm111;
         tm131 <= tm130;
         tm150 <= tm149;
         tm169 <= tm168;
         tm188 <= tm187;
         tm207 <= tm206;
         tm226 <= tm225;
         tm18 <= tm17;
         tm37 <= tm36;
         tm56 <= tm55;
         tm75 <= tm74;
         tm94 <= tm93;
         tm113 <= tm112;
         tm132 <= tm131;
         tm151 <= tm150;
         tm170 <= tm169;
         tm189 <= tm188;
         tm208 <= tm207;
         tm227 <= tm226;
         tm19 <= tm18;
         tm38 <= tm37;
         tm57 <= tm56;
         tm76 <= tm75;
         tm95 <= tm94;
         tm114 <= tm113;
         tm133 <= tm132;
         tm152 <= tm151;
         tm171 <= tm170;
         tm190 <= tm189;
         tm209 <= tm208;
         tm228 <= tm227;
         tm20 <= tm19;
         tm39 <= tm38;
         tm58 <= tm57;
         tm77 <= tm76;
         tm96 <= tm95;
         tm115 <= tm114;
         tm134 <= tm133;
         tm153 <= tm152;
         tm172 <= tm171;
         tm191 <= tm190;
         tm210 <= tm209;
         tm229 <= tm228;
         tm21 <= tm20;
         tm40 <= tm39;
         tm59 <= tm58;
         tm78 <= tm77;
         tm97 <= tm96;
         tm116 <= tm115;
         tm135 <= tm134;
         tm154 <= tm153;
         tm173 <= tm172;
         tm192 <= tm191;
         tm211 <= tm210;
         tm230 <= tm229;
         tm22 <= tm21;
         tm41 <= tm40;
         tm60 <= tm59;
         tm79 <= tm78;
         tm98 <= tm97;
         tm117 <= tm116;
         tm136 <= tm135;
         tm155 <= tm154;
         tm174 <= tm173;
         tm193 <= tm192;
         tm212 <= tm211;
         tm231 <= tm230;
      end
   end
endmodule

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

// Latency: 23
// Gap: 1
module codeBlock35245(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(22, 1) shiftFIFO_36581(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a33;
   wire signed [31:0] a34;
   wire signed [31:0] a35;
   wire signed [31:0] a36;
   wire signed [31:0] a41;
   wire signed [31:0] a42;
   wire signed [31:0] a43;
   wire signed [31:0] a44;
   wire signed [31:0] a49;
   wire signed [31:0] a50;
   wire signed [31:0] a51;
   wire signed [31:0] a52;
   wire signed [31:0] a57;
   wire signed [31:0] a58;
   wire signed [31:0] a59;
   wire signed [31:0] a60;
   wire  [31:0] t209;
   wire  [31:0] t210;
   wire  [31:0] t211;
   wire  [31:0] t212;
   wire  [31:0] t213;
   wire  [31:0] t214;
   wire  [31:0] t215;
   wire  [31:0] t216;
   wire  [31:0] t225;
   wire  [31:0] t226;
   wire  [31:0] t227;
   wire  [31:0] t228;
   wire  [31:0] t229;
   wire  [31:0] t230;
   wire  [31:0] t231;
   wire  [31:0] t232;
   wire  [31:0] t217;
   wire  [31:0] t218;
   wire  [31:0] t219;
   wire  [31:0] t220;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y8;
   wire signed [31:0] Y9;
   wire  [31:0] t221;
   wire  [31:0] t222;
   wire  [31:0] t223;
   wire  [31:0] t224;
   wire signed [31:0] Y4;
   wire signed [31:0] Y5;
   wire signed [31:0] Y12;
   wire signed [31:0] Y13;
   wire  [31:0] t233;
   wire  [31:0] t234;
   wire  [31:0] t235;
   wire  [31:0] t236;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;
   wire signed [31:0] Y10;
   wire signed [31:0] Y11;
   wire  [31:0] t237;
   wire  [31:0] t238;
   wire  [31:0] t239;
   wire  [31:0] t240;
   wire signed [31:0] Y6;
   wire signed [31:0] Y7;
   wire signed [31:0] Y14;
   wire signed [31:0] Y15;


   assign a33 = X0;
   assign a34 = X8;
   assign a35 = X1;
   assign a36 = X9;
   assign a41 = X4;
   assign a42 = X12;
   assign a43 = X5;
   assign a44 = X13;
   assign a49 = X2;
   assign a50 = X10;
   assign a51 = X3;
   assign a52 = X11;
   assign a57 = X6;
   assign a58 = X14;
   assign a59 = X7;
   assign a60 = X15;
   assign Y0 = t217;
   assign Y1 = t218;
   assign Y8 = t219;
   assign Y9 = t220;
   assign Y4 = t221;
   assign Y5 = t222;
   assign Y12 = t223;
   assign Y13 = t224;
   assign Y2 = t233;
   assign Y3 = t234;
   assign Y10 = t235;
   assign Y11 = t236;
   assign Y6 = t237;
   assign Y7 = t238;
   assign Y14 = t239;
   assign Y15 = t240;

    addfp32 add35257(.a(a33), .b(a34), .clk(clk), .out(t209), .enable(1'b1), .rst(reset));
    addfp32 add35272(.a(a35), .b(a36), .clk(clk), .out(t210), .enable(1'b1), .rst(reset));
    subfp32 sub35287(.a(a33), .b(a34), .clk(clk), .out(t211), .enable(1'b1), .rst(reset));
    subfp32 sub35302(.a(a35), .b(a36), .clk(clk), .out(t212), .enable(1'b1), .rst(reset));
    addfp32 add35317(.a(a41), .b(a42), .clk(clk), .out(t213), .enable(1'b1), .rst(reset));
    addfp32 add35332(.a(a43), .b(a44), .clk(clk), .out(t214), .enable(1'b1), .rst(reset));
    subfp32 sub35347(.a(a41), .b(a42), .clk(clk), .out(t215), .enable(1'b1), .rst(reset));
    subfp32 sub35362(.a(a43), .b(a44), .clk(clk), .out(t216), .enable(1'b1), .rst(reset));
    addfp32 add35465(.a(a49), .b(a50), .clk(clk), .out(t225), .enable(1'b1), .rst(reset));
    addfp32 add35480(.a(a51), .b(a52), .clk(clk), .out(t226), .enable(1'b1), .rst(reset));
    subfp32 sub35495(.a(a49), .b(a50), .clk(clk), .out(t227), .enable(1'b1), .rst(reset));
    subfp32 sub35510(.a(a51), .b(a52), .clk(clk), .out(t228), .enable(1'b1), .rst(reset));
    addfp32 add35525(.a(a57), .b(a58), .clk(clk), .out(t229), .enable(1'b1), .rst(reset));
    addfp32 add35540(.a(a59), .b(a60), .clk(clk), .out(t230), .enable(1'b1), .rst(reset));
    subfp32 sub35555(.a(a57), .b(a58), .clk(clk), .out(t231), .enable(1'b1), .rst(reset));
    subfp32 sub35570(.a(a59), .b(a60), .clk(clk), .out(t232), .enable(1'b1), .rst(reset));
    addfp32 add35369(.a(t209), .b(t213), .clk(clk), .out(t217), .enable(1'b1), .rst(reset));
    addfp32 add35376(.a(t210), .b(t214), .clk(clk), .out(t218), .enable(1'b1), .rst(reset));
    subfp32 sub35383(.a(t209), .b(t213), .clk(clk), .out(t219), .enable(1'b1), .rst(reset));
    subfp32 sub35390(.a(t210), .b(t214), .clk(clk), .out(t220), .enable(1'b1), .rst(reset));
    addfp32 add35413(.a(t211), .b(t216), .clk(clk), .out(t221), .enable(1'b1), .rst(reset));
    subfp32 sub35420(.a(t212), .b(t215), .clk(clk), .out(t222), .enable(1'b1), .rst(reset));
    subfp32 sub35427(.a(t211), .b(t216), .clk(clk), .out(t223), .enable(1'b1), .rst(reset));
    addfp32 add35434(.a(t212), .b(t215), .clk(clk), .out(t224), .enable(1'b1), .rst(reset));
    addfp32 add35577(.a(t225), .b(t229), .clk(clk), .out(t233), .enable(1'b1), .rst(reset));
    addfp32 add35584(.a(t226), .b(t230), .clk(clk), .out(t234), .enable(1'b1), .rst(reset));
    subfp32 sub35591(.a(t225), .b(t229), .clk(clk), .out(t235), .enable(1'b1), .rst(reset));
    subfp32 sub35598(.a(t226), .b(t230), .clk(clk), .out(t236), .enable(1'b1), .rst(reset));
    addfp32 add35621(.a(t227), .b(t232), .clk(clk), .out(t237), .enable(1'b1), .rst(reset));
    subfp32 sub35628(.a(t228), .b(t231), .clk(clk), .out(t238), .enable(1'b1), .rst(reset));
    subfp32 sub35635(.a(t227), .b(t232), .clk(clk), .out(t239), .enable(1'b1), .rst(reset));
    addfp32 add35642(.a(t228), .b(t231), .clk(clk), .out(t240), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule


module multfp32fp32(clk, enable, rst, a, b, out);
   input [31:0] a, b;
   output [31:0] out;
   input 	clk, enable, rst;

   wire signA, signB; 
   wire [7:0] expA, expB;
   wire [23:0] sigA, sigB;

   assign signA=b[31];
   assign expA=b[30:23];
   assign sigA={1'b1,b[22:0]};

   assign signB=a[31];
   assign expB=a[30:23];
   assign sigB={1'b1,a[22:0]};
   
   reg 	  signP_m0;
   reg [8:0] expP_m0;

   wire [47:0] mult_res0;
   
   
   multfxp24fxp24 mult(clk, enable, rst, sigA, sigB, mult_res0);

   reg 	       isNaN_a0, isNaN_b0, isZero_a0, isZero_b0, isInf_a0, isInf_b0;   

   wire        sigAZero, sigBZero;
   
   assign      sigAZero = (sigA[22:0] == 0);
   assign      sigBZero = (sigB[22:0] == 0);
      
   // stage 1 mult stage 1
   always@(posedge clk) if (enable) begin
      isNaN_a0 <= (expA == 8'hff) && !sigAZero;
      isNaN_b0 <= (expB == 8'hff) && !sigBZero;

      isZero_a0 <= (expA == 8'h00);
      isZero_b0 <= (expB == 8'h00);

      isInf_a0 <= (expA == 8'hff) && sigAZero;
      isInf_b0 <= (expB == 8'hff) && sigBZero;
      
      signP_m0<=signA!=signB;
      expP_m0<=expA + expB;
   end 

   reg signP_m1, zero_m1, inf_m1, nan_m1, under_m1;
   reg [8:0] expP_m1;

   // stage 2 mult stage 2
   always@(posedge clk) if (enable) begin
      zero_m1 <= isZero_a0 || isZero_b0;
      inf_m1 <= isInf_a0 || isInf_b0;
      nan_m1 <= isNaN_a0 || isNaN_b0;
      under_m1 <= (expP_m0 < 128);      
      
      signP_m1<=signP_m0;      
      expP_m1<=expP_m0 - 127;      
   end 

   reg signP_m2, zero_m2, inf_m2, nan_m2; 
   reg [8:0] expP_m2;

   // stage 3 mult stage 3
   always@(posedge clk) if (enable) begin
      zero_m2 <= zero_m1 || under_m1;
      inf_m2 <= (inf_m1 || (expP_m1[8] && ~under_m1));
      nan_m2 <= nan_m1 || (zero_m1 && inf_m1); // 0 * infty = NaN
            
      signP_m2<=signP_m1;      
      expP_m2<=expP_m1;
   end 

   reg signP_m3, zero_m3, inf_m3, nan_m3; 
   reg [8:0] expP_m3;

   // stage 4 mult stage 4
   always@(posedge clk) if (enable) begin
      zero_m3 <= zero_m2;
      inf_m3 <= (inf_m2 || (expP_m2 == 9'h0ff));
      nan_m3 <= nan_m2;
      
      signP_m3<=signP_m2;
      expP_m3<=expP_m2;
   end 

   reg signP_m4, zero_m4, inf_m4, nan_m4; 
   reg [8:0] expP_m4;

   // stage 5 mult stage 5
   always@(posedge clk) if (enable) begin
      zero_m4 <= zero_m3;
      inf_m4 <= inf_m3;
      nan_m4 <= nan_m3;
      
      signP_m4<=signP_m3;      
      expP_m4<=expP_m3;      
   end 

   reg signP_m5, zero_m5, inf_m5, nan_m5;
   reg [8:0] expP_m5;

   
   // stage 6 mult stage 6
   always@(posedge clk) if (enable) begin
      zero_m5 <= zero_m4;
      inf_m5 <= inf_m4;
      nan_m5 <= nan_m4;
      
      signP_m5<=signP_m4;      
      expP_m5 <= expP_m4;
      
   end

   reg signP_m6, zero_m6, inf_m6, nan_m6;   
   reg [8:0] expP_m6;
   reg [23:0] sig_m6;

   // stage 7 --  mult output here!
   // normalize product
   always@(posedge clk) if (enable) begin

      zero_m6 <= (zero_m5 || (mult_res0[47:23] == 0));
      nan_m6 <= nan_m5;      
      
      signP_m6<=signP_m5;      

      if (mult_res0[47] == 1'b1) begin
	 expP_m6<=expP_m5+1;
	 sig_m6 <= mult_res0[47:24];
	 inf_m6 <= (inf_m5 || (expP_m5 == 9'h0ff));	 
      end
      else begin
	 expP_m6 <= expP_m5;
	 sig_m6 <= mult_res0[46:23];
	 inf_m6 <= inf_m5;	 
      end	 
   end

   reg signP_m7;
   reg [7:0] expP_m7;
   reg [22:0] sig_m7;
   
   // stage 8: cleanup
   always@(posedge clk) if (enable) begin
      signP_m7 <= signP_m6;

      if (inf_m6 || nan_m6)
	expP_m7 <= 8'hff;
      else if (zero_m6)
	expP_m7 <= 8'h00;
      else
	expP_m7 <= expP_m6;

      if (nan_m6)
	sig_m7 <= 1;
      else if (zero_m6 || inf_m6)
	sig_m7 <= 0;
      else
	sig_m7 <= sig_m6[22:0];      
   end

   assign out = {signP_m7, expP_m7, sig_m7};   
   
endmodule


module multfxp24fxp24(clk, enable, rst, a, b, out);
        parameter WIDTH=24, CYCLES=6;
        input  [WIDTH-1:0]   a,b;
        output [2*WIDTH-1:0] out;
        input                clk, rst,enable;
        reg [2*WIDTH-1:0]    q[CYCLES-1:0];
        integer              i;

        assign               out = q[CYCLES-1];   

        always @(posedge clk) begin
                q[0] <= a * b;
                for (i = 1; i < CYCLES; i=i+1) begin
                        q[i] <= q[i-1];
                end
        end
endmodule 


module subfp32(clk, enable, rst,  a, b, out);

   input [31:0] a, b;
   output [31:0] out;
   input 	 clk, enable, rst;	

   addfp32 xyz(.clk(clk), .enable(enable), .rst(rst),  .a(a), .b(b^32'h80000000), .out(out));
endmodule

module addfp32(clk, enable, rst,  a, b, out);

   input [31:0] a, b;
   output [31:0] out;
   input 	 clk, enable, rst;	

   wire [7:0] expA;
   wire [23:0] sigA;

   assign expA=a[30:23];
   assign sigA={1'b1,a[22:0]};
	
   wire [7:0] expB;
   wire [23:0] sigB;

   assign expB=b[30:23];
   assign sigB={1'b1,b[22:0]};

   reg [31:0] Big, Small;
   reg [7:0] expDiff;

   // stage 1 swap A, B
   always@(posedge clk) if (enable) begin
     if (expA>expB) begin
	// A has larger exp
        Big<=a;
	     Small<=b;
        expDiff<=expA-expB;
     end else if (expA==expB) begin
        if (sigA>=sigB) begin
	  // A has larger sig
          Big<=a;
	       Small<=b;
          expDiff<=expA-expB;
        end else begin
          Small<=a;
	       Big<=b;
          expDiff<=expB-expA;
        end
     end else begin
        Small<=a;
        Big<=b;
        expDiff<=expB-expA;
     end
  end

  wire signBig; 
  wire [7:0] expBig;
  wire [23:0] sigBig;

  assign signBig=Big[31];
  assign expBig=Big[30:23];
  assign sigBig=(expBig!=0)?{1'b1,Big[22:0]}:0;

  wire signSmall; 
  wire [7:0] expSmall;
  wire [23:0] sigSmall;

  assign signSmall=Small[31];
  assign expSmall=Small[30:23];
  assign sigSmall=(expDiff[7:5]||(expSmall==0))?0:(expDiff[4]?{16'h0000,1'b1,Small[22:16]}:{1'b1,Small[22:0]});

  reg signSum_a0; 
  reg [7:0] expSum_a0;
  reg [23:0] sigBig_a0;
  reg [23:0] sigSmall_a0;
  reg [3:0] expDiff_a0;
  reg add_a0;

  // stage 2 align addend coarse part 1 
  always@(posedge clk) if (enable) begin
    signSum_a0<=signBig;
    expSum_a0<=expBig;
    sigBig_a0<=sigBig;
    sigSmall_a0<=sigSmall;
    expDiff_a0<=expDiff[3:0];
    add_a0<=signSmall==signBig;
  end

  reg signSum_a1; 
  reg [7:0] expSum_a1;
  reg [23:0] sigBig_a1;
  reg [23:0] sigSmall_a1;
  reg [1:0] expDiff_a1;
  reg add_a1;

  // stage 3  align addend fine part 2
  always@(posedge clk) if (enable) begin
    signSum_a1<=signSum_a0;
    expSum_a1<=expSum_a0;
    sigBig_a1<=sigBig_a0;
    expDiff_a1<=expDiff_a0;
    add_a1<=add_a0;

    if (expDiff_a0[3:2]==2'b11) begin
      sigSmall_a1<={12'h000,sigSmall_a0[23:12]};
    end else if (expDiff_a0[3:2]==2'b10) begin
      sigSmall_a1<={8'h00,sigSmall_a0[23:8]};
    end else if (expDiff_a0[3:2]==2'b01) begin
      sigSmall_a1<={4'h0,sigSmall_a0[23:4]};
    end else begin 
      sigSmall_a1<=sigSmall_a0;
    end
  end


  reg signSum_a2; 
  reg [7:0] expSum_a2;
  reg [23:0] sigBig_a2;
  reg [23:0] sigSmall_a2;
  reg add_a2;

  // stage 4  align addend finest part 3
  always@(posedge clk) if (enable) begin
    signSum_a2<=signSum_a1;
    expSum_a2<=expSum_a1;
    sigBig_a2<=sigBig_a1;
    add_a2<=add_a1;

    if (expDiff_a1[1:0]==2'b11) begin
      sigSmall_a2<={3'h0,sigSmall_a1[23:3]};
    end else if (expDiff_a1[1:0]==2'b10) begin
      sigSmall_a2<={2'h0,sigSmall_a1[23:2]};
    end else if (expDiff_a1[1:0]==2'b01) begin
      sigSmall_a2<={1'h0,sigSmall_a1[23:1]};
    end else begin 
      sigSmall_a2<=sigSmall_a1;
    end
  end

  reg signSum_s0; 
  reg [8:0] expSum_s0;
  reg [24:0] sigSum_s0;
  reg of_s0;

  // stage 5  do addition/substraction
  always@(posedge clk) if (enable) begin
    signSum_s0<=signSum_a2;
    expSum_s0<={1'b0,expSum_a2};
    of_s0<=(expSum_a2==8'hff)?1:0;

    if (add_a2) begin 
      sigSum_s0<={1'b0,sigBig_a2}+{1'b0,sigSmall_a2};
    end else begin
      sigSum_s0<={1'b0,sigBig_a2}-{1'b0,sigSmall_a2};
    end
  end


  reg signSum_n0; 
  reg [8:0] expSum_n0;
  reg [23:0] sigSum_n0;
  reg of_n0;
  
  // stage 6  renormalize after add
  always@(posedge clk) if (enable) begin
    signSum_n0<=signSum_s0;
    if (sigSum_s0[24] && (!of_s0)) begin
      expSum_n0<=expSum_s0+1;
      sigSum_n0<=sigSum_s0[24:1];
      of_n0<=(expSum_s0==9'h0fe);
    end else begin
      expSum_n0<=expSum_s0;
      sigSum_n0<=sigSum_s0[23:0];
      of_n0<=of_s0;
    end
  end 

  reg signSum_n1; 
  reg [8:0] expSum_n1;
  reg [23:0] sigSum_n1;
  reg of_n1;

  // stage 7  renormalized after subtract coarse
  always@(posedge clk) if (enable) begin
    signSum_n1<=signSum_n0;
    of_n1<=of_n0;    

    if (sigSum_n0[23:16]==8'h00) begin
      expSum_n1<=expSum_n0-8;
      sigSum_n1<={sigSum_n0[16:0],8'h00};
    end else begin
      expSum_n1<=expSum_n0;
      sigSum_n1<=sigSum_n0;
    end
  end 

  reg signSum_n2; 
  reg [8:0] expSum_n2;
  reg [23:0] sigSum_n2;
  reg of_n2;

  // stage 8  
  always@(posedge clk) if (enable) begin
    signSum_n2<=signSum_n1;
    of_n2<=of_n1;

    if (sigSum_n1[23:16]==8'h00) begin
      expSum_n2<=expSum_n1-8;
      sigSum_n2<={sigSum_n1[16:0],8'h00};
    end else begin
      expSum_n2<=expSum_n1;
      sigSum_n2<=sigSum_n1;
    end
  end 

  reg signSum_n3; 
  reg [8:0] expSum_n3;
  reg [23:0] sigSum_n3;
  reg of_n3;

  // stage 9  
  always@(posedge clk) if (enable) begin
    signSum_n3<=signSum_n2;
    of_n3<=of_n2;

    if (sigSum_n2[23:20]==4'h0) begin
      expSum_n3<=expSum_n2-4;
      sigSum_n3<={sigSum_n2[20:0],4'h0};
    end else begin
      expSum_n3<=expSum_n2;
      sigSum_n3<=sigSum_n2;
    end
  end 


  reg signSum_n4; 
  reg [8:0] expSum_n4;
  reg [23:0] sigSum_n4;
  reg of_n4;

  // stage 10  
  always@(posedge clk) if (enable) begin
    signSum_n4<=signSum_n3;
    of_n4<=of_n3;

    if (sigSum_n3[23:20]==4'h0) begin
      expSum_n4<=expSum_n3-4;
      sigSum_n4<={sigSum_n3[20:0],4'h0};
    end else if (sigSum_n3[23:21]==3'b000) begin
      expSum_n4<=expSum_n3-3;
      sigSum_n4<={sigSum_n3[21:0],3'h0};
    end else if (sigSum_n3[23:22]==2'b00) begin
      expSum_n4<=expSum_n3-2;
      sigSum_n4<={sigSum_n3[22:0],2'h0};
    end else if (sigSum_n3[23]==1'b0) begin
      expSum_n4<=expSum_n3-1;
      sigSum_n4<={sigSum_n3[22:0],1'h0};
    end else begin
      expSum_n4<=expSum_n3;
      sigSum_n4<=sigSum_n3;
    end
  end 

  reg signSum_f0; 
  reg [7:0] expSum_f0;
  reg [23:0] sigSum_f0;

  // stage 11 clean-up
  always@(posedge clk) if (enable) begin
    signSum_f0<=signSum_n4;

    if (of_n4) begin 
      expSum_f0<=8'hff;
      sigSum_f0<=0;
    end else if (expSum_n4[8]||(expSum_n4==0)||(sigSum_n4==0)) begin
      expSum_f0<=8'h00;
      sigSum_f0<=0;
    end else begin
      expSum_f0<=expSum_n4[7:0];
      sigSum_f0<=sigSum_n4;
    end
  end  

  assign out={signSum_f0, expSum_f0, sigSum_f0[22:0]};

endmodule
module addfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule
