import "primitives/core.fil";

comp GetExp<G: 1>(
   in: [G, G+1] 32
) -> (
   out: [G, G+1] 8,
) {
  exp := new Slice[32,30,23,8]<G>(in);
  out = exp.out;
}

comp GetMant<G: 1>(
   in: [G, G+1] 32
) -> (
   out: [G, G+1] 23,
) {
  exp := new Slice[32,22,0,23]<G>(in);
  out = exp.out;
}

comp GetResult<G: 1>(
   sign: [G, G+1] 1,
   exp: [G, G+1] 8,
   mant: [G, G+1] 23,
) -> (
   out: [G, G+1] 32,
) {
  sign_exp := new Concat[1, 8, 9]<G>(sign, exp);
  res := new Concat[9, 23, 32]<G>(sign_exp.out, mant);
  out = res.out;
}

comp IsOne<G: 1>(
   in: [G, G+1] 1,
) -> (
   out: [G, G+1] 1,
) {
  one := new Const[1, 1]<G>();
  eq := new Eq[1]<G>(in, one.out);
  out = eq.out;
}

comp ShiftRight23<G: 1>(
   in: [G, G+1] 23,
   amount: [G, G+1] 8,
) -> (
   out: [G, G+1] 23,
) {
  ext := new ZeroExtend[8, 23]<G>(amount);
  shr := new ShiftRight[23]<G>(in, ext.out);
  out = shr.out;
}

comp ShiftLeft24<G: 1>(
   in: [G, G+1] 24,
   amount: [G, G+1] 4,
) -> (
   out: [G, G+1] 24,
) {
  ext := new ZeroExtend[4, 24]<G>(amount);
  shl := new ShiftLeft[24]<G>(in, ext.out);
  out = shl.out;
}

// Computes out = {1'b1,in[22:1]};
comp NormInp<G: 1>(
   in: [G, G+1] 23,
) -> (
   out: [G, G+1] 23,
) {
  sl := new Slice[23, 22, 1, 22]<G>(in);
  one := new Const[1, 1]<G>();
  cat := new Concat[1, 22, 23]<G>(one.out, sl.out);
  out = cat.out;
}