import "primitives/core.fil";
import "primitives/fp-support.fil";

// Computes:
// out = |in[30:23] ? {1'b1,in[22:0]} : {1'b0,in[22:0]}
component ComputeOp<G>(
  @interface[G, G+1] go: 1,
  @[G, G+1] in: 32
) -> (
  @[G, G+1] out: 24,
) {
  exp := new Slice30_23<G>(in);
  mant := new Slice22_0<G>(in);

  exp_red := new ReduceOr[8]<G>(exp.out);
  zero_1 := new Const[1, 0]<G>();
  one_1 := new Const[1, 1]<G>();
  ext := new Mux[1]<G>(exp_red.out, one_1.out, zero_1.out);
  op := new Concat[1, 23, 24]<G>(ext.out, mant.out);

  out = op.out;
}

component GetResult<G>(
  @interface[G, G+1] go: 1,
  @[G, G+1] sign: 1,
  @[G, G+1] exp: 8,
  @[G, G+1] mant: 23,
) -> (
  @[G, G+1] out: 32,
) {
  sign_exp := new Concat[1, 8, 9]<G>(sign, exp);
  res := new Concat[9, 23, 32]<G>(sign_exp.out, mant);
  out = res.out;
}

component FP_Mult<G>(
  @interface[G, G+1] go: 1,
  @[G, G+1] a: 32,
  @[G, G+1] b: 32,
) -> (
  @[G, G+1] exception: 1,
  @[G, G+1] overflow: 1,
  @[G, G+1] underflow: 1,
  @[G, G+1] out: 32,
) {
  a31 := new Select[32, 31]<G>(a);
  b31 := new Select[32, 31]<G>(b);
  sign := new Xor[1]<G>(a31.out, b31.out);

  exp_a := new Slice30_23<G>(a);
  exp_b := new Slice30_23<G>(b);
  exp_a_and := new ReduceAnd[8]<G>(exp_a.out);
  exp_b_and := new ReduceAnd[8]<G>(exp_b.out);
  exception := new Or[1]<G>(exp_a_and.out, exp_b_and.out);

  op_a := new ComputeOp<G>(a);
  op_b := new ComputeOp<G>(b);

  op_a_ext := new ZeroExtend[24, 48]<G>(op_a.out);
  op_b_ext := new ZeroExtend[24, 48]<G>(op_b.out);
  product := new MultComb[48]<G>(op_a_ext.out, op_b_ext.out);

  normalized := new Select[48, 47]<G>(product.out);
  one_48 := new Const[48, 1]<G>();
  prod_shl := new ShiftLeft[48]<G>(product.out, one_48.out);
  product_normalized := new Mux[48]<G>(normalized.out, product.out, prod_shl.out);

  prod22_0 := new Slice[48, 22, 0, 23]<G>(product_normalized.out);
  round := new ReduceOr[23]<G>(prod22_0.out);
  prod_norm_23 := new Select[48, 23]<G>(product_normalized.out);
  round_sum := new And[1]<G>(round.out, prod_norm_23.out);
  round_sum_ext := new ZeroExtend[1, 23]<G>(round_sum.out);
  prod46_24 := new Slice[48, 46, 24, 23]<G>(product_normalized.out);
  product_mantissa := new Add[23]<G>(prod46_24.out, round_sum_ext.out);

  zero_23 := new Const[23, 0]<G>();
  one_1 := new Const[1, 1]<G>();
  zero_1 := new Const[1, 0]<G>();
  prod_mant_is_zero := new Eq[23]<G>(product_mantissa.out, zero_23.out);
  sel0 := new Mux[1]<G>(prod_mant_is_zero.out, one_1.out, zero_1.out);
  zero := new Mux[1]<G>(exception.out, zero_1.out, sel0.out);

  sum_exponent := new Add[8]<G>(exp_a.out, exp_b.out);
  normalized_ext := new ZeroExtend[1, 9]<G>(normalized.out);
  sub_v := new Const[8, 127]<G>();
  exp_norm := new Sub[8]<G>(sum_exponent.out, sub_v.out);
  exp_norm_ext := new ZeroExtend[8, 9]<G>(exp_norm.out);
  exponent := new Add[9]<G>(exp_norm_ext.out, normalized_ext.out);

  not_zero := new Not[1]<G>(zero.out);
  exp_8 := new Select[9, 8]<G>(exponent.out);
  exp_7 := new Select[9, 7]<G>(exponent.out);
  not_exp_7 := new Not[1]<G>(exp_7.out);

  overflow_1 := new And[1]<G>(exp_8.out, not_exp_7.out);
  overflow := new And[1]<G>(not_zero.out, overflow_1.out);

  underflow_1 := new And[1]<G>(exp_7.out, exp_8.out);
  underflow := new And[1]<G>(not_zero.out, underflow_1.out);

  over_max := new Const[8, 255]<G>();
  over_res := new GetResult<G>(sign.out, over_max.out, zero_23.out);

  zero_31 := new Const[31, 0]<G>();
  under_res := new Concat[1, 31, 32]<G>(sign.out, zero_31.out);

  exp_round := new Slice[9, 7, 0, 8]<G>(exponent.out);
  safe_res := new GetResult<G>(sign.out, exp_round.out, product_mantissa.out);

  zero_32 := new Const[32, 0]<G>();
  res_1 := new Mux[32]<G>(underflow.out, under_res.out, safe_res.out);
  res_2 := new Mux[32]<G>(overflow.out, over_res.out, res_1.out);
  res_3 := new Mux[32]<G>(zero.out, under_res.out, res_2.out);
  res := new Mux[32]<G>(exception.out, zero_32.out, res_3.out);

  out = res.out;
}
