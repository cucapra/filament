import "./iter-div.fil";

extern "iter-div.sv" {
  comp IterDiv[#W]<G: #W+1>(
      clk: 1,
      reset: 1,
      @interface[G] go: 1,
      @[G, G+1] left: #W,
      @[G, G+#W+1] right: #W,
  ) -> (
      @[G+#W+1, G+#W+2] out_remainder: #W,
      @[G+#W+1, G+#W+2] out_quotient: #W,
      @[G+#W+1, G+#W+2] done: 1
  ) where #W > 0;
}

comp main<G: 11>(
  @interface[G] go: 1,
  @[G, G+1] left: 8,
  @[G, G+9] right: 8,
) -> (
  @[G, G+1] comb_noshare: 8,
  @[G+9, G+10] verilog: 8,
  @[G+7, G+8] share: 8,
  @[G+7, G+8] pipe: 8,
) {
  d := new IterDiv[8]<G>(left, right);
  id := new CombNoShareIterDiv<G>(left, right);
  s := new ShareIterDiv<G>(left, right);
  pipe := new PipeIterDiv<G>(left, right);
  verilog = d.out_quotient;
  comb_noshare = id.quotient;
  share = s.quotient;
  pipe = pipe.quotient;
}