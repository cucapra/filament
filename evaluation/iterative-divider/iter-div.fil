import "primitives/core.fil";
import "base.fil";

comp CombNoShareIterDiv[#W]<G: 1>(
  @interface[G] go: 1,
  @[G, G+1] left: #W,
  @[G, G+1] right: #W,
) -> (
  @[G, G+1] quotient: #W
) where #W > 0 {
  bundle acc[#W+1]: for<#k> @[G, G+1] #W+1;
  bundle quotient_next[#W+1]: for<#k> @[G, G+1] #W;

  // Initialize the accumulator and quotient
  init := new Init[#W]<G>(left);
  acc{0} = init.acc;
  quotient_next{0} = init.quotient;

  for #i in 0..#W {
    s := new Next[#W]<G>(acc{#i}, right, quotient_next{#i});
    acc{#i+1} = s.acc_next;
    quotient_next{#i+1} = s.quotient_next;
  }

  quotient = quotient_next{#W};
}

/// An iterative divider that instantiates `I` circuits and reuses them for `K`
/// cycles.
/// At a high-level, we use two sets of bundles
///  1. Bundles that track the "outer" signals which forward signals between the reused instances.
///  2. Bundles that track the "inner" signals which "loop back" the signals into the reused instances.
comp TradeoffDiv[#W, #I, #K]<G: #K>(
  @interface[G] go: 1,
  @[G, G+1] left: #W,
  @[G, G+1] right: #W,
) -> (
  @[G+#W, G+#W+1] out: #W,
) where
  #I > 0,
  #K > 0,
  #W == #I * #K
{

    /// Bundles that track the "outer" signals which connect each reused instance in the circuit.
    bundle o_acc[#I+1]: for<#a> @[G+#a*#K, G+#a*#K+1] #W+1;
    bundle o_qn [#I+1]: for<#a> @[G+#a*#K, G+#a*#K+1] #W;
    bundle o_r  [#I+1]: for<#a> @[G+#a*#K, G+#a*#K+1] #W;

    i := new Init[#W]<G>(left);
    o_acc{0} = i.acc;
    o_qn{0} = i.quotient;
    o_r{0} = right;

    for #i in 0..#I {
        // Instantiate the I'th circuit
        N := new Next[#W];
        Acc := new Delay[#W+1];
        QN := new Delay[#W];
        R := new Delay[#W];

        // Bundles to forward data
        // Each bundle starts at time #K*#i which represents the previous
        // computations that have already occurred.
        bundle acc[#K+1]: for<#a> @[G+(#K*#i)+#a, G+(#K*#i)+#a+1] #W+1;
        bundle qn [#K+1]: for<#a> @[G+(#K*#i)+#a, G+(#K*#i)+#a+1] #W;
        bundle r  [#K+1]: for<#a> @[G+(#K*#i)+#a, G+(#K*#i)+#a+1] #W;

        acc{0} = o_acc{#i};
        qn{0} = o_qn{#i};
        r{0} = o_r{#i};

        // Loop back the computation into the same circuit for K cycles.
        for #j in 0..#K {
            s := N<G+(#K*#i)+#j>(acc{#j}, r{#j}, qn{#j});
            acc_reg := Acc<G+(#K*#i)+#j>(s.acc_next);
            qn_reg := QN<G+(#K*#i)+#j>(s.quotient_next);
            r_reg := R<G+(#K*#i)+#j>(r{#j});
            acc{#j+1} = acc_reg.out;
            qn{#j+1} = qn_reg.out;
            r{#j+1} = r_reg.out;
        }

        // Forward signals from the final reuse to the next circuit.
        o_acc{#i+1} = acc{#K};
        o_qn{#i+1} = qn{#K};
        o_r{#i+1} = r{#K};
    }

    out = o_qn{#I};
}

/// An iterative divider that uses exactly one `Next` circuit and shares it over W cycles.
comp ShareIterDiv[#W]<G: #W>(
  @interface[G] go: 1,
  @[G, G+1] left: #W,
  @[G, G+1] right: #W,
) -> (
  @[G+#W, G+#W+1] quotient: #W
) where #W > 0 {
  td := new TradeoffDiv[#W, 1, #W]<G>(left, right);
  quotient = td.out;
}

/// An iterative divider that uses W `Next` circuits and does not share them.
comp PipeIterDiv[#W]<G: 1>(
  @interface[G] go: 1,
  @[G, G+1] left: #W,
  @[G, G+1] right: #W,
) -> (
  @[G+#W, G+#W+1] quotient: #W
) where #W > 0 {
  td := new TradeoffDiv[#W, #W, 1]<G>(left, right);
  quotient = td.out;
}

