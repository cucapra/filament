//! Defines the schema for a tool configuration file
use serde::Serialize;
use std::path::PathBuf;

#[derive(Clone, Debug, Serialize)]
/// A tool that can generate external modules for Filament
pub struct Tool {
    /// The name of the tool
    pub name: String,
    /// Location of the tool binary
    pub path: PathBuf,
    /// Definitions of modules
    pub modules: Vec<Module>,
}

#[derive(Clone, Debug, Serialize)]
/// A module that can be generated by a tool
pub struct Module {
    /// The name of the module
    pub name: String,
    /// The parameters used in the module
    pub params: Vec<String>,
    /// Format string for generating the name of the module from the parameters
    pub name_format: String,
    /// Format string to invoke the tool
    pub cli_format: String,
}

impl Module {
    /// Substitutes the parameter values in the format string.
    /// A parameter of the form $param is replaced with the value of the
    /// parameter.
    /// If a mentioned parameter does not have a value, the function returns an
    /// error with the name of missing parameter.
    fn subst_params(
        fmt_string: String,
        params: &[(String, String)],
    ) -> Result<String, String> {
        let mut result = String::new();
        let mut chars = fmt_string.chars();
        while let Some(c) = chars.next() {
            if c == '$' {
                let mut param = String::new();
                while let Some(c) = chars.next() {
                    if c.is_alphanumeric() {
                        param.push(c);
                    } else {
                        break;
                    }
                }
                if param.is_empty() {
                    return Err("Expected parameter name after $".to_string());
                }
                if let Some(val) = params.iter().find_map(|(p, val)| {
                    if p == &param {
                        Some(val)
                    } else {
                        None
                    }
                }) {
                    result.push_str(&val.to_string());
                } else {
                    return Err(format!("Unknown parameter {}", param));
                }
            } else {
                result.push(c);
            }
        }
        Ok(result)
    }

    /// The generated name for a tool invocation with specific values of the parameters
    pub fn name(&self, params: &[(String, String)]) -> Result<String, String> {
        Self::subst_params(self.name_format.clone(), params)
    }

    /// The CLI call for a tool invocation with specific values of the parameters
    pub fn cli(&self, params: &[(String, String)]) -> Result<String, String> {
        Self::subst_params(self.cli_format.clone(), params)
    }
}
