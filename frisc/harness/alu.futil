import "../filament/frisc/harness/primitives.futil";

component ALU<"nointerface"=1>(@data inA: 32, @data inB: 32, @data funct: 8, @data isAdd: 1, @data isArith: 1, @clk clk: 1, @reset reset: 1) -> (@data out: 32) {
  cells {
    @data ONECONST_1B = Const(1, 1);
    @data ONECONST_33B = Const(33, 1);
    @data ZEROCONST_1B = Const(1, 0);
    @data NOTINB = Not(32);
    @data CONCAT0 = Concat(1, 32, 33);
    @data CONCAT1 = Concat(1, 32, 33);
    @data INA31 = Select(32, 31);
    @data INB31 = Select(32, 31);
    @data ADD0 = Add(33);
    @data ALUMINUS = Add(33);
    @data SUB = Slice(33, 31, 0, 32);
    @data ADD = Add(32);
    @data SELADDSUB = Mux(32);
    @data SHAMT = Slice(32, 4, 0, 5);
    @data SHAMT_EXT = ZeroExtend(5, 32);
    @data XOR = Xor(32);
    @data OR = Or(32);
    @data AND = And(32);
    @data SR = RightShifter_32();
    @data SLL = ShiftLeft(32);
    @data ALUMINUS32 = Select(33, 32);
    @data LTGUARD = Xor(1);
    @data LTTERNARY = Mux(1);
    @data LT = ZeroExtend(1, 32);
    @data LTU = ZeroExtend(1, 32);
    @data MUX = OneHotMux(32);
  }
  wires {
    NOTINB.in = inB;
    CONCAT0.left = ONECONST_1B.out;
    CONCAT0.right = NOTINB.out;
    CONCAT1.left = ZEROCONST_1B.out;
    CONCAT1.right = inA;
    INA31.in = inA;
    INB31.in = inB;
    ADD0.left = CONCAT0.out;
    ADD0.right = CONCAT1.out;
    ALUMINUS.left = ADD0.out;
    ALUMINUS.right = ONECONST_33B.out;
    SUB.in = ALUMINUS.out;
    ADD.left = inA;
    ADD.right = inB;
    SELADDSUB.sel = isAdd;
    SELADDSUB.in0 = ADD.out;
    SELADDSUB.in1 = SUB.out;
    SHAMT.in = inB;
    SHAMT_EXT.in = SHAMT.out;
    XOR.left = inA;
    XOR.right = inB;
    OR.left = inA;
    OR.right = inB;
    AND.left = inA;
    AND.right = inB;
    SR.in = inA;
    SR.shamt = SHAMT_EXT.out;
    SR.isArith = isArith;
    SLL.in = inA;
    SLL.shift = inB;
    ALUMINUS32.in = ALUMINUS.out;
    LTGUARD.left = INA31.out;
    LTGUARD.right = INB31.out;
    LTTERNARY.sel = LTGUARD.out;
    LTTERNARY.in0 = INA31.out;
    LTTERNARY.in1 = ALUMINUS32.out;
    LT.in = LTTERNARY.out;
    LTU.in = ALUMINUS32.out;
    MUX.sel = funct;
    MUX.in0 = SELADDSUB.out;
    MUX.in1 = SLL.out;
    MUX.in2 = LT.out;
    MUX.in3 = LTU.out;
    MUX.in4 = XOR.out;
    MUX.in5 = SR.out;
    MUX.in6 = OR.out;
    MUX.in7 = AND.out;
    out = MUX.out;
  }

  control {}
}
