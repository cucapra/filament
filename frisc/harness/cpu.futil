import "../filament/frisc/harness/decode.futil";
import "../filament/frisc/harness/alu.futil";
//import "../filament/frisc/harness/regfile.futil";

component CPU<"nointerface"=1>(@reset @data reset: 1, @data instr: 32, @clk clk: 1) -> (@data out: 32, @data aluInA: 32, @data aluInB: 32) {
  cells {
    @data RD = Slice(32, 11, 7, 5);
    @data RS1 = Slice(32, 19, 15, 5);
    @data RS2 = Slice(32, 24, 20, 5);
    @data DECODER = Decode();
    @data RF = RegFile();
    @data ALUINBGUARD = Or(1);
    @data ALUINB = Mux(32);
    @data ALU = ALU();
  }
  wires {
    RD.in = instr;
    RS1.in = instr;
    RS2.in = instr;
    DECODER.instr = instr;
    RF.reset = reset;
    RF.en = DECODER.rf_write;
    RF.rd = RD.out;
    RF.data = ALU.out;
    RF.rin1 = RS1.out;
    RF.rin2 = RS2.out;
    ALUINBGUARD.left = DECODER.isBranch;
    ALUINBGUARD.right = DECODER.isALUReg;
    ALUINB.sel = ALUINBGUARD.out;
    ALUINB.in0 = RF.rs2;
    ALUINB.in1 = DECODER.Iimm;
    ALU.inA = RF.rs1;
    ALU.inB = ALUINB.out;
    ALU.funct = DECODER.funct;
    ALU.isAdd = DECODER.isAdd;
    ALU.isArith = DECODER.isArith;
    out = ALU.out;
    aluInA = RF.rs1;
    aluInB = ALUINB.out;
  }

  control {}
}
