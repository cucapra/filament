import "../filament/frisc/harness/primitives.futil";

component Decode<"nointerface"=1>(@data instr: 32, @clk clk: 1, @reset reset: 1) -> (@data isLoad: 1, @data isStore: 1, @data isALUImm: 1, @data isALUReg: 1, @data isLUI: 1, @data isJAL: 1, @data isJALR: 1, @data isBranch: 1, @data isSys: 1, @data isAUIPC: 1, @data Uimm: 32, @data Iimm: 32, @data Simm: 32, @data Bimm: 32, @data Jimm: 32, @data funct: 8, @data isAdd: 1, @data isArith: 1, @data rf_write: 1) {
  cells {
    @data OPCODE = Slice(32, 6, 2, 5);
    @data INSTR30 = Select(32, 30);
    @data INSTR5 = Select(32, 5);
    @data ISSUB = And(1);
    @data NOTSUB = Not(1);
    @data INSTR14_12 = Slice(32, 14, 12, 3);
    @data INSTR14_12EXT = ZeroExtend(3, 8);
    @data ONECONST = Const(8, 1);
    @data SHIFT = ShiftLeft(8);
    @data LOADCONST = Const(5, 0);
    @data LOADEQ = Eq(5);
    @data STORECONST = Const(5, 8);
    @data STOREEQ = Eq(5);
    @data ALUIMMCONST = Const(5, 4);
    @data ALUIMMEQ = Eq(5);
    @data ALUREGCONST = Const(5, 12);
    @data ALUREGEQ = Eq(5);
    @data LUICONST = Const(5, 13);
    @data LUIEQ = Eq(5);
    @data JALCONST = Const(5, 27);
    @data JALEQ = Eq(5);
    @data JALRCONST = Const(5, 25);
    @data JALREQ = Eq(5);
    @data BRANCHCONST = Const(5, 24);
    @data BRANCHEQ = Eq(5);
    @data SYSCONST = Const(5, 28);
    @data SYSEQ = Eq(5);
    @data AUICONST = Const(5, 5);
    @data AUIEQ = Eq(5);
    @data BRANCHORSTORE = Or(1);
    @data NOTBRANCHORSTORE = Not(1);
    @data ZEROCONST = Const(1, 0);
    @data INSTR0 = Select(32, 0);
    @data INSTR31 = Select(32, 31);
    @data INSTR30_20 = Slice(32, 30, 20, 11);
    @data INSTR19_12 = Slice(32, 19, 12, 8);
    @data UIMM11_0 = Extend(1, 12);
    @data UIMM31_20 = Concat(1, 11, 12);
    @data UIMM19_0 = Concat(8, 12, 20);
    @data UIMM31_0 = Concat(12, 20, 32);
    @data JIMM31_20 = Extend(1, 12);
    @data INSTR20 = Select(32, 20);
    @data INSTR30_25 = Slice(32, 30, 25, 6);
    @data INSTR24_21 = Slice(32, 24, 21, 4);
    @data JIMM31_12 = Concat(12, 8, 20);
    @data JIMM11_5 = Concat(1, 6, 7);
    @data JIMM4_0 = Concat(4, 1, 5);
    @data JIMM31_5 = Concat(20, 7, 27);
    @data JIMM31_0 = Concat(27, 5, 32);
    @data INSTR11_8 = Slice(32, 11, 8, 4);
    @data INSTR7 = Select(32, 7);
    @data SIMM31_11 = Extend(1, 21);
    @data SIMM31_5 = Concat(21, 6, 27);
    @data SIMM4_0 = Concat(4, 1, 5);
    @data SIMM31_0 = Concat(27, 5, 32);
    @data BIMM31_12 = Extend(1, 20);
    @data BIMM31_11 = Concat(20, 1, 21);
    @data BIMM10_1 = Concat(6, 4, 10);
    @data BIMM31_1 = Concat(21, 10, 31);
    @data BIMM31_0 = Concat(31, 1, 32);
    @data IIMM31_11 = Extend(1, 21);
    @data IIMM31_5 = Concat(21, 6, 27);
    @data IIMM4_0 = Concat(4, 1, 5);
    @data IIMM31_0 = Concat(27, 5, 32);
  }
  wires {
    OPCODE.in = instr;
    INSTR30.in = instr;
    INSTR5.in = instr;
    ISSUB.left = INSTR30.out;
    ISSUB.right = INSTR5.out;
    NOTSUB.in = ISSUB.out;
    isAdd = NOTSUB.out;
    isArith = INSTR30.out;
    INSTR14_12.in = instr;
    INSTR14_12EXT.in = INSTR14_12.out;
    SHIFT.in = ONECONST.out;
    SHIFT.shift = INSTR14_12EXT.out;
    funct = SHIFT.out;
    LOADEQ.left = OPCODE.out;
    LOADEQ.right = LOADCONST.out;
    isLoad = LOADEQ.out;
    STOREEQ.left = OPCODE.out;
    STOREEQ.right = STORECONST.out;
    isStore = STOREEQ.out;
    ALUIMMEQ.left = OPCODE.out;
    ALUIMMEQ.right = ALUIMMCONST.out;
    isALUImm = ALUIMMEQ.out;
    ALUREGEQ.left = OPCODE.out;
    ALUREGEQ.right = ALUREGCONST.out;
    isALUReg = ALUREGEQ.out;
    LUIEQ.left = OPCODE.out;
    LUIEQ.right = LUICONST.out;
    isLUI = LUIEQ.out;
    JALEQ.left = OPCODE.out;
    JALEQ.right = JALCONST.out;
    isJAL = JALEQ.out;
    JALREQ.left = OPCODE.out;
    JALREQ.right = JALRCONST.out;
    isJALR = JALREQ.out;
    BRANCHEQ.left = OPCODE.out;
    BRANCHEQ.right = BRANCHCONST.out;
    isBranch = BRANCHEQ.out;
    SYSEQ.left = OPCODE.out;
    SYSEQ.right = SYSCONST.out;
    isSys = SYSEQ.out;
    AUIEQ.left = OPCODE.out;
    AUIEQ.right = AUICONST.out;
    isAUIPC = AUIEQ.out;
    BRANCHORSTORE.left = BRANCHEQ.out;
    BRANCHORSTORE.right = STOREEQ.out;
    NOTBRANCHORSTORE.in = BRANCHORSTORE.out;
    rf_write = NOTBRANCHORSTORE.out;
    INSTR0.in = instr;
    INSTR31.in = instr;
    INSTR30_20.in = instr;
    INSTR19_12.in = instr;
    UIMM11_0.in = ZEROCONST.out;
    UIMM31_20.left = INSTR31.out;
    UIMM31_20.right = INSTR30_20.out;
    UIMM19_0.left = INSTR19_12.out;
    UIMM19_0.right = UIMM11_0.out;
    UIMM31_0.left = UIMM31_20.out;
    UIMM31_0.right = UIMM19_0.out;
    Uimm = UIMM31_0.out;
    JIMM31_20.in = INSTR31.out;
    INSTR20.in = instr;
    INSTR30_25.in = instr;
    INSTR24_21.in = instr;
    JIMM31_12.left = JIMM31_20.out;
    JIMM31_12.right = INSTR19_12.out;
    JIMM11_5.left = INSTR20.out;
    JIMM11_5.right = INSTR30_25.out;
    JIMM4_0.left = INSTR24_21.out;
    JIMM4_0.right = ZEROCONST.out;
    JIMM31_5.left = JIMM31_12.out;
    JIMM31_5.right = JIMM11_5.out;
    JIMM31_0.left = JIMM31_5.out;
    JIMM31_0.right = JIMM4_0.out;
    Jimm = JIMM31_0.out;
    INSTR11_8.in = instr;
    INSTR7.in = instr;
    SIMM31_11.in = INSTR31.out;
    SIMM31_5.left = SIMM31_11.out;
    SIMM31_5.right = INSTR30_25.out;
    SIMM4_0.left = INSTR11_8.out;
    SIMM4_0.right = INSTR7.out;
    SIMM31_0.left = SIMM31_5.out;
    SIMM31_0.right = SIMM4_0.out;
    Simm = SIMM31_0.out;
    BIMM31_12.in = INSTR31.out;
    BIMM31_11.left = BIMM31_12.out;
    BIMM31_11.right = INSTR7.out;
    BIMM10_1.left = INSTR30_25.out;
    BIMM10_1.right = INSTR11_8.out;
    BIMM31_1.left = BIMM31_11.out;
    BIMM31_1.right = BIMM10_1.out;
    BIMM31_0.left = BIMM31_1.out;
    BIMM31_0.right = ZEROCONST.out;
    Bimm = BIMM31_0.out;
    IIMM31_11.in = INSTR31.out;
    IIMM31_5.left = IIMM31_11.out;
    IIMM31_5.right = INSTR30_25.out;
    IIMM4_0.left = INSTR24_21.out;
    IIMM4_0.right = INSTR20.out;
    IIMM31_0.left = IIMM31_5.out;
    IIMM31_0.right = IIMM4_0.out;
    Iimm = IIMM31_0.out;
  }

  control {}
}
