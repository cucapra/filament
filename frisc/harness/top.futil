import "../filament/frisc/harness/cpu.futil";
import "primitives/core.futil";
import "primitives/memories.futil";

component main () -> (out:32) {
  cells {
    @external iram = seq_mem_d1(32,5,32);
    @external res = seq_mem_d1(32,5,32);
    @data cpu = CPU();

    pc = std_reg(32);
    pc_adder = std_add(32);

    lt_cond = std_lt(32);
    add_cond = std_add(32);
  }
  wires {
    group init {
      pc.in = 32'd0;
      pc.write_en = 1'd1;
      init[done] = pc.done;
    }

    group read_iram {
      iram.addr0 = pc.out;
      iram.read_en = 1'b1;
      cpu.instr = iram.read_data;
      read_iram[done] = iram.read_done ? 1'b1;
    }

    group inc_counter {
      add_cond.left = pc.out;
      add_cond.right = 32'd1;
      pc.in = add_cond.out;
      pc.write_en = 1'd1;
      inc_counter[done] = pc.done ? 1'd1;
    }

    comb group cond {
      lt_cond.left = pc.out;
      lt_cond.right = 32'd5;
    }

    group write_res {
      res.addr0 = pc.out;
      res.write_data = cpu.out;
      res.write_en = 1'b1;
      write_res[done] = res.write_done ? 1'd1;
    }

  }
  control {
    seq {
      init;
      while lt_cond.out with cond {
        seq {
          read_iram;
          write_res;
          inc_counter;
        }
      }
    }
  }
}