import "frisc.futil";
import "primitives/memories.futil";

component main () -> (out:32) {
  cells {
    @external iram = seq_mem_d1(32,6,32);
    @external res = seq_mem_d1(32,6,32);
    cpu = CPU();
    dram = StdMem1D(32,256,32);

    pc_reg = std_reg(32);
  }
  wires {
    static<1> group init {
      pc_reg.in = 32'd0;
      pc_reg.write_en = 1'b1;
    }

    static<1> group read_iram {
      iram.addr0 = cpu.pc;
      iram.read_en = 1'b1;
      cpu.instr = iram.read_data;
      cpu.dataIn = dram.read_data;
      dram.addr0 = cpu.memAddr;
      dram.write_data = cpu.memData;
      dram.write_en = cpu.isStore;
    }

    static<1> group write_res {
      res.addr0 = pc_reg.out;
      res.write_data = cpu.out;
      res.write_en = %0 ? 1'd1;
    }

    static<1> group reg_pc {
      pc_reg.in = cpu.pc;
      pc_reg.write_en = 1'd1;
    }

    cpu.pcin = cpu.nextpc;
  }
  control {
    static seq {
      init;
      static repeat 6 {
        static par {
          read_iram;
          write_res;
          reg_pc;
        } 
      }
    }
  }
}