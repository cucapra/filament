import "primitives/core.fil";

// extra components to make things simpler to write
extern "extras.sv" {
  comp OneHotMux[#WIDTH]<G:L-(G),?L:1=G+1>(
    @[G,L] sel:8,
    @[G,L] in0: #WIDTH,
    @[G,L] in1: #WIDTH,
    @[G,L] in2: #WIDTH,
    @[G,L] in3: #WIDTH,
    @[G,L] in4: #WIDTH,
    @[G,L] in5: #WIDTH,
    @[G,L] in6: #WIDTH,
    @[G,L] in7: #WIDTH
  ) -> (
    @[G,L] out: #WIDTH
  ) where L > G, #WIDTH > 0;

  comp RightShifter[#WIDTH]<G:L-(G),?L:1=G+1>(
    @[G,L] in: #WIDTH,
    @[G,L] shamt: 5,
    @[G,L] isArith:1
  ) -> (
    @[G,L] out:#WIDTH
  ) where L > G, #WIDTH > 0;
}

comp Ternary[#WIDTH]<G:1>(
  @[G,G+1] guard:1,
  @[G,G+1] opTrue: #WIDTH,
  @[G,G+1] opFalse: #WIDTH
) -> (
  @[G,G+1] out: #WIDTH
) where #WIDTH > 0 {
  guardExt := new Extend[1, #WIDTH]<G>(guard);
  notGuardExt := new Not[#WIDTH]<G>(guardExt.out);

  // guard is 1 -> opTrue
  // guard is 0 -> opFalse
  and0 := new And[#WIDTH]<G>(opTrue, guardExt.out);
  and1 := new And[#WIDTH]<G>(opFalse, notGuardExt.out);
  or0 := new Or[#WIDTH]<G>(and0.out, and1.out);
  out = or0.out;
}