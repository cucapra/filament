/* Generated by Yosys 0.22+29 (git sha1 2e837956d, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os) */

module top(clk, my_pipeline_x, my_pipeline_y, my_pipeline_return_output);
  input clk;
  wire clk;
  output [31:0] my_pipeline_return_output;
  wire [31:0] my_pipeline_return_output;
  input [31:0] my_pipeline_x;
  wire [31:0] my_pipeline_x;
  input [31:0] my_pipeline_y;
  wire [31:0] my_pipeline_y;
  my_pipeline_6clk_a1ef0e6d my_pipeline_6clk_a1ef0e6d (
    .clk(clk),
    .return_output(my_pipeline_return_output),
    .x(my_pipeline_x),
    .y(my_pipeline_y)
  );
endmodule


module bin_op_eq_uint10_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [32:0] \3186.read_pipe ;
  input [9:0] left;
  wire [9:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 9'h000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3186.read_pipe  = { left, right, 22'hzzzzzz };
endmodule

module bin_op_eq_uint11_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [35:0] \3224.read_pipe ;
  input [10:0] left;
  wire [10:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 10'h000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3224.read_pipe  = { left, right, 24'hzzzzzz };
endmodule

module bin_op_eq_uint12_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [38:0] \3262.read_pipe ;
  input [11:0] left;
  wire [11:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 11'h000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3262.read_pipe  = { left, right, 26'hzzzzzzz };
endmodule

module bin_op_eq_uint13_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [41:0] \3300.read_pipe ;
  input [12:0] left;
  wire [12:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 12'h000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3300.read_pipe  = { left, right, 28'hzzzzzzz };
endmodule

module bin_op_eq_uint14_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [44:0] \3338.read_pipe ;
  input [13:0] left;
  wire [13:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 13'h0000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3338.read_pipe  = { left, right, 30'hzzzzzzzz };
endmodule

module bin_op_eq_uint15_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [47:0] \3376.read_pipe ;
  input [14:0] left;
  wire [14:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 14'h0000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3376.read_pipe  = { left, right, 32'hzzzzzzzz };
endmodule

module bin_op_eq_uint16_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [50:0] \3414.read_pipe ;
  input [15:0] left;
  wire [15:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 15'h0000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3414.read_pipe  = { left, right, 34'hzzzzzzzzz };
endmodule

module bin_op_eq_uint17_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [53:0] \3452.read_pipe ;
  input [16:0] left;
  wire [16:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 16'h0000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3452.read_pipe  = { left, right, 36'hzzzzzzzzz };
endmodule

module bin_op_eq_uint18_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [56:0] \3490.read_pipe ;
  input [17:0] left;
  wire [17:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 17'h00000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3490.read_pipe  = { left, right, 38'hzzzzzzzzzz };
endmodule

module bin_op_eq_uint19_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [59:0] \3528.read_pipe ;
  input [18:0] left;
  wire [18:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 18'h00000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3528.read_pipe  = { left, right, 40'hzzzzzzzzzz };
endmodule

module bin_op_eq_uint1_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [5:0] \2785.read_pipe ;
  input left;
  wire left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == right;
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \2785.read_pipe  = { left, right, 4'hz };
endmodule

module bin_op_eq_uint20_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [62:0] \3566.read_pipe ;
  input [19:0] left;
  wire [19:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 19'h00000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3566.read_pipe  = { left, right, 42'hzzzzzzzzzzz };
endmodule

module bin_op_eq_uint21_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [65:0] \3604.read_pipe ;
  input [20:0] left;
  wire [20:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 20'h00000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3604.read_pipe  = { left, right, 44'hzzzzzzzzzzz };
endmodule

module bin_op_eq_uint22_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [68:0] \3642.read_pipe ;
  input [21:0] left;
  wire [21:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 21'h000000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3642.read_pipe  = { left, right, 46'hzzzzzzzzzzzz };
endmodule

module bin_op_eq_uint23_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [71:0] \3680.read_pipe ;
  input [22:0] left;
  wire [22:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 22'h000000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3680.read_pipe  = { left, right, 48'hzzzzzzzzzzzz };
endmodule

module bin_op_eq_uint24_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [74:0] \3718.read_pipe ;
  input [23:0] left;
  wire [23:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 23'h000000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3718.read_pipe  = { left, right, 50'hzzzzzzzzzzzzz };
endmodule

module bin_op_eq_uint25_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [77:0] \3756.read_pipe ;
  input [24:0] left;
  wire [24:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 24'h000000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3756.read_pipe  = { left, right, 52'hzzzzzzzzzzzzz };
endmodule

module bin_op_eq_uint26_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [80:0] \3794.read_pipe ;
  input [25:0] left;
  wire [25:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 25'h0000000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3794.read_pipe  = { left, right, 54'hzzzzzzzzzzzzzz };
endmodule

module bin_op_eq_uint27_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [83:0] \3832.read_pipe ;
  input [26:0] left;
  wire [26:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 26'h0000000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3832.read_pipe  = { left, right, 56'hzzzzzzzzzzzzzz };
endmodule

module bin_op_eq_uint28_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [86:0] \3870.read_pipe ;
  input [27:0] left;
  wire [27:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 27'h0000000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3870.read_pipe  = { left, right, 58'hzzzzzzzzzzzzzzz };
endmodule

module bin_op_eq_uint29_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [89:0] \3908.read_pipe ;
  input [28:0] left;
  wire [28:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 28'h0000000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3908.read_pipe  = { left, right, 60'hzzzzzzzzzzzzzzz };
endmodule

module bin_op_eq_uint2_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [8:0] \2882.read_pipe ;
  input [1:0] left;
  wire [1:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 1'h0, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \2882.read_pipe  = { left, right, 6'hzz };
endmodule

module bin_op_eq_uint30_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [92:0] \2844.read_pipe ;
  input [29:0] left;
  wire [29:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 29'h00000000, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \2844.read_pipe  = { left, right, 62'hzzzzzzzzzzzzzzzz };
endmodule

module bin_op_eq_uint31_t_uint1_t_1clk_19daef14(clk, left, right, return_output);
  wire _0_;
  wire [95:0] \1215.read_pipe ;
  input clk;
  wire clk;
  input [30:0] left;
  wire [30:0] left;
  wire [191:0] manual_registers;
  (* init = 192'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0111111111111111111111111111111xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0111111111111111111111111111111xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95" *)
  wire [191:0] manual_registers_r;
  output return_output;
  wire return_output;
  input right;
  wire right;
  reg [190:0] _1_ = 191'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0111111111111111111111111111111xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0111111111111111111111111111111xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
  always @(posedge clk)
    _1_ <= { left, right, manual_registers[158], 30'h00000000, right, left, manual_registers_r[191:160], return_output, manual_registers[62], manual_registers_r[157:96] };
  assign { manual_registers_r[191:160], manual_registers_r[158:0] } = _1_;
  assign manual_registers[158] = ! left[30:27];
  assign _0_ = manual_registers_r[122:96] == manual_registers_r[153:127];
  assign manual_registers[62] = manual_registers_r[158] & _0_;
  assign return_output = manual_registers[62] ? 1'h1 : 1'h0;
  assign \1215.read_pipe  = { manual_registers_r[191:160], 1'hx, manual_registers_r[158:96] };
  assign { manual_registers[191:159], manual_registers[157:63], manual_registers[61:0] } = { left, right, 31'bx000000000000000000000000000000, right, left, manual_registers_r[191:160], return_output, manual_registers_r[157:96] };
  assign manual_registers_r[159] = 1'hx;
endmodule

module bin_op_eq_uint3_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [11:0] \2920.read_pipe ;
  input [2:0] left;
  wire [2:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 2'h0, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \2920.read_pipe  = { left, right, 8'hzz };
endmodule

module bin_op_eq_uint4_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [14:0] \2958.read_pipe ;
  input [3:0] left;
  wire [3:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 3'h0, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \2958.read_pipe  = { left, right, 10'hzzz };
endmodule

module bin_op_eq_uint5_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [17:0] \2996.read_pipe ;
  input [4:0] left;
  wire [4:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 4'h0, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \2996.read_pipe  = { left, right, 12'hzzz };
endmodule

module bin_op_eq_uint6_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [20:0] \3034.read_pipe ;
  input [5:0] left;
  wire [5:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 5'h00, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3034.read_pipe  = { left, right, 14'hzzzz };
endmodule

module bin_op_eq_uint7_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [23:0] \3072.read_pipe ;
  input [6:0] left;
  wire [6:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 6'h00, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3072.read_pipe  = { left, right, 16'hzzzz };
endmodule

module bin_op_eq_uint8_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [26:0] \3110.read_pipe ;
  input [7:0] left;
  wire [7:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 7'h00, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3110.read_pipe  = { left, right, 18'hzzzzz };
endmodule

module bin_op_eq_uint8_t_uint1_t_1clk_d415be2f(clk, left, right, return_output);
  wire _0_;
  wire [26:0] \494.read_pipe ;
  input clk;
  wire clk;
  input [7:0] left;
  wire [7:0] left;
  wire [53:0] manual_registers;
  (* init = 54'bxxxxxxxxxx011111111111xxxxxxxxxxxxxxx01111111111111111 *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26" *)
  wire [53:0] manual_registers_r;
  output return_output;
  wire return_output;
  input right;
  wire right;
  reg [52:0] _1_ = 53'bxxxxxxxxx011111111111xxxxxxxxxxxxxxx01111111111111111;
  always @(posedge clk)
    _1_ <= { left, right, manual_registers[43], 7'h00, right, left, manual_registers_r[53:45], return_output, manual_registers[16], manual_registers_r[42:27] };
  assign { manual_registers_r[53:45], manual_registers_r[43:0] } = _1_;
  assign manual_registers[43] = ! left[7:2];
  assign _0_ = manual_registers_r[28:27] == manual_registers_r[36:35];
  assign manual_registers[16] = manual_registers_r[43] & _0_;
  assign return_output = manual_registers[16] ? 1'h1 : 1'h0;
  assign \494.read_pipe  = { manual_registers_r[53:45], 1'hx, manual_registers_r[43:27] };
  assign { manual_registers[53:44], manual_registers[42:17], manual_registers[15:0] } = { left, right, 8'bx0000000, right, left, manual_registers_r[53:45], return_output, manual_registers_r[42:27] };
  assign manual_registers_r[44] = 1'hx;
endmodule

module bin_op_eq_uint9_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [29:0] \3148.read_pipe ;
  input [8:0] left;
  wire [8:0] left;
  output return_output;
  wire return_output;
  input right;
  wire right;
  assign _0_ = left == { 8'h00, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \3148.read_pipe  = { left, right, 20'hzzzzz };
endmodule

module bin_op_gt_uint8_t_uint5_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [31:0] \2538.read_pipe ;
  input [7:0] left;
  wire [7:0] left;
  output return_output;
  wire return_output;
  input [4:0] right;
  wire [4:0] right;
  assign _0_ = left > { 3'h0, right };
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \2538.read_pipe  = { 17'hzzzzz, left, right, 2'hz };
endmodule

module bin_op_gt_uint8_t_uint8_t_0clk_de264c78(left, right, return_output);
  wire _0_;
  wire [34:0] \423.read_pipe ;
  input [7:0] left;
  wire [7:0] left;
  output return_output;
  wire return_output;
  input [7:0] right;
  wire [7:0] right;
  assign _0_ = left > right;
  assign return_output = _0_ ? 1'h1 : 1'h0;
  assign \423.read_pipe  = { 17'hzzzzz, left, right, 2'hz };
endmodule

module bin_op_minus_uint32_t_uint1_t_0clk_de264c78(left, right, return_output);
  (* unused_bits = "32" *)
  wire [32:0] _0_;
  wire [258:0] \2704.read_pipe ;
  input [31:0] left;
  wire [31:0] left;
  output [31:0] return_output;
  wire [31:0] return_output;
  input right;
  wire right;
  assign { _0_[32], return_output } = { 1'h0, left } - { 32'h00000000, right };
  assign _0_[31:0] = return_output;
  assign \2704.read_pipe  = { left, right, 226'hzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz };
endmodule

module bin_op_minus_uint8_t_uint5_t_1clk_ac73d0e5(clk, left, right, return_output);
  wire [4:0] _0_;
  (* unused_bits = "1 2 3 4 5 26 27 28 29 34 35 36 37" *)
  wire [70:0] \2235.read_pipe ;
  input clk;
  wire clk;
  input [7:0] left;
  wire [7:0] left;
  wire [141:0] manual_registers;
  (* unused_bits = "0 1 2 3 4 5 10 11 12 13 14 15 16 17 18 19 20 21 22 26 27 28 29 34 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 72 73 74 75 76 97 98 99 100 105 106 107 108" *)
  wire [141:0] manual_registers_r;
  output [7:0] return_output;
  wire [7:0] return_output;
  input [4:0] right;
  wire [4:0] right;
  reg [96:0] _1_;
  always @(posedge clk)
    _1_ <= { left, right, manual_registers[116:113], right[3:0], left[3:0], right, left, manual_registers[76], manual_registers[116:113], manual_registers[76], manual_registers_r[141:129], manual_registers[57:54], manual_registers_r[116:113], manual_registers[57:54], manual_registers_r[116:113], manual_registers_r[93], manual_registers_r[88:85], manual_registers_r[93:81], manual_registers[5], manual_registers[57:54], manual_registers[5] };
  assign { manual_registers_r[141:129], manual_registers_r[116:113], manual_registers_r[108:105], manual_registers_r[100:97], manual_registers_r[93:81], manual_registers_r[76:42], manual_registers_r[34], manual_registers_r[29:26], manual_registers_r[22:10], manual_registers_r[5:0] } = _1_;
  assign { manual_registers[76], manual_registers[116:113] } = { 1'h0, left[3:0] } - { 1'h0, right[3:0] };
  assign _0_ = { 1'h0, manual_registers_r[88:85] } - { 4'h0, manual_registers_r[93] };
  assign { manual_registers[5], manual_registers[57:54] } = _0_ - { 4'h0, manual_registers_r[71] };
  assign \2235.read_pipe  = { manual_registers_r[141:129], 12'h000, manual_registers_r[116:113], 4'h0, manual_registers_r[108:105], 4'h0, manual_registers_r[100:97], 3'h0, manual_registers_r[93:81], 4'h0, manual_registers_r[76:71] };
  assign { manual_registers[141:117], manual_registers[112:77], manual_registers[75:58], manual_registers[53:6], manual_registers[4:0] } = { left, right, 16'h0000, right[3:0], 4'h0, left[3:0], 3'h0, right, left, 4'h0, manual_registers[116:113], manual_registers[76], manual_registers_r[141:129], manual_registers_r[116:113], manual_registers[57:54], manual_registers_r[116:113], 7'h00, manual_registers_r[93], 4'h0, manual_registers_r[88:85], 3'h0, manual_registers_r[93:81], 4'h0, manual_registers[57:54], manual_registers[5] };
  assign { manual_registers_r[128:117], manual_registers_r[112:109], manual_registers_r[104:101], manual_registers_r[96:94], manual_registers_r[80:77], manual_registers_r[41:35], manual_registers_r[33:30], manual_registers_r[25:23], manual_registers_r[9:6] } = 45'h000000000000;
  assign return_output = { manual_registers[57:54], manual_registers_r[116:113] };
endmodule

module bin_op_minus_uint8_t_uint8_t_1clk_d415be2f(clk, left, right, return_output);
  wire [2:0] _0_;
  (* unused_bits = "1 2 3 4 5 6 7 26 27 28 29 30 31 34 35 36 37 38 39" *)
  wire [73:0] \631.read_pipe ;
  input clk;
  wire clk;
  input [7:0] left;
  wire [7:0] left;
  wire [147:0] manual_registers;
  (* unused_bits = "0 1 2 3 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 34 35 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 75 76 77 78 79 80 81 100 101 102 103 104 105 108 109 110 111 112 113" *)
  wire [147:0] manual_registers_r;
  output [7:0] return_output;
  wire [7:0] return_output;
  input [7:0] right;
  wire [7:0] right;
  reg [113:0] _1_;
  always @(posedge clk)
    _1_ <= { left, right, manual_registers[121:116], right[5:0], left[5:0], right, left, manual_registers[81], manual_registers[121:116], manual_registers[81], manual_registers_r[147:132], manual_registers[57:56], manual_registers_r[121:116], manual_registers[57:56], manual_registers_r[121:116], manual_registers_r[99:98], manual_registers_r[91:90], manual_registers_r[99:84], manual_registers[3], manual_registers[57:56], manual_registers[3] };
  assign { manual_registers_r[147:132], manual_registers_r[121:116], manual_registers_r[113:108], manual_registers_r[105:84], manual_registers_r[81:42], manual_registers_r[35:34], manual_registers_r[27:10], manual_registers_r[3:0] } = _1_;
  assign { manual_registers[81], manual_registers[121:116] } = { 1'h0, left[5:0] } - { 1'h0, right[5:0] };
  assign _0_ = { 1'h0, manual_registers_r[91:90] } - { 1'h0, manual_registers_r[99:98] };
  assign { manual_registers[3], manual_registers[57:56] } = _0_ - { 2'h0, manual_registers_r[74] };
  assign \631.read_pipe  = { manual_registers_r[147:132], 10'h000, manual_registers_r[121:116], 2'h0, manual_registers_r[113:108], 2'h0, manual_registers_r[105:84], 2'h0, manual_registers_r[81:74] };
  assign { manual_registers[147:122], manual_registers[115:82], manual_registers[80:58], manual_registers[55:4], manual_registers[2:0] } = { left, right, 12'h000, right[5:0], 2'h0, left[5:0], right, left, 2'h0, manual_registers[121:116], manual_registers[81], manual_registers_r[147:132], manual_registers_r[121:116], manual_registers[57:56], manual_registers_r[121:116], 6'h00, manual_registers_r[99:98], 6'h00, manual_registers_r[91:90], manual_registers_r[99:84], 6'h00, manual_registers[57:56], manual_registers[3] };
  assign { manual_registers_r[131:122], manual_registers_r[115:114], manual_registers_r[107:106], manual_registers_r[83:82], manual_registers_r[41:36], manual_registers_r[33:28], manual_registers_r[9:4] } = 34'h000000000;
  assign return_output = { manual_registers[57:56], manual_registers_r[121:116] };
endmodule

module bin_op_or_uint1_t_uint2_t_0clk_de264c78(left, right, return_output);
  wire [8:0] \4034.read_pipe ;
  input left;
  wire left;
  output [1:0] return_output;
  wire [1:0] return_output;
  input [1:0] right;
  wire [1:0] right;
  assign return_output = { 1'h0, left } | right;
  assign \4034.read_pipe  = { left, right, 6'hzz };
endmodule

module bin_op_or_uint2_t_uint3_t_0clk_de264c78(left, right, return_output);
  wire [13:0] \4061.read_pipe ;
  input [1:0] left;
  wire [1:0] left;
  output [2:0] return_output;
  wire [2:0] return_output;
  input [2:0] right;
  wire [2:0] right;
  assign return_output = { 1'h0, left } | right;
  assign \4061.read_pipe  = { left, right, 9'hzzz };
endmodule

module bin_op_or_uint3_t_uint3_t_0clk_de264c78(left, right, return_output);
  wire [14:0] \4088.read_pipe ;
  input [2:0] left;
  wire [2:0] left;
  output [2:0] return_output;
  wire [2:0] return_output;
  input [2:0] right;
  wire [2:0] right;
  assign return_output = left | right;
  assign \4088.read_pipe  = { left, right, 9'hzzz };
endmodule

module bin_op_or_uint3_t_uint4_t_0clk_de264c78(left, right, return_output);
  wire [18:0] \4114.read_pipe ;
  input [2:0] left;
  wire [2:0] left;
  output [3:0] return_output;
  wire [3:0] return_output;
  input [3:0] right;
  wire [3:0] right;
  assign return_output = { 1'h0, left } | right;
  assign \4114.read_pipe  = { left, right, 12'hzzz };
endmodule

module bin_op_or_uint4_t_uint4_t_0clk_de264c78(left, right, return_output);
  wire [19:0] \4141.read_pipe ;
  input [3:0] left;
  wire [3:0] left;
  output [3:0] return_output;
  wire [3:0] return_output;
  input [3:0] right;
  wire [3:0] right;
  assign return_output = left | right;
  assign \4141.read_pipe  = { left, right, 12'hzzz };
endmodule

module bin_op_or_uint4_t_uint5_t_0clk_de264c78(left, right, return_output);
  wire [23:0] \4167.read_pipe ;
  input [3:0] left;
  wire [3:0] left;
  output [4:0] return_output;
  wire [4:0] return_output;
  input [4:0] right;
  wire [4:0] right;
  assign return_output = { 1'h0, left } | right;
  assign \4167.read_pipe  = { left, right, 15'hzzzz };
endmodule

module bin_op_or_uint5_t_uint5_t_0clk_de264c78(left, right, return_output);
  wire [24:0] \4194.read_pipe ;
  input [4:0] left;
  wire [4:0] left;
  output [4:0] return_output;
  wire [4:0] return_output;
  input [4:0] right;
  wire [4:0] right;
  assign return_output = left | right;
  assign \4194.read_pipe  = { left, right, 15'hzzzz };
endmodule

module bin_op_plus_float_float_6clk_fed6bb55(clk, left, right, return_output);
  wire [30:0] bin_op_eq_bin_op_plus_float_float_c_l141_c11_443b_left;
  wire bin_op_eq_bin_op_plus_float_float_c_l141_c11_443b_return_output;
  wire bin_op_eq_bin_op_plus_float_float_c_l141_c11_443b_right;
  wire [7:0] bin_op_eq_bin_op_plus_float_float_c_l57_c6_6806_left;
  wire bin_op_eq_bin_op_plus_float_float_c_l57_c6_6806_return_output;
  wire bin_op_eq_bin_op_plus_float_float_c_l57_c6_6806_right;
  wire [7:0] bin_op_eq_bin_op_plus_float_float_c_l71_c6_3bde_left;
  wire bin_op_eq_bin_op_plus_float_float_c_l71_c6_3bde_return_output;
  wire bin_op_eq_bin_op_plus_float_float_c_l71_c6_3bde_right;
  wire [7:0] bin_op_gt_bin_op_plus_float_float_c_l23_c8_f086_left;
  wire bin_op_gt_bin_op_plus_float_float_c_l23_c8_f086_return_output;
  wire [7:0] bin_op_gt_bin_op_plus_float_float_c_l23_c8_f086_right;
  wire [7:0] bin_op_minus_bin_op_plus_float_float_c_l114_c10_5fbc_left;
  wire [7:0] bin_op_minus_bin_op_plus_float_float_c_l114_c10_5fbc_return_output;
  wire [7:0] bin_op_minus_bin_op_plus_float_float_c_l114_c10_5fbc_right;
  reg [7:0] bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  wire [7:0] bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_return_output;
  wire [4:0] bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_right;
  wire [30:0] bin_op_plus_bin_op_plus_float_float_c_l121_c18_d11a_left;
  wire [31:0] bin_op_plus_bin_op_plus_float_float_c_l121_c18_d11a_return_output;
  wire [30:0] bin_op_plus_bin_op_plus_float_float_c_l121_c18_d11a_right;
  wire [7:0] bin_op_plus_bin_op_plus_float_float_c_l138_c32_8867_left;
  (* unused_bits = "8" *)
  wire [8:0] bin_op_plus_bin_op_plus_float_float_c_l138_c32_8867_return_output;
  wire bin_op_plus_bin_op_plus_float_float_c_l138_c32_8867_right;
  reg [29:0] bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_left;
  (* unused_bits = "0 1 2 3 4 5 29" *)
  wire [29:0] bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_return_output;
  wire [4:0] bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_right;
  wire [30:0] bin_op_sr_bin_op_plus_float_float_c_l117_c56_8aa3_left;
  wire [30:0] bin_op_sr_bin_op_plus_float_float_c_l117_c56_8aa3_return_output;
  reg [7:0] bin_op_sr_bin_op_plus_float_float_c_l117_c56_8aa3_right;
  input clk;
  wire clk;
  wire [7:0] comb_stage0_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  wire [22:0] comb_stage0_float_22_0_bin_op_plus_float_float_c_l37_c16_8e15_return_output;
  wire [22:0] comb_stage0_float_22_0_bin_op_plus_float_float_c_l44_c16_3ce2_return_output;
  wire comb_stage0_x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182_cond;
  wire comb_stage0_y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f_cond;
  reg [7:0] comb_stage1_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  wire [7:0] comb_stage1_bin_op_sr_bin_op_plus_float_float_c_l117_c56_8aa3_right;
  wire [7:0] comb_stage1_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  reg [7:0] comb_stage2_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  reg [7:0] comb_stage2_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  reg [7:0] comb_stage3_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  wire [29:0] comb_stage3_bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_left;
  wire comb_stage3_int32_31_31_bin_op_plus_float_float_c_l125_c14_14a7_return_output;
  wire comb_stage3_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  reg [7:0] comb_stage3_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  wire comb_stage3_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  wire [22:0] comb_stage3_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  reg [7:0] comb_stage4_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  reg [29:0] comb_stage4_bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_left;
  reg comb_stage4_int32_31_31_bin_op_plus_float_float_c_l125_c14_14a7_return_output;
  wire comb_stage4_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  reg [7:0] comb_stage4_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  wire comb_stage4_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  reg comb_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  reg [22:0] comb_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  wire comb_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  reg comb_stage5_int32_31_31_bin_op_plus_float_float_c_l125_c14_14a7_return_output;
  reg comb_stage5_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  reg [7:0] comb_stage5_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  wire comb_stage5_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  wire comb_stage5_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  reg [22:0] comb_stage5_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  reg comb_stage5_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  wire [4:0] count0s_uint30_bin_op_plus_float_float_c_l158_c22_6aa5_return_output;
  wire [29:0] count0s_uint30_bin_op_plus_float_float_c_l158_c22_6aa5_x;
  (* unused_bits = "31" *)
  wire [31:0] int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_return_output;
  wire [31:0] int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_x;
  input [31:0] left;
  wire [31:0] left;
  wire [7:0] reg_stage0_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  reg [22:0] reg_stage0_float_22_0_bin_op_plus_float_float_c_l37_c16_8e15_return_output;
  reg [22:0] reg_stage0_float_22_0_bin_op_plus_float_float_c_l44_c16_3ce2_return_output;
  wire reg_stage0_x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182_cond;
  wire reg_stage0_y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f_cond;
  wire [7:0] reg_stage1_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  wire [7:0] reg_stage1_bin_op_sr_bin_op_plus_float_float_c_l117_c56_8aa3_right;
  wire [7:0] reg_stage1_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  wire [7:0] reg_stage2_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  wire [7:0] reg_stage2_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  wire [7:0] reg_stage3_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  wire [29:0] reg_stage3_bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_left;
  wire reg_stage3_int32_31_31_bin_op_plus_float_float_c_l125_c14_14a7_return_output;
  wire reg_stage3_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  wire [7:0] reg_stage3_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  wire reg_stage3_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  wire [22:0] reg_stage3_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  wire [7:0] reg_stage4_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  wire [29:0] reg_stage4_bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_left;
  wire reg_stage4_int32_31_31_bin_op_plus_float_float_c_l125_c14_14a7_return_output;
  wire reg_stage4_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  wire [7:0] reg_stage4_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  wire reg_stage4_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  wire reg_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  wire [22:0] reg_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  wire reg_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  reg reg_stage5_int32_31_31_bin_op_plus_float_float_c_l125_c14_14a7_return_output;
  wire reg_stage5_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  wire [7:0] reg_stage5_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  wire reg_stage5_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  wire reg_stage5_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  wire [22:0] reg_stage5_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  wire reg_stage5_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  output [31:0] return_output;
  wire [31:0] return_output;
  input [31:0] right;
  wire [31:0] right;
  reg sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  wire [7:0] sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iffalse;
  reg [7:0] sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  wire [7:0] sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_return_output;
  reg sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  wire [7:0] sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_iffalse;
  wire [7:0] sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_iftrue;
  wire [7:0] sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_return_output;
  wire sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  wire [22:0] sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iffalse;
  reg [22:0] sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  wire [22:0] sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_return_output;
  wire sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  wire [22:0] sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_iffalse;
  wire [22:0] sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_iftrue;
  wire [22:0] sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_return_output;
  wire [24:0] uint24_negate_bin_op_plus_float_float_c_l90_c40_08b6_return_output;
  wire [23:0] uint24_negate_bin_op_plus_float_float_c_l90_c40_08b6_x;
  wire [24:0] uint24_negate_bin_op_plus_float_float_c_l98_c40_c91d_return_output;
  wire [23:0] uint24_negate_bin_op_plus_float_float_c_l98_c40_c91d_x;
  wire x_hidden_bit_mux_bin_op_plus_float_float_c_l57_c3_7401_cond;
  wire x_hidden_bit_mux_bin_op_plus_float_float_c_l57_c3_7401_iffalse;
  wire x_hidden_bit_mux_bin_op_plus_float_float_c_l57_c3_7401_iftrue;
  wire x_hidden_bit_mux_bin_op_plus_float_float_c_l57_c3_7401_return_output;
  reg x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182_cond;
  wire [24:0] x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182_iffalse;
  wire [24:0] x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182_iftrue;
  wire [24:0] x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182_return_output;
  wire x_mux_bin_op_plus_float_float_c_l23_c3_a34e_cond;
  wire [31:0] x_mux_bin_op_plus_float_float_c_l23_c3_a34e_iffalse;
  wire [31:0] x_mux_bin_op_plus_float_float_c_l23_c3_a34e_iftrue;
  wire [31:0] x_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output;
  wire y_hidden_bit_mux_bin_op_plus_float_float_c_l71_c3_bac5_cond;
  wire y_hidden_bit_mux_bin_op_plus_float_float_c_l71_c3_bac5_iffalse;
  wire y_hidden_bit_mux_bin_op_plus_float_float_c_l71_c3_bac5_iftrue;
  wire y_hidden_bit_mux_bin_op_plus_float_float_c_l71_c3_bac5_return_output;
  reg y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f_cond;
  wire [24:0] y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f_iffalse;
  wire [24:0] y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f_iftrue;
  wire [24:0] y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f_return_output;
  wire y_mux_bin_op_plus_float_float_c_l23_c3_a34e_cond;
  wire [31:0] y_mux_bin_op_plus_float_float_c_l23_c3_a34e_iffalse;
  wire [31:0] y_mux_bin_op_plus_float_float_c_l23_c3_a34e_iftrue;
  wire [31:0] y_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output;
  always @(posedge clk)
    reg_stage0_float_22_0_bin_op_plus_float_float_c_l37_c16_8e15_return_output <= x_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[22:0];
  always @(posedge clk)
    reg_stage0_float_22_0_bin_op_plus_float_float_c_l44_c16_3ce2_return_output <= y_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[22:0];
  always @(posedge clk)
    x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182_cond <= x_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[31];
  always @(posedge clk)
    y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f_cond <= y_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[31];
  always @(posedge clk)
    comb_stage1_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left <= x_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[30:23];
  always @(posedge clk)
    bin_op_sr_bin_op_plus_float_float_c_l117_c56_8aa3_right <= comb_stage1_bin_op_sr_bin_op_plus_float_float_c_l117_c56_8aa3_right;
  always @(posedge clk)
    comb_stage2_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue <= bin_op_plus_bin_op_plus_float_float_c_l138_c32_8867_return_output[7:0];
  always @(posedge clk)
    comb_stage2_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left <= comb_stage1_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  always @(posedge clk)
    comb_stage3_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue <= comb_stage2_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  always @(posedge clk)
    comb_stage3_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left <= comb_stage2_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  always @(posedge clk)
    comb_stage4_int32_31_31_bin_op_plus_float_float_c_l125_c14_14a7_return_output <= int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_x[31];
  always @(posedge clk)
    comb_stage4_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue <= comb_stage3_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  always @(posedge clk)
    comb_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue <= int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_return_output[29:7];
  always @(posedge clk)
    comb_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond <= int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_return_output[30];
  always @(posedge clk)
    comb_stage4_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left <= comb_stage3_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  always @(posedge clk)
    comb_stage4_bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_left <= int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_return_output[29:0];
  always @(posedge clk)
    comb_stage5_int32_31_31_bin_op_plus_float_float_c_l125_c14_14a7_return_output <= comb_stage4_int32_31_31_bin_op_plus_float_float_c_l125_c14_14a7_return_output;
  always @(posedge clk)
    comb_stage5_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue <= comb_stage4_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  always @(posedge clk)
    comb_stage5_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue <= comb_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  always @(posedge clk)
    comb_stage5_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond <= comb_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  always @(posedge clk)
    comb_stage5_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond <= comb_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  always @(posedge clk)
    bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left <= comb_stage4_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  always @(posedge clk)
    bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_left <= comb_stage4_bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_left;
  always @(posedge clk)
    reg_stage5_int32_31_31_bin_op_plus_float_float_c_l125_c14_14a7_return_output <= comb_stage5_int32_31_31_bin_op_plus_float_float_c_l125_c14_14a7_return_output;
  always @(posedge clk)
    sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue <= comb_stage5_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  always @(posedge clk)
    sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond <= comb_stage5_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  always @(posedge clk)
    sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue <= comb_stage5_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  always @(posedge clk)
    sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond <= comb_stage5_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  bin_op_eq_uint31_t_uint1_t_1clk_19daef14 bin_op_eq_bin_op_plus_float_float_c_l141_c11_443b (
    .clk(clk),
    .left(int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_return_output[30:0]),
    .return_output(comb_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond),
    .right(1'h0)
  );
  bin_op_eq_uint8_t_uint1_t_1clk_d415be2f bin_op_eq_bin_op_plus_float_float_c_l57_c6_6806 (
    .clk(clk),
    .left(x_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[30:23]),
    .return_output(x_hidden_bit_mux_bin_op_plus_float_float_c_l57_c3_7401_cond),
    .right(1'h0)
  );
  bin_op_eq_uint8_t_uint1_t_1clk_d415be2f bin_op_eq_bin_op_plus_float_float_c_l71_c6_3bde (
    .clk(clk),
    .left(y_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[30:23]),
    .return_output(y_hidden_bit_mux_bin_op_plus_float_float_c_l71_c3_bac5_cond),
    .right(1'h0)
  );
  bin_op_gt_uint8_t_uint8_t_0clk_de264c78 bin_op_gt_bin_op_plus_float_float_c_l23_c8_f086 (
    .left(right[30:23]),
    .return_output(x_mux_bin_op_plus_float_float_c_l23_c3_a34e_cond),
    .right(left[30:23])
  );
  bin_op_minus_uint8_t_uint8_t_1clk_d415be2f bin_op_minus_bin_op_plus_float_float_c_l114_c10_5fbc (
    .clk(clk),
    .left(x_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[30:23]),
    .return_output(comb_stage1_bin_op_sr_bin_op_plus_float_float_c_l117_c56_8aa3_right),
    .right(y_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[30:23])
  );
  bin_op_minus_uint8_t_uint5_t_1clk_ac73d0e5 bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906 (
    .clk(clk),
    .left(bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left),
    .return_output(sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_iffalse),
    .right(bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_right)
  );
  bin_op_plus_int31_t_int31_t_1clk_9067f4de bin_op_plus_bin_op_plus_float_float_c_l121_c18_d11a (
    .clk(clk),
    .left({ x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182_return_output, 6'h00 }),
    .return_output(int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_x),
    .right(bin_op_plus_bin_op_plus_float_float_c_l121_c18_d11a_right)
  );
  bin_op_plus_uint8_t_uint1_t_1clk_2c08dd97 bin_op_plus_bin_op_plus_float_float_c_l138_c32_8867 (
    .clk(clk),
    .left(x_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[30:23]),
    .return_output(bin_op_plus_bin_op_plus_float_float_c_l138_c32_8867_return_output),
    .right(1'h1)
  );
  bin_op_sl_uint30_t_uint5_t_1clk_811b7fa0 bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b (
    .clk(clk),
    .left(bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_left),
    .return_output(bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_return_output),
    .right(bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_right)
  );
  bin_op_sr_int31_t_uint8_t_0clk_4e6656cf bin_op_sr_bin_op_plus_float_float_c_l117_c56_8aa3 (
    .left({ y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f_return_output, 6'h00 }),
    .return_output(bin_op_plus_bin_op_plus_float_float_c_l121_c18_d11a_right),
    .right(bin_op_sr_bin_op_plus_float_float_c_l117_c56_8aa3_right)
  );
  count0s_uint30_2clk_36370fec count0s_uint30_bin_op_plus_float_float_c_l158_c22_6aa5 (
    .clk(clk),
    .return_output(bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_right),
    .x(int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_return_output[29:0])
  );
  int32_abs_0clk_a5a1cd4e int32_abs_bin_op_plus_float_float_c_l127_c27_3e30 (
    .return_output(int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_return_output),
    .x(int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_x)
  );
  mux_uint1_t_uint8_t_uint8_t_0clk_de264c78 sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d (
    .cond(sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond),
    .iffalse(sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iffalse),
    .iftrue(sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue),
    .return_output(sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_return_output)
  );
  mux_uint1_t_uint8_t_uint8_t_0clk_de264c78 sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72 (
    .cond(sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond),
    .iffalse(sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_iffalse),
    .iftrue(8'h00),
    .return_output(sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iffalse)
  );
  mux_uint1_t_uint23_t_uint23_t_0clk_de264c78 sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d (
    .cond(sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond),
    .iffalse(sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iffalse),
    .iftrue(sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue),
    .return_output(sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_return_output)
  );
  mux_uint1_t_uint23_t_uint23_t_0clk_de264c78 sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72 (
    .cond(sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond),
    .iffalse(bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_return_output[28:6]),
    .iftrue(23'h000000),
    .return_output(sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iffalse)
  );
  uint24_negate_0clk_23f04728 uint24_negate_bin_op_plus_float_float_c_l90_c40_08b6 (
    .return_output(x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182_iftrue),
    .x({ x_hidden_bit_mux_bin_op_plus_float_float_c_l57_c3_7401_return_output, reg_stage0_float_22_0_bin_op_plus_float_float_c_l37_c16_8e15_return_output })
  );
  uint24_negate_0clk_23f04728 uint24_negate_bin_op_plus_float_float_c_l98_c40_c91d (
    .return_output(y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f_iftrue),
    .x({ y_hidden_bit_mux_bin_op_plus_float_float_c_l71_c3_bac5_return_output, reg_stage0_float_22_0_bin_op_plus_float_float_c_l44_c16_3ce2_return_output })
  );
  mux_uint1_t_uint1_t_uint1_t_0clk_de264c78 x_hidden_bit_mux_bin_op_plus_float_float_c_l57_c3_7401 (
    .cond(x_hidden_bit_mux_bin_op_plus_float_float_c_l57_c3_7401_cond),
    .iffalse(1'h1),
    .iftrue(1'h0),
    .return_output(x_hidden_bit_mux_bin_op_plus_float_float_c_l57_c3_7401_return_output)
  );
  mux_uint1_t_int25_t_int25_t_1clk_fa830572 x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182 (
    .clk(clk),
    .cond(x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182_cond),
    .iffalse({ 1'h0, x_hidden_bit_mux_bin_op_plus_float_float_c_l57_c3_7401_return_output, reg_stage0_float_22_0_bin_op_plus_float_float_c_l37_c16_8e15_return_output }),
    .iftrue(x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182_iftrue),
    .return_output(x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182_return_output)
  );
  mux_uint1_t_float_float_0clk_de264c78 x_mux_bin_op_plus_float_float_c_l23_c3_a34e (
    .cond(x_mux_bin_op_plus_float_float_c_l23_c3_a34e_cond),
    .iffalse(left),
    .iftrue(right),
    .return_output(x_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output)
  );
  mux_uint1_t_uint1_t_uint1_t_0clk_de264c78 y_hidden_bit_mux_bin_op_plus_float_float_c_l71_c3_bac5 (
    .cond(y_hidden_bit_mux_bin_op_plus_float_float_c_l71_c3_bac5_cond),
    .iffalse(1'h1),
    .iftrue(1'h0),
    .return_output(y_hidden_bit_mux_bin_op_plus_float_float_c_l71_c3_bac5_return_output)
  );
  mux_uint1_t_int25_t_int25_t_1clk_fa830572 y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f (
    .clk(clk),
    .cond(y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f_cond),
    .iffalse({ 1'h0, y_hidden_bit_mux_bin_op_plus_float_float_c_l71_c3_bac5_return_output, reg_stage0_float_22_0_bin_op_plus_float_float_c_l44_c16_3ce2_return_output }),
    .iftrue(y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f_iftrue),
    .return_output(y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f_return_output)
  );
  mux_uint1_t_float_float_0clk_de264c78 y_mux_bin_op_plus_float_float_c_l23_c3_a34e (
    .cond(x_mux_bin_op_plus_float_float_c_l23_c3_a34e_cond),
    .iffalse(right),
    .iftrue(left),
    .return_output(y_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output)
  );
  assign bin_op_eq_bin_op_plus_float_float_c_l141_c11_443b_left = int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_return_output[30:0];
  assign bin_op_eq_bin_op_plus_float_float_c_l141_c11_443b_return_output = comb_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  assign bin_op_eq_bin_op_plus_float_float_c_l141_c11_443b_right = 1'h0;
  assign bin_op_eq_bin_op_plus_float_float_c_l57_c6_6806_left = x_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[30:23];
  assign bin_op_eq_bin_op_plus_float_float_c_l57_c6_6806_return_output = x_hidden_bit_mux_bin_op_plus_float_float_c_l57_c3_7401_cond;
  assign bin_op_eq_bin_op_plus_float_float_c_l57_c6_6806_right = 1'h0;
  assign bin_op_eq_bin_op_plus_float_float_c_l71_c6_3bde_left = y_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[30:23];
  assign bin_op_eq_bin_op_plus_float_float_c_l71_c6_3bde_return_output = y_hidden_bit_mux_bin_op_plus_float_float_c_l71_c3_bac5_cond;
  assign bin_op_eq_bin_op_plus_float_float_c_l71_c6_3bde_right = 1'h0;
  assign bin_op_gt_bin_op_plus_float_float_c_l23_c8_f086_left = right[30:23];
  assign bin_op_gt_bin_op_plus_float_float_c_l23_c8_f086_return_output = x_mux_bin_op_plus_float_float_c_l23_c3_a34e_cond;
  assign bin_op_gt_bin_op_plus_float_float_c_l23_c8_f086_right = left[30:23];
  assign bin_op_minus_bin_op_plus_float_float_c_l114_c10_5fbc_left = x_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[30:23];
  assign bin_op_minus_bin_op_plus_float_float_c_l114_c10_5fbc_return_output = comb_stage1_bin_op_sr_bin_op_plus_float_float_c_l117_c56_8aa3_right;
  assign bin_op_minus_bin_op_plus_float_float_c_l114_c10_5fbc_right = y_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[30:23];
  assign bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_return_output = sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_iffalse;
  assign bin_op_plus_bin_op_plus_float_float_c_l121_c18_d11a_left = { x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182_return_output, 6'h00 };
  assign bin_op_plus_bin_op_plus_float_float_c_l121_c18_d11a_return_output = int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_x;
  assign bin_op_plus_bin_op_plus_float_float_c_l138_c32_8867_left = x_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[30:23];
  assign bin_op_plus_bin_op_plus_float_float_c_l138_c32_8867_right = 1'h1;
  assign bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_right = bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_right;
  assign bin_op_sr_bin_op_plus_float_float_c_l117_c56_8aa3_left = { y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f_return_output, 6'h00 };
  assign bin_op_sr_bin_op_plus_float_float_c_l117_c56_8aa3_return_output = bin_op_plus_bin_op_plus_float_float_c_l121_c18_d11a_right;
  assign comb_stage0_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left = x_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[30:23];
  assign comb_stage0_float_22_0_bin_op_plus_float_float_c_l37_c16_8e15_return_output = x_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[22:0];
  assign comb_stage0_float_22_0_bin_op_plus_float_float_c_l44_c16_3ce2_return_output = y_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[22:0];
  assign comb_stage0_x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182_cond = x_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[31];
  assign comb_stage0_y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f_cond = y_mux_bin_op_plus_float_float_c_l23_c3_a34e_return_output[31];
  assign comb_stage1_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue = bin_op_plus_bin_op_plus_float_float_c_l138_c32_8867_return_output[7:0];
  assign comb_stage3_bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_left = int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_return_output[29:0];
  assign comb_stage3_int32_31_31_bin_op_plus_float_float_c_l125_c14_14a7_return_output = int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_x[31];
  assign comb_stage3_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond = int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_return_output[30];
  assign comb_stage3_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond = int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_return_output[30];
  assign comb_stage3_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue = int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_return_output[29:7];
  assign comb_stage4_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond = comb_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  assign comb_stage4_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond = comb_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  assign comb_stage5_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond = comb_stage5_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  assign comb_stage5_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond = comb_stage5_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  assign count0s_uint30_bin_op_plus_float_float_c_l158_c22_6aa5_return_output = bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_right;
  assign count0s_uint30_bin_op_plus_float_float_c_l158_c22_6aa5_x = int32_abs_bin_op_plus_float_float_c_l127_c27_3e30_return_output[29:0];
  assign reg_stage0_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left = comb_stage1_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  assign reg_stage0_x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182_cond = x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182_cond;
  assign reg_stage0_y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f_cond = y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f_cond;
  assign reg_stage1_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left = comb_stage2_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  assign reg_stage1_bin_op_sr_bin_op_plus_float_float_c_l117_c56_8aa3_right = bin_op_sr_bin_op_plus_float_float_c_l117_c56_8aa3_right;
  assign reg_stage1_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue = comb_stage2_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  assign reg_stage2_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left = comb_stage3_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  assign reg_stage2_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue = comb_stage3_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  assign reg_stage3_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left = comb_stage4_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  assign reg_stage3_bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_left = comb_stage4_bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_left;
  assign reg_stage3_int32_31_31_bin_op_plus_float_float_c_l125_c14_14a7_return_output = comb_stage4_int32_31_31_bin_op_plus_float_float_c_l125_c14_14a7_return_output;
  assign reg_stage3_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond = comb_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  assign reg_stage3_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue = comb_stage4_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  assign reg_stage3_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond = comb_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  assign reg_stage3_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue = comb_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  assign reg_stage4_bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left = bin_op_minus_bin_op_plus_float_float_c_l161_c32_e906_left;
  assign reg_stage4_bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_left = bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_left;
  assign reg_stage4_int32_31_31_bin_op_plus_float_float_c_l125_c14_14a7_return_output = comb_stage5_int32_31_31_bin_op_plus_float_float_c_l125_c14_14a7_return_output;
  assign reg_stage4_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond = comb_stage5_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  assign reg_stage4_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue = comb_stage5_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  assign reg_stage4_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond = comb_stage5_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  assign reg_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond = comb_stage5_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  assign reg_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue = comb_stage5_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  assign reg_stage4_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond = comb_stage5_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  assign reg_stage5_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond = sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  assign reg_stage5_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue = sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  assign reg_stage5_sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond = sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  assign reg_stage5_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond = sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  assign reg_stage5_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue = sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iftrue;
  assign reg_stage5_sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond = sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  assign return_output = { reg_stage5_int32_31_31_bin_op_plus_float_float_c_l125_c14_14a7_return_output, sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_return_output, sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_return_output };
  assign sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_iftrue = 8'h00;
  assign sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_return_output = sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iffalse;
  assign sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond = sum_exponent_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_cond;
  assign sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond = sum_exponent_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_cond;
  assign sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_iffalse = bin_op_sl_bin_op_plus_float_float_c_l162_c55_e36b_return_output[28:6];
  assign sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_iftrue = 23'h000000;
  assign sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l141_c8_ee72_return_output = sum_mantissa_unsigned_normalized_mux_bin_op_plus_float_float_c_l134_c3_8f8d_iffalse;
  assign uint24_negate_bin_op_plus_float_float_c_l90_c40_08b6_return_output = x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182_iftrue;
  assign uint24_negate_bin_op_plus_float_float_c_l90_c40_08b6_x = { x_hidden_bit_mux_bin_op_plus_float_float_c_l57_c3_7401_return_output, reg_stage0_float_22_0_bin_op_plus_float_float_c_l37_c16_8e15_return_output };
  assign uint24_negate_bin_op_plus_float_float_c_l98_c40_c91d_return_output = y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f_iftrue;
  assign uint24_negate_bin_op_plus_float_float_c_l98_c40_c91d_x = { y_hidden_bit_mux_bin_op_plus_float_float_c_l71_c3_bac5_return_output, reg_stage0_float_22_0_bin_op_plus_float_float_c_l44_c16_3ce2_return_output };
  assign x_hidden_bit_mux_bin_op_plus_float_float_c_l57_c3_7401_iffalse = 1'h1;
  assign x_hidden_bit_mux_bin_op_plus_float_float_c_l57_c3_7401_iftrue = 1'h0;
  assign x_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l88_c3_2182_iffalse = { 1'h0, x_hidden_bit_mux_bin_op_plus_float_float_c_l57_c3_7401_return_output, reg_stage0_float_22_0_bin_op_plus_float_float_c_l37_c16_8e15_return_output };
  assign x_mux_bin_op_plus_float_float_c_l23_c3_a34e_iffalse = left;
  assign x_mux_bin_op_plus_float_float_c_l23_c3_a34e_iftrue = right;
  assign y_hidden_bit_mux_bin_op_plus_float_float_c_l71_c3_bac5_iffalse = 1'h1;
  assign y_hidden_bit_mux_bin_op_plus_float_float_c_l71_c3_bac5_iftrue = 1'h0;
  assign y_mantissa_w_hidden_bit_sign_adj_mux_bin_op_plus_float_float_c_l96_c3_b29f_iffalse = { 1'h0, y_hidden_bit_mux_bin_op_plus_float_float_c_l71_c3_bac5_return_output, reg_stage0_float_22_0_bin_op_plus_float_float_c_l44_c16_3ce2_return_output };
  assign y_mux_bin_op_plus_float_float_c_l23_c3_a34e_cond = x_mux_bin_op_plus_float_float_c_l23_c3_a34e_cond;
  assign y_mux_bin_op_plus_float_float_c_l23_c3_a34e_iffalse = right;
  assign y_mux_bin_op_plus_float_float_c_l23_c3_a34e_iftrue = left;
endmodule

module bin_op_plus_int31_t_int31_t_1clk_9067f4de(clk, left, right, return_output);
  wire [18:0] _0_;
  (* unused_bits = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 98 99 100 101 102 103 104 105 106 107 108 109 110 111 130 131 132 133 134 135 136 137 138 139 140 141 142 143" *)
  wire [288:0] \912.read_pipe ;
  input clk;
  wire clk;
  input [30:0] left;
  wire [30:0] left;
  wire [577:0] manual_registers;
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 387 388 389 390 391 392 393 394 395 396 397 398 399 400 419 420 421 422 423 424 425 426 427 428 429 430 431 432" *)
  wire [577:0] manual_registers_r;
  output [31:0] return_output;
  wire [31:0] return_output;
  input [30:0] right;
  wire [30:0] right;
  reg [429:0] _1_;
  always @(posedge clk)
    _1_ <= { left, right, manual_registers[464:451], right[13:0], left[13:0], right[30], right, left[30], left, manual_registers[304], manual_registers[464:451], manual_registers[304], manual_registers_r[577:516], manual_registers[226:209], manual_registers_r[464:451], manual_registers[226:209], manual_registers_r[464:451], manual_registers_r[386:369], manual_registers_r[354:337], manual_registers_r[386:323], manual_registers[19], manual_registers[226:209], manual_registers[19] };
  assign { manual_registers_r[577:516], manual_registers_r[464:451], manual_registers_r[432:419], manual_registers_r[400:323], manual_registers_r[304:195], manual_registers_r[193:162], manual_registers_r[147:130], manual_registers_r[115:34], manual_registers_r[19:0] } = _1_;
  assign { manual_registers[304], manual_registers[464:451] } = { 1'h0, left[13:0] } + { 1'h0, right[13:0] };
  assign _0_ = { 1'h0, manual_registers_r[354:337] } + { 1'h0, manual_registers_r[386:369] };
  assign { manual_registers[19], manual_registers[226:209] } = _0_ + { 18'h00000, manual_registers_r[289] };
  assign \912.read_pipe  = { manual_registers_r[577:516], 51'h0000000000000, manual_registers_r[464:451], 18'h00000, manual_registers_r[432:419], 18'h00000, manual_registers_r[400:323], 18'h00000, manual_registers_r[304:289] };
  assign { manual_registers[577:465], manual_registers[450:305], manual_registers[303:227], manual_registers[208:20], manual_registers[18:0] } = { left, right, 69'h000000000000000000, right[13:0], 18'h00000, left[13:0], right[30], right, left[30], left, 18'h00000, manual_registers[464:451], manual_registers[304], manual_registers_r[577:516], manual_registers_r[464:451], 1'h0, manual_registers[226:209], manual_registers_r[464:451], 14'h0000, manual_registers_r[386:369], 14'h0000, manual_registers_r[354:337], manual_registers_r[386:323], 14'h0000, manual_registers[226:209], manual_registers[19] };
  assign { manual_registers_r[515:465], manual_registers_r[450:433], manual_registers_r[418:401], manual_registers_r[322:305], manual_registers_r[194], manual_registers_r[161:148], manual_registers_r[129:116], manual_registers_r[33:20] } = 148'h0000000000000000000000000000000000000;
  assign return_output = { manual_registers[226:209], manual_registers_r[464:451] };
endmodule

module bin_op_plus_uint25_t_uint1_t_0clk_de264c78(left, right, return_output);
  wire [204:0] \2485.read_pipe ;
  input [24:0] left;
  wire [24:0] left;
  output [25:0] return_output;
  wire [25:0] return_output;
  input right;
  wire right;
  assign return_output = { 1'h0, left } + { 25'h0000000, right };
  assign \2485.read_pipe  = { left, right, 179'hzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz };
endmodule

module bin_op_plus_uint8_t_uint1_t_1clk_2c08dd97(clk, left, right, return_output);
  (* unused_bits = "1 2 3 4 5 6 7 26 27 28 29 30 31 34 48" *)
  wire [68:0] \1111.read_pipe ;
  input clk;
  wire clk;
  input [7:0] left;
  wire [7:0] left;
  wire [137:0] manual_registers;
  (* unused_bits = "0 1 2 3 10 11 12 13 14 15 16 17 18 26 27 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 70 71 72 73 74 75 76 95 96 97 98 99 100 103 117" *)
  wire [137:0] manual_registers_r;
  output [8:0] return_output;
  wire [8:0] return_output;
  input right;
  wire right;
  reg [81:0] _0_;
  always @(posedge clk)
    _0_ <= { left, right, manual_registers[117:111], right, left[5:0], right, left, manual_registers[117:111], manual_registers[117], manual_registers_r[137:129], manual_registers[59:57], manual_registers_r[116:111], manual_registers[59:57], manual_registers_r[116:111], manual_registers_r[86:85], manual_registers_r[87:79], manual_registers[59:57], manual_registers[59] };
  assign { manual_registers_r[137:129], manual_registers_r[117:111], manual_registers_r[103], manual_registers_r[100:95], manual_registers_r[87:79], manual_registers_r[76:42], manual_registers_r[27:26], manual_registers_r[18:10], manual_registers_r[3:0] } = _0_;
  assign manual_registers[117:111] = { 1'h0, left[5:0] } + { 6'h00, right };
  assign manual_registers[59:57] = { 1'h0, manual_registers_r[86:85] } + { 2'h0, manual_registers_r[69] };
  assign \1111.read_pipe  = { manual_registers_r[137:129], 11'h000, manual_registers_r[117:111], 7'h00, manual_registers_r[103], 2'h0, manual_registers_r[100:95], 7'h00, manual_registers_r[87:79], 2'h0, manual_registers_r[76:69] };
  assign { manual_registers[137:118], manual_registers[110:60], manual_registers[56:0] } = { left, right, 18'h00000, right, 2'h0, left[5:0], 7'h00, right, left, 2'h0, manual_registers[117:111], manual_registers[117], manual_registers_r[137:129], manual_registers_r[116:111], manual_registers[59:57], manual_registers_r[116:111], 14'h0000, manual_registers_r[86:85], 7'h00, manual_registers_r[87:79], 6'h00, manual_registers[59:57], manual_registers[59] };
  assign { manual_registers_r[128:118], manual_registers_r[110:104], manual_registers_r[102:101], manual_registers_r[94:88], manual_registers_r[78:77], manual_registers_r[41:28], manual_registers_r[25:19], manual_registers_r[9:4] } = 56'h00000000000000;
  assign return_output = { manual_registers[59:57], manual_registers_r[116:111] };
endmodule

module bin_op_sl_uint30_t_uint5_t_1clk_811b7fa0(clk, left, right, return_output);
  input clk;
  wire clk;
  wire comb_stage0_mux_bin_op_sl_uint30_t_uint5_t_c_l20_c19_e702_cond;
  wire comb_stage0_mux_bin_op_sl_uint30_t_uint5_t_c_l21_c19_7d7c_cond;
  wire comb_stage0_mux_bin_op_sl_uint30_t_uint5_t_c_l22_c19_5b57_cond;
  wire [29:0] const_sl_16_bin_op_sl_uint30_t_uint5_t_c_l22_c55_31c5_return_output;
  wire [29:0] const_sl_16_bin_op_sl_uint30_t_uint5_t_c_l22_c55_31c5_x;
  wire [29:0] const_sl_1_bin_op_sl_uint30_t_uint5_t_c_l18_c55_1549_return_output;
  wire [29:0] const_sl_1_bin_op_sl_uint30_t_uint5_t_c_l18_c55_1549_x;
  wire [29:0] const_sl_2_bin_op_sl_uint30_t_uint5_t_c_l19_c55_60dc_return_output;
  wire [29:0] const_sl_2_bin_op_sl_uint30_t_uint5_t_c_l19_c55_60dc_x;
  wire [29:0] const_sl_4_bin_op_sl_uint30_t_uint5_t_c_l20_c55_7c55_return_output;
  wire [29:0] const_sl_4_bin_op_sl_uint30_t_uint5_t_c_l20_c55_7c55_x;
  wire [29:0] const_sl_8_bin_op_sl_uint30_t_uint5_t_c_l21_c55_d45f_return_output;
  wire [29:0] const_sl_8_bin_op_sl_uint30_t_uint5_t_c_l21_c55_d45f_x;
  input [29:0] left;
  wire [29:0] left;
  wire mux_bin_op_sl_uint30_t_uint5_t_c_l18_c19_48c1_cond;
  wire [29:0] mux_bin_op_sl_uint30_t_uint5_t_c_l18_c19_48c1_iffalse;
  wire [29:0] mux_bin_op_sl_uint30_t_uint5_t_c_l18_c19_48c1_iftrue;
  wire [29:0] mux_bin_op_sl_uint30_t_uint5_t_c_l18_c19_48c1_return_output;
  wire mux_bin_op_sl_uint30_t_uint5_t_c_l19_c19_4f1d_cond;
  wire [29:0] mux_bin_op_sl_uint30_t_uint5_t_c_l19_c19_4f1d_iffalse;
  wire [29:0] mux_bin_op_sl_uint30_t_uint5_t_c_l19_c19_4f1d_iftrue;
  wire [29:0] mux_bin_op_sl_uint30_t_uint5_t_c_l19_c19_4f1d_return_output;
  reg mux_bin_op_sl_uint30_t_uint5_t_c_l20_c19_e702_cond;
  wire [29:0] mux_bin_op_sl_uint30_t_uint5_t_c_l20_c19_e702_iffalse;
  wire [29:0] mux_bin_op_sl_uint30_t_uint5_t_c_l20_c19_e702_iftrue;
  wire [29:0] mux_bin_op_sl_uint30_t_uint5_t_c_l20_c19_e702_return_output;
  reg mux_bin_op_sl_uint30_t_uint5_t_c_l21_c19_7d7c_cond;
  wire [29:0] mux_bin_op_sl_uint30_t_uint5_t_c_l21_c19_7d7c_iffalse;
  wire [29:0] mux_bin_op_sl_uint30_t_uint5_t_c_l21_c19_7d7c_iftrue;
  wire [29:0] mux_bin_op_sl_uint30_t_uint5_t_c_l21_c19_7d7c_return_output;
  reg mux_bin_op_sl_uint30_t_uint5_t_c_l22_c19_5b57_cond;
  wire [29:0] mux_bin_op_sl_uint30_t_uint5_t_c_l22_c19_5b57_iffalse;
  wire [29:0] mux_bin_op_sl_uint30_t_uint5_t_c_l22_c19_5b57_iftrue;
  wire [29:0] mux_bin_op_sl_uint30_t_uint5_t_c_l22_c19_5b57_return_output;
  wire reg_stage0_mux_bin_op_sl_uint30_t_uint5_t_c_l20_c19_e702_cond;
  wire reg_stage0_mux_bin_op_sl_uint30_t_uint5_t_c_l21_c19_7d7c_cond;
  wire reg_stage0_mux_bin_op_sl_uint30_t_uint5_t_c_l22_c19_5b57_cond;
  output [29:0] return_output;
  wire [29:0] return_output;
  input [4:0] right;
  wire [4:0] right;
  always @(posedge clk)
    mux_bin_op_sl_uint30_t_uint5_t_c_l20_c19_e702_cond <= right[2];
  always @(posedge clk)
    mux_bin_op_sl_uint30_t_uint5_t_c_l21_c19_7d7c_cond <= right[3];
  always @(posedge clk)
    mux_bin_op_sl_uint30_t_uint5_t_c_l22_c19_5b57_cond <= right[4];
  const_sl_16_uint30_t_0clk_de264c78 const_sl_16_bin_op_sl_uint30_t_uint5_t_c_l22_c55_31c5 (
    .return_output(mux_bin_op_sl_uint30_t_uint5_t_c_l22_c19_5b57_iftrue),
    .x(const_sl_16_bin_op_sl_uint30_t_uint5_t_c_l22_c55_31c5_x)
  );
  const_sl_1_uint30_t_0clk_de264c78 const_sl_1_bin_op_sl_uint30_t_uint5_t_c_l18_c55_1549 (
    .return_output(mux_bin_op_sl_uint30_t_uint5_t_c_l18_c19_48c1_iftrue),
    .x(left)
  );
  const_sl_2_uint30_t_0clk_de264c78 const_sl_2_bin_op_sl_uint30_t_uint5_t_c_l19_c55_60dc (
    .return_output(mux_bin_op_sl_uint30_t_uint5_t_c_l19_c19_4f1d_iftrue),
    .x(const_sl_2_bin_op_sl_uint30_t_uint5_t_c_l19_c55_60dc_x)
  );
  const_sl_4_uint30_t_0clk_de264c78 const_sl_4_bin_op_sl_uint30_t_uint5_t_c_l20_c55_7c55 (
    .return_output(mux_bin_op_sl_uint30_t_uint5_t_c_l20_c19_e702_iftrue),
    .x(const_sl_4_bin_op_sl_uint30_t_uint5_t_c_l20_c55_7c55_x)
  );
  const_sl_8_uint30_t_0clk_de264c78 const_sl_8_bin_op_sl_uint30_t_uint5_t_c_l21_c55_d45f (
    .return_output(mux_bin_op_sl_uint30_t_uint5_t_c_l21_c19_7d7c_iftrue),
    .x(const_sl_8_bin_op_sl_uint30_t_uint5_t_c_l21_c55_d45f_x)
  );
  mux_uint1_t_uint30_t_uint30_t_0clk_de264c78 mux_bin_op_sl_uint30_t_uint5_t_c_l18_c19_48c1 (
    .cond(right[0]),
    .iffalse(left),
    .iftrue(mux_bin_op_sl_uint30_t_uint5_t_c_l18_c19_48c1_iftrue),
    .return_output(const_sl_2_bin_op_sl_uint30_t_uint5_t_c_l19_c55_60dc_x)
  );
  mux_uint1_t_uint30_t_uint30_t_1clk_a751855e mux_bin_op_sl_uint30_t_uint5_t_c_l19_c19_4f1d (
    .clk(clk),
    .cond(right[1]),
    .iffalse(const_sl_2_bin_op_sl_uint30_t_uint5_t_c_l19_c55_60dc_x),
    .iftrue(mux_bin_op_sl_uint30_t_uint5_t_c_l19_c19_4f1d_iftrue),
    .return_output(const_sl_4_bin_op_sl_uint30_t_uint5_t_c_l20_c55_7c55_x)
  );
  mux_uint1_t_uint30_t_uint30_t_0clk_de264c78 mux_bin_op_sl_uint30_t_uint5_t_c_l20_c19_e702 (
    .cond(mux_bin_op_sl_uint30_t_uint5_t_c_l20_c19_e702_cond),
    .iffalse(const_sl_4_bin_op_sl_uint30_t_uint5_t_c_l20_c55_7c55_x),
    .iftrue(mux_bin_op_sl_uint30_t_uint5_t_c_l20_c19_e702_iftrue),
    .return_output(const_sl_8_bin_op_sl_uint30_t_uint5_t_c_l21_c55_d45f_x)
  );
  mux_uint1_t_uint30_t_uint30_t_0clk_de264c78 mux_bin_op_sl_uint30_t_uint5_t_c_l21_c19_7d7c (
    .cond(mux_bin_op_sl_uint30_t_uint5_t_c_l21_c19_7d7c_cond),
    .iffalse(const_sl_8_bin_op_sl_uint30_t_uint5_t_c_l21_c55_d45f_x),
    .iftrue(mux_bin_op_sl_uint30_t_uint5_t_c_l21_c19_7d7c_iftrue),
    .return_output(const_sl_16_bin_op_sl_uint30_t_uint5_t_c_l22_c55_31c5_x)
  );
  mux_uint1_t_uint30_t_uint30_t_0clk_de264c78 mux_bin_op_sl_uint30_t_uint5_t_c_l22_c19_5b57 (
    .cond(mux_bin_op_sl_uint30_t_uint5_t_c_l22_c19_5b57_cond),
    .iffalse(const_sl_16_bin_op_sl_uint30_t_uint5_t_c_l22_c55_31c5_x),
    .iftrue(mux_bin_op_sl_uint30_t_uint5_t_c_l22_c19_5b57_iftrue),
    .return_output(return_output)
  );
  assign comb_stage0_mux_bin_op_sl_uint30_t_uint5_t_c_l20_c19_e702_cond = right[2];
  assign comb_stage0_mux_bin_op_sl_uint30_t_uint5_t_c_l21_c19_7d7c_cond = right[3];
  assign comb_stage0_mux_bin_op_sl_uint30_t_uint5_t_c_l22_c19_5b57_cond = right[4];
  assign const_sl_16_bin_op_sl_uint30_t_uint5_t_c_l22_c55_31c5_return_output = mux_bin_op_sl_uint30_t_uint5_t_c_l22_c19_5b57_iftrue;
  assign const_sl_1_bin_op_sl_uint30_t_uint5_t_c_l18_c55_1549_return_output = mux_bin_op_sl_uint30_t_uint5_t_c_l18_c19_48c1_iftrue;
  assign const_sl_1_bin_op_sl_uint30_t_uint5_t_c_l18_c55_1549_x = left;
  assign const_sl_2_bin_op_sl_uint30_t_uint5_t_c_l19_c55_60dc_return_output = mux_bin_op_sl_uint30_t_uint5_t_c_l19_c19_4f1d_iftrue;
  assign const_sl_4_bin_op_sl_uint30_t_uint5_t_c_l20_c55_7c55_return_output = mux_bin_op_sl_uint30_t_uint5_t_c_l20_c19_e702_iftrue;
  assign const_sl_8_bin_op_sl_uint30_t_uint5_t_c_l21_c55_d45f_return_output = mux_bin_op_sl_uint30_t_uint5_t_c_l21_c19_7d7c_iftrue;
  assign mux_bin_op_sl_uint30_t_uint5_t_c_l18_c19_48c1_cond = right[0];
  assign mux_bin_op_sl_uint30_t_uint5_t_c_l18_c19_48c1_iffalse = left;
  assign mux_bin_op_sl_uint30_t_uint5_t_c_l18_c19_48c1_return_output = const_sl_2_bin_op_sl_uint30_t_uint5_t_c_l19_c55_60dc_x;
  assign mux_bin_op_sl_uint30_t_uint5_t_c_l19_c19_4f1d_cond = right[1];
  assign mux_bin_op_sl_uint30_t_uint5_t_c_l19_c19_4f1d_iffalse = const_sl_2_bin_op_sl_uint30_t_uint5_t_c_l19_c55_60dc_x;
  assign mux_bin_op_sl_uint30_t_uint5_t_c_l19_c19_4f1d_return_output = const_sl_4_bin_op_sl_uint30_t_uint5_t_c_l20_c55_7c55_x;
  assign mux_bin_op_sl_uint30_t_uint5_t_c_l20_c19_e702_iffalse = const_sl_4_bin_op_sl_uint30_t_uint5_t_c_l20_c55_7c55_x;
  assign mux_bin_op_sl_uint30_t_uint5_t_c_l20_c19_e702_return_output = const_sl_8_bin_op_sl_uint30_t_uint5_t_c_l21_c55_d45f_x;
  assign mux_bin_op_sl_uint30_t_uint5_t_c_l21_c19_7d7c_iffalse = const_sl_8_bin_op_sl_uint30_t_uint5_t_c_l21_c55_d45f_x;
  assign mux_bin_op_sl_uint30_t_uint5_t_c_l21_c19_7d7c_return_output = const_sl_16_bin_op_sl_uint30_t_uint5_t_c_l22_c55_31c5_x;
  assign mux_bin_op_sl_uint30_t_uint5_t_c_l22_c19_5b57_iffalse = const_sl_16_bin_op_sl_uint30_t_uint5_t_c_l22_c55_31c5_x;
  assign mux_bin_op_sl_uint30_t_uint5_t_c_l22_c19_5b57_return_output = return_output;
  assign reg_stage0_mux_bin_op_sl_uint30_t_uint5_t_c_l20_c19_e702_cond = mux_bin_op_sl_uint30_t_uint5_t_c_l20_c19_e702_cond;
  assign reg_stage0_mux_bin_op_sl_uint30_t_uint5_t_c_l21_c19_7d7c_cond = mux_bin_op_sl_uint30_t_uint5_t_c_l21_c19_7d7c_cond;
  assign reg_stage0_mux_bin_op_sl_uint30_t_uint5_t_c_l22_c19_5b57_cond = mux_bin_op_sl_uint30_t_uint5_t_c_l22_c19_5b57_cond;
endmodule

module bin_op_sr_int31_t_uint8_t_0clk_4e6656cf(left, right, return_output);
  wire [7:0] bin_op_gt_bin_op_sr_int31_t_uint8_t_c_l17_c6_0225_left;
  wire bin_op_gt_bin_op_sr_int31_t_uint8_t_c_l17_c6_0225_return_output;
  wire [4:0] bin_op_gt_bin_op_sr_int31_t_uint8_t_c_l17_c6_0225_right;
  wire [30:0] const_sr_16_bin_op_sr_int31_t_uint8_t_c_l35_c53_9986_return_output;
  wire [30:0] const_sr_16_bin_op_sr_int31_t_uint8_t_c_l35_c53_9986_x;
  wire [30:0] const_sr_1_bin_op_sr_int31_t_uint8_t_c_l31_c53_80cc_return_output;
  wire [30:0] const_sr_1_bin_op_sr_int31_t_uint8_t_c_l31_c53_80cc_x;
  wire [30:0] const_sr_2_bin_op_sr_int31_t_uint8_t_c_l32_c53_ebb8_return_output;
  wire [30:0] const_sr_2_bin_op_sr_int31_t_uint8_t_c_l32_c53_ebb8_x;
  wire [30:0] const_sr_4_bin_op_sr_int31_t_uint8_t_c_l33_c53_a906_return_output;
  wire [30:0] const_sr_4_bin_op_sr_int31_t_uint8_t_c_l33_c53_a906_x;
  wire [30:0] const_sr_8_bin_op_sr_int31_t_uint8_t_c_l34_c53_e467_return_output;
  wire [30:0] const_sr_8_bin_op_sr_int31_t_uint8_t_c_l34_c53_e467_x;
  input [30:0] left;
  wire [30:0] left;
  wire mux_bin_op_sr_int31_t_uint8_t_c_l31_c18_2b62_cond;
  wire [30:0] mux_bin_op_sr_int31_t_uint8_t_c_l31_c18_2b62_iffalse;
  wire [30:0] mux_bin_op_sr_int31_t_uint8_t_c_l31_c18_2b62_iftrue;
  wire [30:0] mux_bin_op_sr_int31_t_uint8_t_c_l31_c18_2b62_return_output;
  wire mux_bin_op_sr_int31_t_uint8_t_c_l32_c18_1608_cond;
  wire [30:0] mux_bin_op_sr_int31_t_uint8_t_c_l32_c18_1608_iffalse;
  wire [30:0] mux_bin_op_sr_int31_t_uint8_t_c_l32_c18_1608_iftrue;
  wire [30:0] mux_bin_op_sr_int31_t_uint8_t_c_l32_c18_1608_return_output;
  wire mux_bin_op_sr_int31_t_uint8_t_c_l33_c18_e007_cond;
  wire [30:0] mux_bin_op_sr_int31_t_uint8_t_c_l33_c18_e007_iffalse;
  wire [30:0] mux_bin_op_sr_int31_t_uint8_t_c_l33_c18_e007_iftrue;
  wire [30:0] mux_bin_op_sr_int31_t_uint8_t_c_l33_c18_e007_return_output;
  wire mux_bin_op_sr_int31_t_uint8_t_c_l34_c18_52ba_cond;
  wire [30:0] mux_bin_op_sr_int31_t_uint8_t_c_l34_c18_52ba_iffalse;
  wire [30:0] mux_bin_op_sr_int31_t_uint8_t_c_l34_c18_52ba_iftrue;
  wire [30:0] mux_bin_op_sr_int31_t_uint8_t_c_l34_c18_52ba_return_output;
  wire mux_bin_op_sr_int31_t_uint8_t_c_l35_c18_be94_cond;
  wire [30:0] mux_bin_op_sr_int31_t_uint8_t_c_l35_c18_be94_iffalse;
  wire [30:0] mux_bin_op_sr_int31_t_uint8_t_c_l35_c18_be94_iftrue;
  wire [30:0] mux_bin_op_sr_int31_t_uint8_t_c_l35_c18_be94_return_output;
  output [30:0] return_output;
  wire [30:0] return_output;
  input [7:0] right;
  wire [7:0] right;
  wire rv_mux_bin_op_sr_int31_t_uint8_t_c_l17_c3_268c_cond;
  wire [30:0] rv_mux_bin_op_sr_int31_t_uint8_t_c_l17_c3_268c_iffalse;
  wire [30:0] rv_mux_bin_op_sr_int31_t_uint8_t_c_l17_c3_268c_iftrue;
  wire [30:0] rv_mux_bin_op_sr_int31_t_uint8_t_c_l17_c3_268c_return_output;
  bin_op_gt_uint8_t_uint5_t_0clk_de264c78 bin_op_gt_bin_op_sr_int31_t_uint8_t_c_l17_c6_0225 (
    .left(right),
    .return_output(rv_mux_bin_op_sr_int31_t_uint8_t_c_l17_c3_268c_cond),
    .right(5'h1e)
  );
  const_sr_16_int31_t_0clk_de264c78 const_sr_16_bin_op_sr_int31_t_uint8_t_c_l35_c53_9986 (
    .return_output(mux_bin_op_sr_int31_t_uint8_t_c_l35_c18_be94_iftrue),
    .x(const_sr_16_bin_op_sr_int31_t_uint8_t_c_l35_c53_9986_x)
  );
  const_sr_1_int31_t_0clk_de264c78 const_sr_1_bin_op_sr_int31_t_uint8_t_c_l31_c53_80cc (
    .return_output(mux_bin_op_sr_int31_t_uint8_t_c_l31_c18_2b62_iftrue),
    .x(left)
  );
  const_sr_2_int31_t_0clk_de264c78 const_sr_2_bin_op_sr_int31_t_uint8_t_c_l32_c53_ebb8 (
    .return_output(mux_bin_op_sr_int31_t_uint8_t_c_l32_c18_1608_iftrue),
    .x(const_sr_2_bin_op_sr_int31_t_uint8_t_c_l32_c53_ebb8_x)
  );
  const_sr_4_int31_t_0clk_de264c78 const_sr_4_bin_op_sr_int31_t_uint8_t_c_l33_c53_a906 (
    .return_output(mux_bin_op_sr_int31_t_uint8_t_c_l33_c18_e007_iftrue),
    .x(const_sr_4_bin_op_sr_int31_t_uint8_t_c_l33_c53_a906_x)
  );
  const_sr_8_int31_t_0clk_de264c78 const_sr_8_bin_op_sr_int31_t_uint8_t_c_l34_c53_e467 (
    .return_output(mux_bin_op_sr_int31_t_uint8_t_c_l34_c18_52ba_iftrue),
    .x(const_sr_8_bin_op_sr_int31_t_uint8_t_c_l34_c53_e467_x)
  );
  mux_uint1_t_int31_t_int31_t_0clk_de264c78 mux_bin_op_sr_int31_t_uint8_t_c_l31_c18_2b62 (
    .cond(right[0]),
    .iffalse(left),
    .iftrue(mux_bin_op_sr_int31_t_uint8_t_c_l31_c18_2b62_iftrue),
    .return_output(const_sr_2_bin_op_sr_int31_t_uint8_t_c_l32_c53_ebb8_x)
  );
  mux_uint1_t_int31_t_int31_t_0clk_de264c78 mux_bin_op_sr_int31_t_uint8_t_c_l32_c18_1608 (
    .cond(right[1]),
    .iffalse(const_sr_2_bin_op_sr_int31_t_uint8_t_c_l32_c53_ebb8_x),
    .iftrue(mux_bin_op_sr_int31_t_uint8_t_c_l32_c18_1608_iftrue),
    .return_output(const_sr_4_bin_op_sr_int31_t_uint8_t_c_l33_c53_a906_x)
  );
  mux_uint1_t_int31_t_int31_t_0clk_de264c78 mux_bin_op_sr_int31_t_uint8_t_c_l33_c18_e007 (
    .cond(right[2]),
    .iffalse(const_sr_4_bin_op_sr_int31_t_uint8_t_c_l33_c53_a906_x),
    .iftrue(mux_bin_op_sr_int31_t_uint8_t_c_l33_c18_e007_iftrue),
    .return_output(const_sr_8_bin_op_sr_int31_t_uint8_t_c_l34_c53_e467_x)
  );
  mux_uint1_t_int31_t_int31_t_0clk_de264c78 mux_bin_op_sr_int31_t_uint8_t_c_l34_c18_52ba (
    .cond(right[3]),
    .iffalse(const_sr_8_bin_op_sr_int31_t_uint8_t_c_l34_c53_e467_x),
    .iftrue(mux_bin_op_sr_int31_t_uint8_t_c_l34_c18_52ba_iftrue),
    .return_output(const_sr_16_bin_op_sr_int31_t_uint8_t_c_l35_c53_9986_x)
  );
  mux_uint1_t_int31_t_int31_t_0clk_de264c78 mux_bin_op_sr_int31_t_uint8_t_c_l35_c18_be94 (
    .cond(right[4]),
    .iffalse(const_sr_16_bin_op_sr_int31_t_uint8_t_c_l35_c53_9986_x),
    .iftrue(mux_bin_op_sr_int31_t_uint8_t_c_l35_c18_be94_iftrue),
    .return_output(rv_mux_bin_op_sr_int31_t_uint8_t_c_l17_c3_268c_iffalse)
  );
  mux_uint1_t_int31_t_int31_t_0clk_de264c78 rv_mux_bin_op_sr_int31_t_uint8_t_c_l17_c3_268c (
    .cond(rv_mux_bin_op_sr_int31_t_uint8_t_c_l17_c3_268c_cond),
    .iffalse(rv_mux_bin_op_sr_int31_t_uint8_t_c_l17_c3_268c_iffalse),
    .iftrue({ left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30] }),
    .return_output(return_output)
  );
  assign bin_op_gt_bin_op_sr_int31_t_uint8_t_c_l17_c6_0225_left = right;
  assign bin_op_gt_bin_op_sr_int31_t_uint8_t_c_l17_c6_0225_return_output = rv_mux_bin_op_sr_int31_t_uint8_t_c_l17_c3_268c_cond;
  assign bin_op_gt_bin_op_sr_int31_t_uint8_t_c_l17_c6_0225_right = 5'h1e;
  assign const_sr_16_bin_op_sr_int31_t_uint8_t_c_l35_c53_9986_return_output = mux_bin_op_sr_int31_t_uint8_t_c_l35_c18_be94_iftrue;
  assign const_sr_1_bin_op_sr_int31_t_uint8_t_c_l31_c53_80cc_return_output = mux_bin_op_sr_int31_t_uint8_t_c_l31_c18_2b62_iftrue;
  assign const_sr_1_bin_op_sr_int31_t_uint8_t_c_l31_c53_80cc_x = left;
  assign const_sr_2_bin_op_sr_int31_t_uint8_t_c_l32_c53_ebb8_return_output = mux_bin_op_sr_int31_t_uint8_t_c_l32_c18_1608_iftrue;
  assign const_sr_4_bin_op_sr_int31_t_uint8_t_c_l33_c53_a906_return_output = mux_bin_op_sr_int31_t_uint8_t_c_l33_c18_e007_iftrue;
  assign const_sr_8_bin_op_sr_int31_t_uint8_t_c_l34_c53_e467_return_output = mux_bin_op_sr_int31_t_uint8_t_c_l34_c18_52ba_iftrue;
  assign mux_bin_op_sr_int31_t_uint8_t_c_l31_c18_2b62_cond = right[0];
  assign mux_bin_op_sr_int31_t_uint8_t_c_l31_c18_2b62_iffalse = left;
  assign mux_bin_op_sr_int31_t_uint8_t_c_l31_c18_2b62_return_output = const_sr_2_bin_op_sr_int31_t_uint8_t_c_l32_c53_ebb8_x;
  assign mux_bin_op_sr_int31_t_uint8_t_c_l32_c18_1608_cond = right[1];
  assign mux_bin_op_sr_int31_t_uint8_t_c_l32_c18_1608_iffalse = const_sr_2_bin_op_sr_int31_t_uint8_t_c_l32_c53_ebb8_x;
  assign mux_bin_op_sr_int31_t_uint8_t_c_l32_c18_1608_return_output = const_sr_4_bin_op_sr_int31_t_uint8_t_c_l33_c53_a906_x;
  assign mux_bin_op_sr_int31_t_uint8_t_c_l33_c18_e007_cond = right[2];
  assign mux_bin_op_sr_int31_t_uint8_t_c_l33_c18_e007_iffalse = const_sr_4_bin_op_sr_int31_t_uint8_t_c_l33_c53_a906_x;
  assign mux_bin_op_sr_int31_t_uint8_t_c_l33_c18_e007_return_output = const_sr_8_bin_op_sr_int31_t_uint8_t_c_l34_c53_e467_x;
  assign mux_bin_op_sr_int31_t_uint8_t_c_l34_c18_52ba_cond = right[3];
  assign mux_bin_op_sr_int31_t_uint8_t_c_l34_c18_52ba_iffalse = const_sr_8_bin_op_sr_int31_t_uint8_t_c_l34_c53_e467_x;
  assign mux_bin_op_sr_int31_t_uint8_t_c_l34_c18_52ba_return_output = const_sr_16_bin_op_sr_int31_t_uint8_t_c_l35_c53_9986_x;
  assign mux_bin_op_sr_int31_t_uint8_t_c_l35_c18_be94_cond = right[4];
  assign mux_bin_op_sr_int31_t_uint8_t_c_l35_c18_be94_iffalse = const_sr_16_bin_op_sr_int31_t_uint8_t_c_l35_c53_9986_x;
  assign mux_bin_op_sr_int31_t_uint8_t_c_l35_c18_be94_return_output = rv_mux_bin_op_sr_int31_t_uint8_t_c_l17_c3_268c_iffalse;
  assign rv_mux_bin_op_sr_int31_t_uint8_t_c_l17_c3_268c_iftrue = { left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30], left[30] };
  assign rv_mux_bin_op_sr_int31_t_uint8_t_c_l17_c3_268c_return_output = return_output;
endmodule

module const_sl_16_uint30_t_0clk_de264c78(x, return_output);
  (* unused_bits = "14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29" *)
  wire [59:0] \4350.read_pipe ;
  output [29:0] return_output;
  wire [29:0] return_output;
  input [29:0] x;
  wire [29:0] x;
  assign \4350.read_pipe  = { 30'hzzzzzzzz, x };
  assign return_output = { x[13:0], 16'h0000 };
endmodule

module const_sl_1_uint30_t_0clk_de264c78(x, return_output);
  (* unused_bits = "29" *)
  wire [59:0] \4220.read_pipe ;
  output [29:0] return_output;
  wire [29:0] return_output;
  input [29:0] x;
  wire [29:0] x;
  assign \4220.read_pipe  = { 30'hzzzzzzzz, x };
  assign return_output = { x[28:0], 1'h0 };
endmodule

module const_sl_2_uint30_t_0clk_de264c78(x, return_output);
  (* unused_bits = "28 29" *)
  wire [59:0] \4261.read_pipe ;
  output [29:0] return_output;
  wire [29:0] return_output;
  input [29:0] x;
  wire [29:0] x;
  assign \4261.read_pipe  = { 30'hzzzzzzzz, x };
  assign return_output = { x[27:0], 2'h0 };
endmodule

module const_sl_4_uint30_t_0clk_de264c78(x, return_output);
  (* unused_bits = "26 27 28 29" *)
  wire [59:0] \4312.read_pipe ;
  output [29:0] return_output;
  wire [29:0] return_output;
  input [29:0] x;
  wire [29:0] x;
  assign \4312.read_pipe  = { 30'hzzzzzzzz, x };
  assign return_output = { x[25:0], 4'h0 };
endmodule

module const_sl_8_uint30_t_0clk_de264c78(x, return_output);
  (* unused_bits = "22 23 24 25 26 27 28 29" *)
  wire [59:0] \4331.read_pipe ;
  output [29:0] return_output;
  wire [29:0] return_output;
  input [29:0] x;
  wire [29:0] x;
  assign \4331.read_pipe  = { 30'hzzzzzzzz, x };
  assign return_output = { x[21:0], 8'h00 };
endmodule

module const_sr_16_int31_t_0clk_de264c78(x, return_output);
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15" *)
  wire [61:0] \2685.read_pipe ;
  output [30:0] return_output;
  wire [30:0] return_output;
  input [30:0] x;
  wire [30:0] x;
  assign \2685.read_pipe  = { 31'hzzzzzzzz, x };
  assign return_output = { x[30], x[30], x[30], x[30], x[30], x[30], x[30], x[30], x[30], x[30], x[30], x[30], x[30], x[30], x[30], x[30], x[30:16] };
endmodule

module const_sr_1_int31_t_0clk_de264c78(x, return_output);
  (* unused_bits = "0" *)
  wire [61:0] \2609.read_pipe ;
  output [30:0] return_output;
  wire [30:0] return_output;
  input [30:0] x;
  wire [30:0] x;
  assign \2609.read_pipe  = { 31'hzzzzzzzz, x };
  assign return_output = { x[30], x[30:1] };
endmodule

module const_sr_2_int31_t_0clk_de264c78(x, return_output);
  (* unused_bits = "0 1" *)
  wire [61:0] \2628.read_pipe ;
  output [30:0] return_output;
  wire [30:0] return_output;
  input [30:0] x;
  wire [30:0] x;
  assign \2628.read_pipe  = { 31'hzzzzzzzz, x };
  assign return_output = { x[30], x[30], x[30:2] };
endmodule

module const_sr_4_int31_t_0clk_de264c78(x, return_output);
  (* unused_bits = "0 1 2 3" *)
  wire [61:0] \2647.read_pipe ;
  output [30:0] return_output;
  wire [30:0] return_output;
  input [30:0] x;
  wire [30:0] x;
  assign \2647.read_pipe  = { 31'hzzzzzzzz, x };
  assign return_output = { x[30], x[30], x[30], x[30], x[30:4] };
endmodule

module const_sr_8_int31_t_0clk_de264c78(x, return_output);
  (* unused_bits = "0 1 2 3 4 5 6 7" *)
  wire [61:0] \2666.read_pipe ;
  output [30:0] return_output;
  wire [30:0] return_output;
  input [30:0] x;
  wire [30:0] x;
  assign \2666.read_pipe  = { 31'hzzzzzzzz, x };
  assign return_output = { x[30], x[30], x[30], x[30], x[30], x[30], x[30], x[30], x[30:8] };
endmodule

module count0s_uint30_2clk_36370fec(clk, x, return_output);
  wire [5:0] bin_op_eq_bit_math_h_l101_c14_5b94_left;
  wire bin_op_eq_bit_math_h_l101_c14_5b94_return_output;
  wire bin_op_eq_bit_math_h_l101_c14_5b94_right;
  wire [6:0] bin_op_eq_bit_math_h_l108_c14_babe_left;
  wire bin_op_eq_bit_math_h_l108_c14_babe_return_output;
  wire bin_op_eq_bit_math_h_l108_c14_babe_right;
  wire [7:0] bin_op_eq_bit_math_h_l115_c14_bae2_left;
  wire bin_op_eq_bit_math_h_l115_c14_bae2_return_output;
  wire bin_op_eq_bit_math_h_l115_c14_bae2_right;
  wire [8:0] bin_op_eq_bit_math_h_l122_c14_21a0_left;
  wire bin_op_eq_bit_math_h_l122_c14_21a0_return_output;
  wire bin_op_eq_bit_math_h_l122_c14_21a0_right;
  wire [9:0] bin_op_eq_bit_math_h_l129_c14_fe57_left;
  wire bin_op_eq_bit_math_h_l129_c14_fe57_return_output;
  wire bin_op_eq_bit_math_h_l129_c14_fe57_right;
  wire [10:0] bin_op_eq_bit_math_h_l136_c15_de7c_left;
  wire bin_op_eq_bit_math_h_l136_c15_de7c_return_output;
  wire bin_op_eq_bit_math_h_l136_c15_de7c_right;
  wire [11:0] bin_op_eq_bit_math_h_l143_c15_a886_left;
  wire bin_op_eq_bit_math_h_l143_c15_a886_return_output;
  wire bin_op_eq_bit_math_h_l143_c15_a886_right;
  wire [12:0] bin_op_eq_bit_math_h_l150_c15_fa22_left;
  wire bin_op_eq_bit_math_h_l150_c15_fa22_return_output;
  wire bin_op_eq_bit_math_h_l150_c15_fa22_right;
  wire [13:0] bin_op_eq_bit_math_h_l157_c15_cb12_left;
  wire bin_op_eq_bit_math_h_l157_c15_cb12_return_output;
  wire bin_op_eq_bit_math_h_l157_c15_cb12_right;
  wire [14:0] bin_op_eq_bit_math_h_l164_c15_60b4_left;
  wire bin_op_eq_bit_math_h_l164_c15_60b4_return_output;
  wire bin_op_eq_bit_math_h_l164_c15_60b4_right;
  wire [15:0] bin_op_eq_bit_math_h_l171_c15_543a_left;
  wire bin_op_eq_bit_math_h_l171_c15_543a_return_output;
  wire bin_op_eq_bit_math_h_l171_c15_543a_right;
  wire [16:0] bin_op_eq_bit_math_h_l178_c15_e890_left;
  wire bin_op_eq_bit_math_h_l178_c15_e890_return_output;
  wire bin_op_eq_bit_math_h_l178_c15_e890_right;
  wire [17:0] bin_op_eq_bit_math_h_l185_c15_1e70_left;
  wire bin_op_eq_bit_math_h_l185_c15_1e70_return_output;
  wire bin_op_eq_bit_math_h_l185_c15_1e70_right;
  wire [18:0] bin_op_eq_bit_math_h_l192_c15_3ada_left;
  wire bin_op_eq_bit_math_h_l192_c15_3ada_return_output;
  wire bin_op_eq_bit_math_h_l192_c15_3ada_right;
  wire [19:0] bin_op_eq_bit_math_h_l199_c15_28ce_left;
  wire bin_op_eq_bit_math_h_l199_c15_28ce_return_output;
  wire bin_op_eq_bit_math_h_l199_c15_28ce_right;
  wire [20:0] bin_op_eq_bit_math_h_l206_c15_db44_left;
  wire bin_op_eq_bit_math_h_l206_c15_db44_return_output;
  wire bin_op_eq_bit_math_h_l206_c15_db44_right;
  wire [21:0] bin_op_eq_bit_math_h_l213_c15_7921_left;
  wire bin_op_eq_bit_math_h_l213_c15_7921_return_output;
  wire bin_op_eq_bit_math_h_l213_c15_7921_right;
  wire [22:0] bin_op_eq_bit_math_h_l220_c15_2f4f_left;
  wire bin_op_eq_bit_math_h_l220_c15_2f4f_return_output;
  wire bin_op_eq_bit_math_h_l220_c15_2f4f_right;
  wire [23:0] bin_op_eq_bit_math_h_l227_c15_e03a_left;
  wire bin_op_eq_bit_math_h_l227_c15_e03a_return_output;
  wire bin_op_eq_bit_math_h_l227_c15_e03a_right;
  wire [24:0] bin_op_eq_bit_math_h_l234_c15_67cd_left;
  wire bin_op_eq_bit_math_h_l234_c15_67cd_return_output;
  wire bin_op_eq_bit_math_h_l234_c15_67cd_right;
  wire [25:0] bin_op_eq_bit_math_h_l241_c15_08e7_left;
  wire bin_op_eq_bit_math_h_l241_c15_08e7_return_output;
  wire bin_op_eq_bit_math_h_l241_c15_08e7_right;
  wire [26:0] bin_op_eq_bit_math_h_l248_c15_c727_left;
  wire bin_op_eq_bit_math_h_l248_c15_c727_return_output;
  wire bin_op_eq_bit_math_h_l248_c15_c727_right;
  wire [27:0] bin_op_eq_bit_math_h_l255_c15_e537_left;
  wire bin_op_eq_bit_math_h_l255_c15_e537_return_output;
  wire bin_op_eq_bit_math_h_l255_c15_e537_right;
  wire [28:0] bin_op_eq_bit_math_h_l262_c15_e1e1_left;
  wire bin_op_eq_bit_math_h_l262_c15_e1e1_return_output;
  wire bin_op_eq_bit_math_h_l262_c15_e1e1_right;
  wire [29:0] bin_op_eq_bit_math_h_l269_c15_f85a_left;
  wire bin_op_eq_bit_math_h_l269_c15_f85a_return_output;
  wire bin_op_eq_bit_math_h_l269_c15_f85a_right;
  wire [29:0] bin_op_eq_bit_math_h_l70_c24_a570_left;
  wire bin_op_eq_bit_math_h_l70_c24_a570_return_output;
  wire bin_op_eq_bit_math_h_l70_c24_a570_right;
  wire [1:0] bin_op_eq_bit_math_h_l73_c14_01fd_left;
  wire bin_op_eq_bit_math_h_l73_c14_01fd_return_output;
  wire bin_op_eq_bit_math_h_l73_c14_01fd_right;
  wire [2:0] bin_op_eq_bit_math_h_l80_c14_cd5a_left;
  wire bin_op_eq_bit_math_h_l80_c14_cd5a_return_output;
  wire bin_op_eq_bit_math_h_l80_c14_cd5a_right;
  wire [3:0] bin_op_eq_bit_math_h_l87_c14_623c_left;
  wire bin_op_eq_bit_math_h_l87_c14_623c_return_output;
  wire bin_op_eq_bit_math_h_l87_c14_623c_right;
  wire [4:0] bin_op_eq_bit_math_h_l94_c14_8f78_left;
  wire bin_op_eq_bit_math_h_l94_c14_8f78_return_output;
  wire bin_op_eq_bit_math_h_l94_c14_8f78_right;
  wire bin_op_or_bit_math_h_l579_c22_bb82_left;
  wire [1:0] bin_op_or_bit_math_h_l579_c22_bb82_return_output;
  wire [1:0] bin_op_or_bit_math_h_l579_c22_bb82_right;
  wire [1:0] bin_op_or_bit_math_h_l581_c22_51fa_left;
  wire [2:0] bin_op_or_bit_math_h_l581_c22_51fa_return_output;
  wire [2:0] bin_op_or_bit_math_h_l581_c22_51fa_right;
  wire [2:0] bin_op_or_bit_math_h_l583_c22_8443_left;
  wire [2:0] bin_op_or_bit_math_h_l583_c22_8443_return_output;
  wire [2:0] bin_op_or_bit_math_h_l583_c22_8443_right;
  wire [2:0] bin_op_or_bit_math_h_l585_c22_5a75_left;
  wire [3:0] bin_op_or_bit_math_h_l585_c22_5a75_return_output;
  wire [3:0] bin_op_or_bit_math_h_l585_c22_5a75_right;
  wire [3:0] bin_op_or_bit_math_h_l587_c22_bb67_left;
  wire [3:0] bin_op_or_bit_math_h_l587_c22_bb67_return_output;
  wire [3:0] bin_op_or_bit_math_h_l587_c22_bb67_right;
  wire [3:0] bin_op_or_bit_math_h_l589_c22_c8e2_left;
  wire [3:0] bin_op_or_bit_math_h_l589_c22_c8e2_return_output;
  wire [3:0] bin_op_or_bit_math_h_l589_c22_c8e2_right;
  wire [3:0] bin_op_or_bit_math_h_l591_c22_3ea9_left;
  wire [3:0] bin_op_or_bit_math_h_l591_c22_3ea9_return_output;
  wire [3:0] bin_op_or_bit_math_h_l591_c22_3ea9_right;
  wire [3:0] bin_op_or_bit_math_h_l593_c22_d2c2_left;
  wire [4:0] bin_op_or_bit_math_h_l593_c22_d2c2_return_output;
  wire [4:0] bin_op_or_bit_math_h_l593_c22_d2c2_right;
  wire [4:0] bin_op_or_bit_math_h_l595_c22_4cd9_left;
  wire [4:0] bin_op_or_bit_math_h_l595_c22_4cd9_return_output;
  wire [4:0] bin_op_or_bit_math_h_l595_c22_4cd9_right;
  wire [4:0] bin_op_or_bit_math_h_l597_c22_b895_left;
  wire [4:0] bin_op_or_bit_math_h_l597_c22_b895_return_output;
  wire [4:0] bin_op_or_bit_math_h_l597_c22_b895_right;
  wire [4:0] bin_op_or_bit_math_h_l599_c23_f0fa_left;
  wire [4:0] bin_op_or_bit_math_h_l599_c23_f0fa_return_output;
  wire [4:0] bin_op_or_bit_math_h_l599_c23_f0fa_right;
  wire [4:0] bin_op_or_bit_math_h_l601_c23_23c5_left;
  wire [4:0] bin_op_or_bit_math_h_l601_c23_23c5_return_output;
  wire [4:0] bin_op_or_bit_math_h_l601_c23_23c5_right;
  wire [4:0] bin_op_or_bit_math_h_l603_c23_bbd3_left;
  wire [4:0] bin_op_or_bit_math_h_l603_c23_bbd3_return_output;
  wire [4:0] bin_op_or_bit_math_h_l603_c23_bbd3_right;
  wire [4:0] bin_op_or_bit_math_h_l605_c23_518e_left;
  wire [4:0] bin_op_or_bit_math_h_l605_c23_518e_return_output;
  wire [4:0] bin_op_or_bit_math_h_l605_c23_518e_right;
  wire [4:0] bin_op_or_bit_math_h_l607_c23_231c_left;
  wire [4:0] bin_op_or_bit_math_h_l607_c23_231c_return_output;
  wire [4:0] bin_op_or_bit_math_h_l607_c23_231c_right;
  wire [1:0] bin_op_or_bit_math_h_l611_c22_b518_left;
  wire [2:0] bin_op_or_bit_math_h_l611_c22_b518_return_output;
  wire [2:0] bin_op_or_bit_math_h_l611_c22_b518_right;
  wire [2:0] bin_op_or_bit_math_h_l613_c22_3ea1_left;
  wire [3:0] bin_op_or_bit_math_h_l613_c22_3ea1_return_output;
  wire [3:0] bin_op_or_bit_math_h_l613_c22_3ea1_right;
  wire [3:0] bin_op_or_bit_math_h_l615_c22_490c_left;
  wire [3:0] bin_op_or_bit_math_h_l615_c22_490c_return_output;
  wire [3:0] bin_op_or_bit_math_h_l615_c22_490c_right;
  wire [3:0] bin_op_or_bit_math_h_l617_c22_393d_left;
  wire [4:0] bin_op_or_bit_math_h_l617_c22_393d_return_output;
  wire [4:0] bin_op_or_bit_math_h_l617_c22_393d_right;
  wire [4:0] bin_op_or_bit_math_h_l619_c22_4054_left;
  wire [4:0] bin_op_or_bit_math_h_l619_c22_4054_return_output;
  wire [4:0] bin_op_or_bit_math_h_l619_c22_4054_right;
  wire [4:0] bin_op_or_bit_math_h_l621_c22_6a3f_left;
  wire [4:0] bin_op_or_bit_math_h_l621_c22_6a3f_return_output;
  wire [4:0] bin_op_or_bit_math_h_l621_c22_6a3f_right;
  wire [4:0] bin_op_or_bit_math_h_l623_c22_c11c_left;
  wire [4:0] bin_op_or_bit_math_h_l623_c22_c11c_return_output;
  wire [4:0] bin_op_or_bit_math_h_l623_c22_c11c_right;
  wire [2:0] bin_op_or_bit_math_h_l630_c22_9142_left;
  wire [3:0] bin_op_or_bit_math_h_l630_c22_9142_return_output;
  wire [3:0] bin_op_or_bit_math_h_l630_c22_9142_right;
  wire [3:0] bin_op_or_bit_math_h_l632_c22_5be1_left;
  wire [4:0] bin_op_or_bit_math_h_l632_c22_5be1_return_output;
  wire [4:0] bin_op_or_bit_math_h_l632_c22_5be1_right;
  wire [4:0] bin_op_or_bit_math_h_l634_c22_7f79_left;
  wire [4:0] bin_op_or_bit_math_h_l634_c22_7f79_return_output;
  wire [4:0] bin_op_or_bit_math_h_l634_c22_7f79_right;
  wire [4:0] bin_op_or_bit_math_h_l636_c22_95bd_left;
  wire [4:0] bin_op_or_bit_math_h_l636_c22_95bd_return_output;
  wire [4:0] bin_op_or_bit_math_h_l636_c22_95bd_right;
  wire [3:0] bin_op_or_bit_math_h_l640_c22_b5e6_left;
  wire [4:0] bin_op_or_bit_math_h_l640_c22_b5e6_return_output;
  wire [4:0] bin_op_or_bit_math_h_l640_c22_b5e6_right;
  wire [4:0] bin_op_or_bit_math_h_l642_c22_d244_left;
  wire [4:0] bin_op_or_bit_math_h_l642_c22_d244_return_output;
  wire [4:0] bin_op_or_bit_math_h_l642_c22_d244_right;
  wire [4:0] bin_op_or_bit_math_h_l646_c22_86b9_left;
  wire [4:0] bin_op_or_bit_math_h_l646_c22_86b9_return_output;
  wire [4:0] bin_op_or_bit_math_h_l646_c22_86b9_right;
  input clk;
  wire clk;
  wire [34:0] manual_registers;
  reg [34:0] manual_registers_r = 35'h000000000;
  output [4:0] return_output;
  wire [4:0] return_output;
  wire sum10_mux_bit_math_h_l366_c3_bbca_cond;
  wire [3:0] sum10_mux_bit_math_h_l366_c3_bbca_iffalse;
  wire [3:0] sum10_mux_bit_math_h_l366_c3_bbca_iftrue;
  wire [3:0] sum10_mux_bit_math_h_l366_c3_bbca_return_output;
  wire sum11_mux_bit_math_h_l376_c3_54fc_cond;
  wire [3:0] sum11_mux_bit_math_h_l376_c3_54fc_iffalse;
  wire [3:0] sum11_mux_bit_math_h_l376_c3_54fc_iftrue;
  wire [3:0] sum11_mux_bit_math_h_l376_c3_54fc_return_output;
  wire sum12_mux_bit_math_h_l386_c3_b7f9_cond;
  wire [3:0] sum12_mux_bit_math_h_l386_c3_b7f9_iffalse;
  wire [3:0] sum12_mux_bit_math_h_l386_c3_b7f9_iftrue;
  wire [3:0] sum12_mux_bit_math_h_l386_c3_b7f9_return_output;
  wire sum13_mux_bit_math_h_l396_c3_8cb2_cond;
  wire [3:0] sum13_mux_bit_math_h_l396_c3_8cb2_iffalse;
  wire [3:0] sum13_mux_bit_math_h_l396_c3_8cb2_iftrue;
  wire [3:0] sum13_mux_bit_math_h_l396_c3_8cb2_return_output;
  wire sum14_mux_bit_math_h_l406_c3_fccb_cond;
  wire [3:0] sum14_mux_bit_math_h_l406_c3_fccb_iffalse;
  wire [3:0] sum14_mux_bit_math_h_l406_c3_fccb_iftrue;
  wire [3:0] sum14_mux_bit_math_h_l406_c3_fccb_return_output;
  wire sum15_mux_bit_math_h_l416_c3_54f9_cond;
  wire [3:0] sum15_mux_bit_math_h_l416_c3_54f9_iffalse;
  wire [3:0] sum15_mux_bit_math_h_l416_c3_54f9_iftrue;
  wire [3:0] sum15_mux_bit_math_h_l416_c3_54f9_return_output;
  wire sum16_mux_bit_math_h_l426_c3_7841_cond;
  wire [4:0] sum16_mux_bit_math_h_l426_c3_7841_iffalse;
  wire [4:0] sum16_mux_bit_math_h_l426_c3_7841_iftrue;
  wire [4:0] sum16_mux_bit_math_h_l426_c3_7841_return_output;
  wire sum17_mux_bit_math_h_l436_c3_08b4_cond;
  wire [4:0] sum17_mux_bit_math_h_l436_c3_08b4_iffalse;
  wire [4:0] sum17_mux_bit_math_h_l436_c3_08b4_iftrue;
  wire [4:0] sum17_mux_bit_math_h_l436_c3_08b4_return_output;
  wire sum18_mux_bit_math_h_l446_c3_d443_cond;
  wire [4:0] sum18_mux_bit_math_h_l446_c3_d443_iffalse;
  wire [4:0] sum18_mux_bit_math_h_l446_c3_d443_iftrue;
  wire [4:0] sum18_mux_bit_math_h_l446_c3_d443_return_output;
  wire sum19_mux_bit_math_h_l456_c3_b387_cond;
  wire [4:0] sum19_mux_bit_math_h_l456_c3_b387_iffalse;
  wire [4:0] sum19_mux_bit_math_h_l456_c3_b387_iftrue;
  wire [4:0] sum19_mux_bit_math_h_l456_c3_b387_return_output;
  wire sum1_mux_bit_math_h_l276_c3_f176_cond;
  wire sum1_mux_bit_math_h_l276_c3_f176_iffalse;
  wire sum1_mux_bit_math_h_l276_c3_f176_iftrue;
  wire sum1_mux_bit_math_h_l276_c3_f176_return_output;
  wire sum20_mux_bit_math_h_l466_c3_eaec_cond;
  wire [4:0] sum20_mux_bit_math_h_l466_c3_eaec_iffalse;
  wire [4:0] sum20_mux_bit_math_h_l466_c3_eaec_iftrue;
  wire [4:0] sum20_mux_bit_math_h_l466_c3_eaec_return_output;
  wire sum21_mux_bit_math_h_l476_c3_059c_cond;
  wire [4:0] sum21_mux_bit_math_h_l476_c3_059c_iffalse;
  wire [4:0] sum21_mux_bit_math_h_l476_c3_059c_iftrue;
  wire [4:0] sum21_mux_bit_math_h_l476_c3_059c_return_output;
  wire sum22_mux_bit_math_h_l486_c3_4f9e_cond;
  wire [4:0] sum22_mux_bit_math_h_l486_c3_4f9e_iffalse;
  wire [4:0] sum22_mux_bit_math_h_l486_c3_4f9e_iftrue;
  wire [4:0] sum22_mux_bit_math_h_l486_c3_4f9e_return_output;
  wire sum23_mux_bit_math_h_l496_c3_4b07_cond;
  wire [4:0] sum23_mux_bit_math_h_l496_c3_4b07_iffalse;
  wire [4:0] sum23_mux_bit_math_h_l496_c3_4b07_iftrue;
  wire [4:0] sum23_mux_bit_math_h_l496_c3_4b07_return_output;
  wire sum24_mux_bit_math_h_l506_c3_007b_cond;
  wire [4:0] sum24_mux_bit_math_h_l506_c3_007b_iffalse;
  wire [4:0] sum24_mux_bit_math_h_l506_c3_007b_iftrue;
  wire [4:0] sum24_mux_bit_math_h_l506_c3_007b_return_output;
  wire sum25_mux_bit_math_h_l516_c3_6590_cond;
  wire [4:0] sum25_mux_bit_math_h_l516_c3_6590_iffalse;
  wire [4:0] sum25_mux_bit_math_h_l516_c3_6590_iftrue;
  wire [4:0] sum25_mux_bit_math_h_l516_c3_6590_return_output;
  wire sum26_mux_bit_math_h_l526_c3_6b7c_cond;
  wire [4:0] sum26_mux_bit_math_h_l526_c3_6b7c_iffalse;
  wire [4:0] sum26_mux_bit_math_h_l526_c3_6b7c_iftrue;
  wire [4:0] sum26_mux_bit_math_h_l526_c3_6b7c_return_output;
  wire sum27_mux_bit_math_h_l536_c3_9739_cond;
  wire [4:0] sum27_mux_bit_math_h_l536_c3_9739_iffalse;
  wire [4:0] sum27_mux_bit_math_h_l536_c3_9739_iftrue;
  wire [4:0] sum27_mux_bit_math_h_l536_c3_9739_return_output;
  wire sum28_mux_bit_math_h_l546_c3_f8c7_cond;
  wire [4:0] sum28_mux_bit_math_h_l546_c3_f8c7_iffalse;
  wire [4:0] sum28_mux_bit_math_h_l546_c3_f8c7_iftrue;
  wire [4:0] sum28_mux_bit_math_h_l546_c3_f8c7_return_output;
  wire sum29_mux_bit_math_h_l556_c3_fb1b_cond;
  wire [4:0] sum29_mux_bit_math_h_l556_c3_fb1b_iffalse;
  wire [4:0] sum29_mux_bit_math_h_l556_c3_fb1b_iftrue;
  wire [4:0] sum29_mux_bit_math_h_l556_c3_fb1b_return_output;
  wire sum2_mux_bit_math_h_l286_c3_1fc2_cond;
  wire [1:0] sum2_mux_bit_math_h_l286_c3_1fc2_iffalse;
  wire [1:0] sum2_mux_bit_math_h_l286_c3_1fc2_iftrue;
  wire [1:0] sum2_mux_bit_math_h_l286_c3_1fc2_return_output;
  wire sum30_mux_bit_math_h_l566_c3_0b67_cond;
  wire [4:0] sum30_mux_bit_math_h_l566_c3_0b67_iffalse;
  wire [4:0] sum30_mux_bit_math_h_l566_c3_0b67_iftrue;
  wire [4:0] sum30_mux_bit_math_h_l566_c3_0b67_return_output;
  wire sum3_mux_bit_math_h_l296_c3_1518_cond;
  wire [1:0] sum3_mux_bit_math_h_l296_c3_1518_iffalse;
  wire [1:0] sum3_mux_bit_math_h_l296_c3_1518_iftrue;
  wire [1:0] sum3_mux_bit_math_h_l296_c3_1518_return_output;
  wire sum4_mux_bit_math_h_l306_c3_da68_cond;
  wire [2:0] sum4_mux_bit_math_h_l306_c3_da68_iffalse;
  wire [2:0] sum4_mux_bit_math_h_l306_c3_da68_iftrue;
  wire [2:0] sum4_mux_bit_math_h_l306_c3_da68_return_output;
  wire sum5_mux_bit_math_h_l316_c3_e5da_cond;
  wire [2:0] sum5_mux_bit_math_h_l316_c3_e5da_iffalse;
  wire [2:0] sum5_mux_bit_math_h_l316_c3_e5da_iftrue;
  wire [2:0] sum5_mux_bit_math_h_l316_c3_e5da_return_output;
  wire sum6_mux_bit_math_h_l326_c3_03a9_cond;
  wire [2:0] sum6_mux_bit_math_h_l326_c3_03a9_iffalse;
  wire [2:0] sum6_mux_bit_math_h_l326_c3_03a9_iftrue;
  wire [2:0] sum6_mux_bit_math_h_l326_c3_03a9_return_output;
  wire sum7_mux_bit_math_h_l336_c3_9051_cond;
  wire [2:0] sum7_mux_bit_math_h_l336_c3_9051_iffalse;
  wire [2:0] sum7_mux_bit_math_h_l336_c3_9051_iftrue;
  wire [2:0] sum7_mux_bit_math_h_l336_c3_9051_return_output;
  wire sum8_mux_bit_math_h_l346_c3_d081_cond;
  wire [3:0] sum8_mux_bit_math_h_l346_c3_d081_iffalse;
  wire [3:0] sum8_mux_bit_math_h_l346_c3_d081_iftrue;
  wire [3:0] sum8_mux_bit_math_h_l346_c3_d081_return_output;
  wire sum9_mux_bit_math_h_l356_c3_fa97_cond;
  wire [3:0] sum9_mux_bit_math_h_l356_c3_fa97_iffalse;
  wire [3:0] sum9_mux_bit_math_h_l356_c3_fa97_iftrue;
  wire [3:0] sum9_mux_bit_math_h_l356_c3_fa97_return_output;
  input [29:0] x;
  wire [29:0] x;
  always @(posedge clk)
    manual_registers_r <= { bin_op_or_bit_math_h_l646_c22_86b9_return_output, x };
  bin_op_eq_uint6_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l101_c14_5b94 (
    .left(manual_registers_r[29:24]),
    .return_output(sum5_mux_bit_math_h_l316_c3_e5da_cond),
    .right(1'h1)
  );
  bin_op_eq_uint7_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l108_c14_babe (
    .left(manual_registers_r[29:23]),
    .return_output(sum6_mux_bit_math_h_l326_c3_03a9_cond),
    .right(1'h1)
  );
  bin_op_eq_uint8_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l115_c14_bae2 (
    .left(manual_registers_r[29:22]),
    .return_output(sum7_mux_bit_math_h_l336_c3_9051_cond),
    .right(1'h1)
  );
  bin_op_eq_uint9_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l122_c14_21a0 (
    .left(manual_registers_r[29:21]),
    .return_output(sum8_mux_bit_math_h_l346_c3_d081_cond),
    .right(1'h1)
  );
  bin_op_eq_uint10_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l129_c14_fe57 (
    .left(manual_registers_r[29:20]),
    .return_output(sum9_mux_bit_math_h_l356_c3_fa97_cond),
    .right(1'h1)
  );
  bin_op_eq_uint11_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l136_c15_de7c (
    .left(manual_registers_r[29:19]),
    .return_output(sum10_mux_bit_math_h_l366_c3_bbca_cond),
    .right(1'h1)
  );
  bin_op_eq_uint12_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l143_c15_a886 (
    .left(manual_registers_r[29:18]),
    .return_output(sum11_mux_bit_math_h_l376_c3_54fc_cond),
    .right(1'h1)
  );
  bin_op_eq_uint13_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l150_c15_fa22 (
    .left(manual_registers_r[29:17]),
    .return_output(sum12_mux_bit_math_h_l386_c3_b7f9_cond),
    .right(1'h1)
  );
  bin_op_eq_uint14_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l157_c15_cb12 (
    .left(manual_registers_r[29:16]),
    .return_output(sum13_mux_bit_math_h_l396_c3_8cb2_cond),
    .right(1'h1)
  );
  bin_op_eq_uint15_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l164_c15_60b4 (
    .left(manual_registers_r[29:15]),
    .return_output(sum14_mux_bit_math_h_l406_c3_fccb_cond),
    .right(1'h1)
  );
  bin_op_eq_uint16_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l171_c15_543a (
    .left(manual_registers_r[29:14]),
    .return_output(sum15_mux_bit_math_h_l416_c3_54f9_cond),
    .right(1'h1)
  );
  bin_op_eq_uint17_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l178_c15_e890 (
    .left(manual_registers_r[29:13]),
    .return_output(sum16_mux_bit_math_h_l426_c3_7841_cond),
    .right(1'h1)
  );
  bin_op_eq_uint18_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l185_c15_1e70 (
    .left(manual_registers_r[29:12]),
    .return_output(sum17_mux_bit_math_h_l436_c3_08b4_cond),
    .right(1'h1)
  );
  bin_op_eq_uint19_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l192_c15_3ada (
    .left(manual_registers_r[29:11]),
    .return_output(sum18_mux_bit_math_h_l446_c3_d443_cond),
    .right(1'h1)
  );
  bin_op_eq_uint20_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l199_c15_28ce (
    .left(manual_registers_r[29:10]),
    .return_output(sum19_mux_bit_math_h_l456_c3_b387_cond),
    .right(1'h1)
  );
  bin_op_eq_uint21_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l206_c15_db44 (
    .left(manual_registers_r[29:9]),
    .return_output(sum20_mux_bit_math_h_l466_c3_eaec_cond),
    .right(1'h1)
  );
  bin_op_eq_uint22_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l213_c15_7921 (
    .left(manual_registers_r[29:8]),
    .return_output(sum21_mux_bit_math_h_l476_c3_059c_cond),
    .right(1'h1)
  );
  bin_op_eq_uint23_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l220_c15_2f4f (
    .left(manual_registers_r[29:7]),
    .return_output(sum22_mux_bit_math_h_l486_c3_4f9e_cond),
    .right(1'h1)
  );
  bin_op_eq_uint24_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l227_c15_e03a (
    .left(manual_registers_r[29:6]),
    .return_output(sum23_mux_bit_math_h_l496_c3_4b07_cond),
    .right(1'h1)
  );
  bin_op_eq_uint25_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l234_c15_67cd (
    .left(manual_registers_r[29:5]),
    .return_output(sum24_mux_bit_math_h_l506_c3_007b_cond),
    .right(1'h1)
  );
  bin_op_eq_uint26_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l241_c15_08e7 (
    .left(manual_registers_r[29:4]),
    .return_output(sum25_mux_bit_math_h_l516_c3_6590_cond),
    .right(1'h1)
  );
  bin_op_eq_uint27_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l248_c15_c727 (
    .left(manual_registers_r[29:3]),
    .return_output(sum26_mux_bit_math_h_l526_c3_6b7c_cond),
    .right(1'h1)
  );
  bin_op_eq_uint28_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l255_c15_e537 (
    .left(manual_registers_r[29:2]),
    .return_output(sum27_mux_bit_math_h_l536_c3_9739_cond),
    .right(1'h1)
  );
  bin_op_eq_uint29_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l262_c15_e1e1 (
    .left(manual_registers_r[29:1]),
    .return_output(sum28_mux_bit_math_h_l546_c3_f8c7_cond),
    .right(1'h1)
  );
  bin_op_eq_uint30_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l269_c15_f85a (
    .left(manual_registers_r[29:0]),
    .return_output(sum29_mux_bit_math_h_l556_c3_fb1b_cond),
    .right(1'h1)
  );
  bin_op_eq_uint30_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l70_c24_a570 (
    .left(manual_registers_r[29:0]),
    .return_output(sum30_mux_bit_math_h_l566_c3_0b67_cond),
    .right(1'h0)
  );
  bin_op_eq_uint2_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l73_c14_01fd (
    .left(manual_registers_r[29:28]),
    .return_output(sum1_mux_bit_math_h_l276_c3_f176_cond),
    .right(1'h1)
  );
  bin_op_eq_uint3_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l80_c14_cd5a (
    .left(manual_registers_r[29:27]),
    .return_output(sum2_mux_bit_math_h_l286_c3_1fc2_cond),
    .right(1'h1)
  );
  bin_op_eq_uint4_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l87_c14_623c (
    .left(manual_registers_r[29:26]),
    .return_output(sum3_mux_bit_math_h_l296_c3_1518_cond),
    .right(1'h1)
  );
  bin_op_eq_uint5_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l94_c14_8f78 (
    .left(manual_registers_r[29:25]),
    .return_output(sum4_mux_bit_math_h_l306_c3_da68_cond),
    .right(1'h1)
  );
  bin_op_or_uint1_t_uint2_t_0clk_de264c78 bin_op_or_bit_math_h_l579_c22_bb82 (
    .left(bin_op_or_bit_math_h_l579_c22_bb82_left),
    .return_output(bin_op_or_bit_math_h_l611_c22_b518_left),
    .right(bin_op_or_bit_math_h_l579_c22_bb82_right)
  );
  bin_op_or_uint2_t_uint3_t_0clk_de264c78 bin_op_or_bit_math_h_l581_c22_51fa (
    .left(bin_op_or_bit_math_h_l581_c22_51fa_left),
    .return_output(bin_op_or_bit_math_h_l611_c22_b518_right),
    .right(bin_op_or_bit_math_h_l581_c22_51fa_right)
  );
  bin_op_or_uint3_t_uint3_t_0clk_de264c78 bin_op_or_bit_math_h_l583_c22_8443 (
    .left(bin_op_or_bit_math_h_l583_c22_8443_left),
    .return_output(bin_op_or_bit_math_h_l613_c22_3ea1_left),
    .right(bin_op_or_bit_math_h_l583_c22_8443_right)
  );
  bin_op_or_uint3_t_uint4_t_0clk_de264c78 bin_op_or_bit_math_h_l585_c22_5a75 (
    .left(bin_op_or_bit_math_h_l585_c22_5a75_left),
    .return_output(bin_op_or_bit_math_h_l613_c22_3ea1_right),
    .right(bin_op_or_bit_math_h_l585_c22_5a75_right)
  );
  bin_op_or_uint4_t_uint4_t_0clk_de264c78 bin_op_or_bit_math_h_l587_c22_bb67 (
    .left(bin_op_or_bit_math_h_l587_c22_bb67_left),
    .return_output(bin_op_or_bit_math_h_l615_c22_490c_left),
    .right(bin_op_or_bit_math_h_l587_c22_bb67_right)
  );
  bin_op_or_uint4_t_uint4_t_0clk_de264c78 bin_op_or_bit_math_h_l589_c22_c8e2 (
    .left(bin_op_or_bit_math_h_l589_c22_c8e2_left),
    .return_output(bin_op_or_bit_math_h_l615_c22_490c_right),
    .right(bin_op_or_bit_math_h_l589_c22_c8e2_right)
  );
  bin_op_or_uint4_t_uint4_t_0clk_de264c78 bin_op_or_bit_math_h_l591_c22_3ea9 (
    .left(bin_op_or_bit_math_h_l591_c22_3ea9_left),
    .return_output(bin_op_or_bit_math_h_l617_c22_393d_left),
    .right(bin_op_or_bit_math_h_l591_c22_3ea9_right)
  );
  bin_op_or_uint4_t_uint5_t_0clk_de264c78 bin_op_or_bit_math_h_l593_c22_d2c2 (
    .left(bin_op_or_bit_math_h_l593_c22_d2c2_left),
    .return_output(bin_op_or_bit_math_h_l617_c22_393d_right),
    .right(bin_op_or_bit_math_h_l593_c22_d2c2_right)
  );
  bin_op_or_uint5_t_uint5_t_0clk_de264c78 bin_op_or_bit_math_h_l595_c22_4cd9 (
    .left(bin_op_or_bit_math_h_l595_c22_4cd9_left),
    .return_output(bin_op_or_bit_math_h_l619_c22_4054_left),
    .right(bin_op_or_bit_math_h_l595_c22_4cd9_right)
  );
  bin_op_or_uint5_t_uint5_t_0clk_de264c78 bin_op_or_bit_math_h_l597_c22_b895 (
    .left(bin_op_or_bit_math_h_l597_c22_b895_left),
    .return_output(bin_op_or_bit_math_h_l619_c22_4054_right),
    .right(bin_op_or_bit_math_h_l597_c22_b895_right)
  );
  bin_op_or_uint5_t_uint5_t_0clk_de264c78 bin_op_or_bit_math_h_l599_c23_f0fa (
    .left(bin_op_or_bit_math_h_l599_c23_f0fa_left),
    .return_output(bin_op_or_bit_math_h_l621_c22_6a3f_left),
    .right(bin_op_or_bit_math_h_l599_c23_f0fa_right)
  );
  bin_op_or_uint5_t_uint5_t_0clk_de264c78 bin_op_or_bit_math_h_l601_c23_23c5 (
    .left(bin_op_or_bit_math_h_l601_c23_23c5_left),
    .return_output(bin_op_or_bit_math_h_l621_c22_6a3f_right),
    .right(bin_op_or_bit_math_h_l601_c23_23c5_right)
  );
  bin_op_or_uint5_t_uint5_t_0clk_de264c78 bin_op_or_bit_math_h_l603_c23_bbd3 (
    .left(bin_op_or_bit_math_h_l603_c23_bbd3_left),
    .return_output(bin_op_or_bit_math_h_l623_c22_c11c_left),
    .right(bin_op_or_bit_math_h_l603_c23_bbd3_right)
  );
  bin_op_or_uint5_t_uint5_t_0clk_de264c78 bin_op_or_bit_math_h_l605_c23_518e (
    .left(bin_op_or_bit_math_h_l605_c23_518e_left),
    .return_output(bin_op_or_bit_math_h_l623_c22_c11c_right),
    .right(bin_op_or_bit_math_h_l605_c23_518e_right)
  );
  bin_op_or_uint5_t_uint5_t_0clk_de264c78 bin_op_or_bit_math_h_l607_c23_231c (
    .left(bin_op_or_bit_math_h_l607_c23_231c_left),
    .return_output(bin_op_or_bit_math_h_l636_c22_95bd_right),
    .right(bin_op_or_bit_math_h_l607_c23_231c_right)
  );
  bin_op_or_uint2_t_uint3_t_0clk_de264c78 bin_op_or_bit_math_h_l611_c22_b518 (
    .left(bin_op_or_bit_math_h_l611_c22_b518_left),
    .return_output(bin_op_or_bit_math_h_l630_c22_9142_left),
    .right(bin_op_or_bit_math_h_l611_c22_b518_right)
  );
  bin_op_or_uint3_t_uint4_t_0clk_de264c78 bin_op_or_bit_math_h_l613_c22_3ea1 (
    .left(bin_op_or_bit_math_h_l613_c22_3ea1_left),
    .return_output(bin_op_or_bit_math_h_l630_c22_9142_right),
    .right(bin_op_or_bit_math_h_l613_c22_3ea1_right)
  );
  bin_op_or_uint4_t_uint4_t_0clk_de264c78 bin_op_or_bit_math_h_l615_c22_490c (
    .left(bin_op_or_bit_math_h_l615_c22_490c_left),
    .return_output(bin_op_or_bit_math_h_l632_c22_5be1_left),
    .right(bin_op_or_bit_math_h_l615_c22_490c_right)
  );
  bin_op_or_uint4_t_uint5_t_0clk_de264c78 bin_op_or_bit_math_h_l617_c22_393d (
    .left(bin_op_or_bit_math_h_l617_c22_393d_left),
    .return_output(bin_op_or_bit_math_h_l632_c22_5be1_right),
    .right(bin_op_or_bit_math_h_l617_c22_393d_right)
  );
  bin_op_or_uint5_t_uint5_t_0clk_de264c78 bin_op_or_bit_math_h_l619_c22_4054 (
    .left(bin_op_or_bit_math_h_l619_c22_4054_left),
    .return_output(bin_op_or_bit_math_h_l634_c22_7f79_left),
    .right(bin_op_or_bit_math_h_l619_c22_4054_right)
  );
  bin_op_or_uint5_t_uint5_t_0clk_de264c78 bin_op_or_bit_math_h_l621_c22_6a3f (
    .left(bin_op_or_bit_math_h_l621_c22_6a3f_left),
    .return_output(bin_op_or_bit_math_h_l634_c22_7f79_right),
    .right(bin_op_or_bit_math_h_l621_c22_6a3f_right)
  );
  bin_op_or_uint5_t_uint5_t_0clk_de264c78 bin_op_or_bit_math_h_l623_c22_c11c (
    .left(bin_op_or_bit_math_h_l623_c22_c11c_left),
    .return_output(bin_op_or_bit_math_h_l636_c22_95bd_left),
    .right(bin_op_or_bit_math_h_l623_c22_c11c_right)
  );
  bin_op_or_uint3_t_uint4_t_0clk_de264c78 bin_op_or_bit_math_h_l630_c22_9142 (
    .left(bin_op_or_bit_math_h_l630_c22_9142_left),
    .return_output(bin_op_or_bit_math_h_l640_c22_b5e6_left),
    .right(bin_op_or_bit_math_h_l630_c22_9142_right)
  );
  bin_op_or_uint4_t_uint5_t_0clk_de264c78 bin_op_or_bit_math_h_l632_c22_5be1 (
    .left(bin_op_or_bit_math_h_l632_c22_5be1_left),
    .return_output(bin_op_or_bit_math_h_l640_c22_b5e6_right),
    .right(bin_op_or_bit_math_h_l632_c22_5be1_right)
  );
  bin_op_or_uint5_t_uint5_t_0clk_de264c78 bin_op_or_bit_math_h_l634_c22_7f79 (
    .left(bin_op_or_bit_math_h_l634_c22_7f79_left),
    .return_output(bin_op_or_bit_math_h_l642_c22_d244_left),
    .right(bin_op_or_bit_math_h_l634_c22_7f79_right)
  );
  bin_op_or_uint5_t_uint5_t_0clk_de264c78 bin_op_or_bit_math_h_l636_c22_95bd (
    .left(bin_op_or_bit_math_h_l636_c22_95bd_left),
    .return_output(bin_op_or_bit_math_h_l642_c22_d244_right),
    .right(bin_op_or_bit_math_h_l636_c22_95bd_right)
  );
  bin_op_or_uint4_t_uint5_t_0clk_de264c78 bin_op_or_bit_math_h_l640_c22_b5e6 (
    .left(bin_op_or_bit_math_h_l640_c22_b5e6_left),
    .return_output(bin_op_or_bit_math_h_l646_c22_86b9_left),
    .right(bin_op_or_bit_math_h_l640_c22_b5e6_right)
  );
  bin_op_or_uint5_t_uint5_t_0clk_de264c78 bin_op_or_bit_math_h_l642_c22_d244 (
    .left(bin_op_or_bit_math_h_l642_c22_d244_left),
    .return_output(bin_op_or_bit_math_h_l646_c22_86b9_right),
    .right(bin_op_or_bit_math_h_l642_c22_d244_right)
  );
  bin_op_or_uint5_t_uint5_t_0clk_de264c78 bin_op_or_bit_math_h_l646_c22_86b9 (
    .left(bin_op_or_bit_math_h_l646_c22_86b9_left),
    .return_output(bin_op_or_bit_math_h_l646_c22_86b9_return_output),
    .right(bin_op_or_bit_math_h_l646_c22_86b9_right)
  );
  mux_uint1_t_uint4_t_uint4_t_0clk_de264c78 sum10_mux_bit_math_h_l366_c3_bbca (
    .cond(sum10_mux_bit_math_h_l366_c3_bbca_cond),
    .iffalse(4'h0),
    .iftrue(4'ha),
    .return_output(bin_op_or_bit_math_h_l587_c22_bb67_right)
  );
  mux_uint1_t_uint4_t_uint4_t_0clk_de264c78 sum11_mux_bit_math_h_l376_c3_54fc (
    .cond(sum11_mux_bit_math_h_l376_c3_54fc_cond),
    .iffalse(4'h0),
    .iftrue(4'hb),
    .return_output(bin_op_or_bit_math_h_l589_c22_c8e2_left)
  );
  mux_uint1_t_uint4_t_uint4_t_0clk_de264c78 sum12_mux_bit_math_h_l386_c3_b7f9 (
    .cond(sum12_mux_bit_math_h_l386_c3_b7f9_cond),
    .iffalse(4'h0),
    .iftrue(4'hc),
    .return_output(bin_op_or_bit_math_h_l589_c22_c8e2_right)
  );
  mux_uint1_t_uint4_t_uint4_t_0clk_de264c78 sum13_mux_bit_math_h_l396_c3_8cb2 (
    .cond(sum13_mux_bit_math_h_l396_c3_8cb2_cond),
    .iffalse(4'h0),
    .iftrue(4'hd),
    .return_output(bin_op_or_bit_math_h_l591_c22_3ea9_left)
  );
  mux_uint1_t_uint4_t_uint4_t_0clk_de264c78 sum14_mux_bit_math_h_l406_c3_fccb (
    .cond(sum14_mux_bit_math_h_l406_c3_fccb_cond),
    .iffalse(4'h0),
    .iftrue(4'he),
    .return_output(bin_op_or_bit_math_h_l591_c22_3ea9_right)
  );
  mux_uint1_t_uint4_t_uint4_t_0clk_de264c78 sum15_mux_bit_math_h_l416_c3_54f9 (
    .cond(sum15_mux_bit_math_h_l416_c3_54f9_cond),
    .iffalse(4'h0),
    .iftrue(4'hf),
    .return_output(bin_op_or_bit_math_h_l593_c22_d2c2_left)
  );
  mux_uint1_t_uint5_t_uint5_t_0clk_de264c78 sum16_mux_bit_math_h_l426_c3_7841 (
    .cond(sum16_mux_bit_math_h_l426_c3_7841_cond),
    .iffalse(5'h00),
    .iftrue(5'h10),
    .return_output(bin_op_or_bit_math_h_l593_c22_d2c2_right)
  );
  mux_uint1_t_uint5_t_uint5_t_0clk_de264c78 sum17_mux_bit_math_h_l436_c3_08b4 (
    .cond(sum17_mux_bit_math_h_l436_c3_08b4_cond),
    .iffalse(5'h00),
    .iftrue(5'h11),
    .return_output(bin_op_or_bit_math_h_l595_c22_4cd9_left)
  );
  mux_uint1_t_uint5_t_uint5_t_0clk_de264c78 sum18_mux_bit_math_h_l446_c3_d443 (
    .cond(sum18_mux_bit_math_h_l446_c3_d443_cond),
    .iffalse(5'h00),
    .iftrue(5'h12),
    .return_output(bin_op_or_bit_math_h_l595_c22_4cd9_right)
  );
  mux_uint1_t_uint5_t_uint5_t_0clk_de264c78 sum19_mux_bit_math_h_l456_c3_b387 (
    .cond(sum19_mux_bit_math_h_l456_c3_b387_cond),
    .iffalse(5'h00),
    .iftrue(5'h13),
    .return_output(bin_op_or_bit_math_h_l597_c22_b895_left)
  );
  mux_uint1_t_uint1_t_uint1_t_0clk_de264c78 sum1_mux_bit_math_h_l276_c3_f176 (
    .cond(sum1_mux_bit_math_h_l276_c3_f176_cond),
    .iffalse(1'h0),
    .iftrue(1'h1),
    .return_output(bin_op_or_bit_math_h_l579_c22_bb82_left)
  );
  mux_uint1_t_uint5_t_uint5_t_0clk_de264c78 sum20_mux_bit_math_h_l466_c3_eaec (
    .cond(sum20_mux_bit_math_h_l466_c3_eaec_cond),
    .iffalse(5'h00),
    .iftrue(5'h14),
    .return_output(bin_op_or_bit_math_h_l597_c22_b895_right)
  );
  mux_uint1_t_uint5_t_uint5_t_0clk_de264c78 sum21_mux_bit_math_h_l476_c3_059c (
    .cond(sum21_mux_bit_math_h_l476_c3_059c_cond),
    .iffalse(5'h00),
    .iftrue(5'h15),
    .return_output(bin_op_or_bit_math_h_l599_c23_f0fa_left)
  );
  mux_uint1_t_uint5_t_uint5_t_0clk_de264c78 sum22_mux_bit_math_h_l486_c3_4f9e (
    .cond(sum22_mux_bit_math_h_l486_c3_4f9e_cond),
    .iffalse(5'h00),
    .iftrue(5'h16),
    .return_output(bin_op_or_bit_math_h_l599_c23_f0fa_right)
  );
  mux_uint1_t_uint5_t_uint5_t_0clk_de264c78 sum23_mux_bit_math_h_l496_c3_4b07 (
    .cond(sum23_mux_bit_math_h_l496_c3_4b07_cond),
    .iffalse(5'h00),
    .iftrue(5'h17),
    .return_output(bin_op_or_bit_math_h_l601_c23_23c5_left)
  );
  mux_uint1_t_uint5_t_uint5_t_0clk_de264c78 sum24_mux_bit_math_h_l506_c3_007b (
    .cond(sum24_mux_bit_math_h_l506_c3_007b_cond),
    .iffalse(5'h00),
    .iftrue(5'h18),
    .return_output(bin_op_or_bit_math_h_l601_c23_23c5_right)
  );
  mux_uint1_t_uint5_t_uint5_t_0clk_de264c78 sum25_mux_bit_math_h_l516_c3_6590 (
    .cond(sum25_mux_bit_math_h_l516_c3_6590_cond),
    .iffalse(5'h00),
    .iftrue(5'h19),
    .return_output(bin_op_or_bit_math_h_l603_c23_bbd3_left)
  );
  mux_uint1_t_uint5_t_uint5_t_0clk_de264c78 sum26_mux_bit_math_h_l526_c3_6b7c (
    .cond(sum26_mux_bit_math_h_l526_c3_6b7c_cond),
    .iffalse(5'h00),
    .iftrue(5'h1a),
    .return_output(bin_op_or_bit_math_h_l603_c23_bbd3_right)
  );
  mux_uint1_t_uint5_t_uint5_t_0clk_de264c78 sum27_mux_bit_math_h_l536_c3_9739 (
    .cond(sum27_mux_bit_math_h_l536_c3_9739_cond),
    .iffalse(5'h00),
    .iftrue(5'h1b),
    .return_output(bin_op_or_bit_math_h_l605_c23_518e_left)
  );
  mux_uint1_t_uint5_t_uint5_t_0clk_de264c78 sum28_mux_bit_math_h_l546_c3_f8c7 (
    .cond(sum28_mux_bit_math_h_l546_c3_f8c7_cond),
    .iffalse(5'h00),
    .iftrue(5'h1c),
    .return_output(bin_op_or_bit_math_h_l605_c23_518e_right)
  );
  mux_uint1_t_uint5_t_uint5_t_0clk_de264c78 sum29_mux_bit_math_h_l556_c3_fb1b (
    .cond(sum29_mux_bit_math_h_l556_c3_fb1b_cond),
    .iffalse(5'h00),
    .iftrue(5'h1d),
    .return_output(bin_op_or_bit_math_h_l607_c23_231c_left)
  );
  mux_uint1_t_uint2_t_uint2_t_0clk_de264c78 sum2_mux_bit_math_h_l286_c3_1fc2 (
    .cond(sum2_mux_bit_math_h_l286_c3_1fc2_cond),
    .iffalse(2'h0),
    .iftrue(2'h2),
    .return_output(bin_op_or_bit_math_h_l579_c22_bb82_right)
  );
  mux_uint1_t_uint5_t_uint5_t_0clk_de264c78 sum30_mux_bit_math_h_l566_c3_0b67 (
    .cond(sum30_mux_bit_math_h_l566_c3_0b67_cond),
    .iffalse(5'h00),
    .iftrue(5'h1e),
    .return_output(bin_op_or_bit_math_h_l607_c23_231c_right)
  );
  mux_uint1_t_uint2_t_uint2_t_0clk_de264c78 sum3_mux_bit_math_h_l296_c3_1518 (
    .cond(sum3_mux_bit_math_h_l296_c3_1518_cond),
    .iffalse(2'h0),
    .iftrue(2'h3),
    .return_output(bin_op_or_bit_math_h_l581_c22_51fa_left)
  );
  mux_uint1_t_uint3_t_uint3_t_0clk_de264c78 sum4_mux_bit_math_h_l306_c3_da68 (
    .cond(sum4_mux_bit_math_h_l306_c3_da68_cond),
    .iffalse(3'h0),
    .iftrue(3'h4),
    .return_output(bin_op_or_bit_math_h_l581_c22_51fa_right)
  );
  mux_uint1_t_uint3_t_uint3_t_0clk_de264c78 sum5_mux_bit_math_h_l316_c3_e5da (
    .cond(sum5_mux_bit_math_h_l316_c3_e5da_cond),
    .iffalse(3'h0),
    .iftrue(3'h5),
    .return_output(bin_op_or_bit_math_h_l583_c22_8443_left)
  );
  mux_uint1_t_uint3_t_uint3_t_0clk_de264c78 sum6_mux_bit_math_h_l326_c3_03a9 (
    .cond(sum6_mux_bit_math_h_l326_c3_03a9_cond),
    .iffalse(3'h0),
    .iftrue(3'h6),
    .return_output(bin_op_or_bit_math_h_l583_c22_8443_right)
  );
  mux_uint1_t_uint3_t_uint3_t_0clk_de264c78 sum7_mux_bit_math_h_l336_c3_9051 (
    .cond(sum7_mux_bit_math_h_l336_c3_9051_cond),
    .iffalse(3'h0),
    .iftrue(3'h7),
    .return_output(bin_op_or_bit_math_h_l585_c22_5a75_left)
  );
  mux_uint1_t_uint4_t_uint4_t_0clk_de264c78 sum8_mux_bit_math_h_l346_c3_d081 (
    .cond(sum8_mux_bit_math_h_l346_c3_d081_cond),
    .iffalse(4'h0),
    .iftrue(4'h8),
    .return_output(bin_op_or_bit_math_h_l585_c22_5a75_right)
  );
  mux_uint1_t_uint4_t_uint4_t_0clk_de264c78 sum9_mux_bit_math_h_l356_c3_fa97 (
    .cond(sum9_mux_bit_math_h_l356_c3_fa97_cond),
    .iffalse(4'h0),
    .iftrue(4'h9),
    .return_output(bin_op_or_bit_math_h_l587_c22_bb67_left)
  );
  assign bin_op_eq_bit_math_h_l101_c14_5b94_left = manual_registers_r[29:24];
  assign bin_op_eq_bit_math_h_l101_c14_5b94_return_output = sum5_mux_bit_math_h_l316_c3_e5da_cond;
  assign bin_op_eq_bit_math_h_l101_c14_5b94_right = 1'h1;
  assign bin_op_eq_bit_math_h_l108_c14_babe_left = manual_registers_r[29:23];
  assign bin_op_eq_bit_math_h_l108_c14_babe_return_output = sum6_mux_bit_math_h_l326_c3_03a9_cond;
  assign bin_op_eq_bit_math_h_l108_c14_babe_right = 1'h1;
  assign bin_op_eq_bit_math_h_l115_c14_bae2_left = manual_registers_r[29:22];
  assign bin_op_eq_bit_math_h_l115_c14_bae2_return_output = sum7_mux_bit_math_h_l336_c3_9051_cond;
  assign bin_op_eq_bit_math_h_l115_c14_bae2_right = 1'h1;
  assign bin_op_eq_bit_math_h_l122_c14_21a0_left = manual_registers_r[29:21];
  assign bin_op_eq_bit_math_h_l122_c14_21a0_return_output = sum8_mux_bit_math_h_l346_c3_d081_cond;
  assign bin_op_eq_bit_math_h_l122_c14_21a0_right = 1'h1;
  assign bin_op_eq_bit_math_h_l129_c14_fe57_left = manual_registers_r[29:20];
  assign bin_op_eq_bit_math_h_l129_c14_fe57_return_output = sum9_mux_bit_math_h_l356_c3_fa97_cond;
  assign bin_op_eq_bit_math_h_l129_c14_fe57_right = 1'h1;
  assign bin_op_eq_bit_math_h_l136_c15_de7c_left = manual_registers_r[29:19];
  assign bin_op_eq_bit_math_h_l136_c15_de7c_return_output = sum10_mux_bit_math_h_l366_c3_bbca_cond;
  assign bin_op_eq_bit_math_h_l136_c15_de7c_right = 1'h1;
  assign bin_op_eq_bit_math_h_l143_c15_a886_left = manual_registers_r[29:18];
  assign bin_op_eq_bit_math_h_l143_c15_a886_return_output = sum11_mux_bit_math_h_l376_c3_54fc_cond;
  assign bin_op_eq_bit_math_h_l143_c15_a886_right = 1'h1;
  assign bin_op_eq_bit_math_h_l150_c15_fa22_left = manual_registers_r[29:17];
  assign bin_op_eq_bit_math_h_l150_c15_fa22_return_output = sum12_mux_bit_math_h_l386_c3_b7f9_cond;
  assign bin_op_eq_bit_math_h_l150_c15_fa22_right = 1'h1;
  assign bin_op_eq_bit_math_h_l157_c15_cb12_left = manual_registers_r[29:16];
  assign bin_op_eq_bit_math_h_l157_c15_cb12_return_output = sum13_mux_bit_math_h_l396_c3_8cb2_cond;
  assign bin_op_eq_bit_math_h_l157_c15_cb12_right = 1'h1;
  assign bin_op_eq_bit_math_h_l164_c15_60b4_left = manual_registers_r[29:15];
  assign bin_op_eq_bit_math_h_l164_c15_60b4_return_output = sum14_mux_bit_math_h_l406_c3_fccb_cond;
  assign bin_op_eq_bit_math_h_l164_c15_60b4_right = 1'h1;
  assign bin_op_eq_bit_math_h_l171_c15_543a_left = manual_registers_r[29:14];
  assign bin_op_eq_bit_math_h_l171_c15_543a_return_output = sum15_mux_bit_math_h_l416_c3_54f9_cond;
  assign bin_op_eq_bit_math_h_l171_c15_543a_right = 1'h1;
  assign bin_op_eq_bit_math_h_l178_c15_e890_left = manual_registers_r[29:13];
  assign bin_op_eq_bit_math_h_l178_c15_e890_return_output = sum16_mux_bit_math_h_l426_c3_7841_cond;
  assign bin_op_eq_bit_math_h_l178_c15_e890_right = 1'h1;
  assign bin_op_eq_bit_math_h_l185_c15_1e70_left = manual_registers_r[29:12];
  assign bin_op_eq_bit_math_h_l185_c15_1e70_return_output = sum17_mux_bit_math_h_l436_c3_08b4_cond;
  assign bin_op_eq_bit_math_h_l185_c15_1e70_right = 1'h1;
  assign bin_op_eq_bit_math_h_l192_c15_3ada_left = manual_registers_r[29:11];
  assign bin_op_eq_bit_math_h_l192_c15_3ada_return_output = sum18_mux_bit_math_h_l446_c3_d443_cond;
  assign bin_op_eq_bit_math_h_l192_c15_3ada_right = 1'h1;
  assign bin_op_eq_bit_math_h_l199_c15_28ce_left = manual_registers_r[29:10];
  assign bin_op_eq_bit_math_h_l199_c15_28ce_return_output = sum19_mux_bit_math_h_l456_c3_b387_cond;
  assign bin_op_eq_bit_math_h_l199_c15_28ce_right = 1'h1;
  assign bin_op_eq_bit_math_h_l206_c15_db44_left = manual_registers_r[29:9];
  assign bin_op_eq_bit_math_h_l206_c15_db44_return_output = sum20_mux_bit_math_h_l466_c3_eaec_cond;
  assign bin_op_eq_bit_math_h_l206_c15_db44_right = 1'h1;
  assign bin_op_eq_bit_math_h_l213_c15_7921_left = manual_registers_r[29:8];
  assign bin_op_eq_bit_math_h_l213_c15_7921_return_output = sum21_mux_bit_math_h_l476_c3_059c_cond;
  assign bin_op_eq_bit_math_h_l213_c15_7921_right = 1'h1;
  assign bin_op_eq_bit_math_h_l220_c15_2f4f_left = manual_registers_r[29:7];
  assign bin_op_eq_bit_math_h_l220_c15_2f4f_return_output = sum22_mux_bit_math_h_l486_c3_4f9e_cond;
  assign bin_op_eq_bit_math_h_l220_c15_2f4f_right = 1'h1;
  assign bin_op_eq_bit_math_h_l227_c15_e03a_left = manual_registers_r[29:6];
  assign bin_op_eq_bit_math_h_l227_c15_e03a_return_output = sum23_mux_bit_math_h_l496_c3_4b07_cond;
  assign bin_op_eq_bit_math_h_l227_c15_e03a_right = 1'h1;
  assign bin_op_eq_bit_math_h_l234_c15_67cd_left = manual_registers_r[29:5];
  assign bin_op_eq_bit_math_h_l234_c15_67cd_return_output = sum24_mux_bit_math_h_l506_c3_007b_cond;
  assign bin_op_eq_bit_math_h_l234_c15_67cd_right = 1'h1;
  assign bin_op_eq_bit_math_h_l241_c15_08e7_left = manual_registers_r[29:4];
  assign bin_op_eq_bit_math_h_l241_c15_08e7_return_output = sum25_mux_bit_math_h_l516_c3_6590_cond;
  assign bin_op_eq_bit_math_h_l241_c15_08e7_right = 1'h1;
  assign bin_op_eq_bit_math_h_l248_c15_c727_left = manual_registers_r[29:3];
  assign bin_op_eq_bit_math_h_l248_c15_c727_return_output = sum26_mux_bit_math_h_l526_c3_6b7c_cond;
  assign bin_op_eq_bit_math_h_l248_c15_c727_right = 1'h1;
  assign bin_op_eq_bit_math_h_l255_c15_e537_left = manual_registers_r[29:2];
  assign bin_op_eq_bit_math_h_l255_c15_e537_return_output = sum27_mux_bit_math_h_l536_c3_9739_cond;
  assign bin_op_eq_bit_math_h_l255_c15_e537_right = 1'h1;
  assign bin_op_eq_bit_math_h_l262_c15_e1e1_left = manual_registers_r[29:1];
  assign bin_op_eq_bit_math_h_l262_c15_e1e1_return_output = sum28_mux_bit_math_h_l546_c3_f8c7_cond;
  assign bin_op_eq_bit_math_h_l262_c15_e1e1_right = 1'h1;
  assign bin_op_eq_bit_math_h_l269_c15_f85a_left = manual_registers_r[29:0];
  assign bin_op_eq_bit_math_h_l269_c15_f85a_return_output = sum29_mux_bit_math_h_l556_c3_fb1b_cond;
  assign bin_op_eq_bit_math_h_l269_c15_f85a_right = 1'h1;
  assign bin_op_eq_bit_math_h_l70_c24_a570_left = manual_registers_r[29:0];
  assign bin_op_eq_bit_math_h_l70_c24_a570_return_output = sum30_mux_bit_math_h_l566_c3_0b67_cond;
  assign bin_op_eq_bit_math_h_l70_c24_a570_right = 1'h0;
  assign bin_op_eq_bit_math_h_l73_c14_01fd_left = manual_registers_r[29:28];
  assign bin_op_eq_bit_math_h_l73_c14_01fd_return_output = sum1_mux_bit_math_h_l276_c3_f176_cond;
  assign bin_op_eq_bit_math_h_l73_c14_01fd_right = 1'h1;
  assign bin_op_eq_bit_math_h_l80_c14_cd5a_left = manual_registers_r[29:27];
  assign bin_op_eq_bit_math_h_l80_c14_cd5a_return_output = sum2_mux_bit_math_h_l286_c3_1fc2_cond;
  assign bin_op_eq_bit_math_h_l80_c14_cd5a_right = 1'h1;
  assign bin_op_eq_bit_math_h_l87_c14_623c_left = manual_registers_r[29:26];
  assign bin_op_eq_bit_math_h_l87_c14_623c_return_output = sum3_mux_bit_math_h_l296_c3_1518_cond;
  assign bin_op_eq_bit_math_h_l87_c14_623c_right = 1'h1;
  assign bin_op_eq_bit_math_h_l94_c14_8f78_left = manual_registers_r[29:25];
  assign bin_op_eq_bit_math_h_l94_c14_8f78_return_output = sum4_mux_bit_math_h_l306_c3_da68_cond;
  assign bin_op_eq_bit_math_h_l94_c14_8f78_right = 1'h1;
  assign bin_op_or_bit_math_h_l579_c22_bb82_return_output = bin_op_or_bit_math_h_l611_c22_b518_left;
  assign bin_op_or_bit_math_h_l581_c22_51fa_return_output = bin_op_or_bit_math_h_l611_c22_b518_right;
  assign bin_op_or_bit_math_h_l583_c22_8443_return_output = bin_op_or_bit_math_h_l613_c22_3ea1_left;
  assign bin_op_or_bit_math_h_l585_c22_5a75_return_output = bin_op_or_bit_math_h_l613_c22_3ea1_right;
  assign bin_op_or_bit_math_h_l587_c22_bb67_return_output = bin_op_or_bit_math_h_l615_c22_490c_left;
  assign bin_op_or_bit_math_h_l589_c22_c8e2_return_output = bin_op_or_bit_math_h_l615_c22_490c_right;
  assign bin_op_or_bit_math_h_l591_c22_3ea9_return_output = bin_op_or_bit_math_h_l617_c22_393d_left;
  assign bin_op_or_bit_math_h_l593_c22_d2c2_return_output = bin_op_or_bit_math_h_l617_c22_393d_right;
  assign bin_op_or_bit_math_h_l595_c22_4cd9_return_output = bin_op_or_bit_math_h_l619_c22_4054_left;
  assign bin_op_or_bit_math_h_l597_c22_b895_return_output = bin_op_or_bit_math_h_l619_c22_4054_right;
  assign bin_op_or_bit_math_h_l599_c23_f0fa_return_output = bin_op_or_bit_math_h_l621_c22_6a3f_left;
  assign bin_op_or_bit_math_h_l601_c23_23c5_return_output = bin_op_or_bit_math_h_l621_c22_6a3f_right;
  assign bin_op_or_bit_math_h_l603_c23_bbd3_return_output = bin_op_or_bit_math_h_l623_c22_c11c_left;
  assign bin_op_or_bit_math_h_l605_c23_518e_return_output = bin_op_or_bit_math_h_l623_c22_c11c_right;
  assign bin_op_or_bit_math_h_l607_c23_231c_return_output = bin_op_or_bit_math_h_l636_c22_95bd_right;
  assign bin_op_or_bit_math_h_l611_c22_b518_return_output = bin_op_or_bit_math_h_l630_c22_9142_left;
  assign bin_op_or_bit_math_h_l613_c22_3ea1_return_output = bin_op_or_bit_math_h_l630_c22_9142_right;
  assign bin_op_or_bit_math_h_l615_c22_490c_return_output = bin_op_or_bit_math_h_l632_c22_5be1_left;
  assign bin_op_or_bit_math_h_l617_c22_393d_return_output = bin_op_or_bit_math_h_l632_c22_5be1_right;
  assign bin_op_or_bit_math_h_l619_c22_4054_return_output = bin_op_or_bit_math_h_l634_c22_7f79_left;
  assign bin_op_or_bit_math_h_l621_c22_6a3f_return_output = bin_op_or_bit_math_h_l634_c22_7f79_right;
  assign bin_op_or_bit_math_h_l623_c22_c11c_return_output = bin_op_or_bit_math_h_l636_c22_95bd_left;
  assign bin_op_or_bit_math_h_l630_c22_9142_return_output = bin_op_or_bit_math_h_l640_c22_b5e6_left;
  assign bin_op_or_bit_math_h_l632_c22_5be1_return_output = bin_op_or_bit_math_h_l640_c22_b5e6_right;
  assign bin_op_or_bit_math_h_l634_c22_7f79_return_output = bin_op_or_bit_math_h_l642_c22_d244_left;
  assign bin_op_or_bit_math_h_l636_c22_95bd_return_output = bin_op_or_bit_math_h_l642_c22_d244_right;
  assign bin_op_or_bit_math_h_l640_c22_b5e6_return_output = bin_op_or_bit_math_h_l646_c22_86b9_left;
  assign bin_op_or_bit_math_h_l642_c22_d244_return_output = bin_op_or_bit_math_h_l646_c22_86b9_right;
  assign manual_registers = { bin_op_or_bit_math_h_l646_c22_86b9_return_output, x };
  assign return_output = manual_registers_r[34:30];
  assign sum10_mux_bit_math_h_l366_c3_bbca_iffalse = 4'h0;
  assign sum10_mux_bit_math_h_l366_c3_bbca_iftrue = 4'ha;
  assign sum10_mux_bit_math_h_l366_c3_bbca_return_output = bin_op_or_bit_math_h_l587_c22_bb67_right;
  assign sum11_mux_bit_math_h_l376_c3_54fc_iffalse = 4'h0;
  assign sum11_mux_bit_math_h_l376_c3_54fc_iftrue = 4'hb;
  assign sum11_mux_bit_math_h_l376_c3_54fc_return_output = bin_op_or_bit_math_h_l589_c22_c8e2_left;
  assign sum12_mux_bit_math_h_l386_c3_b7f9_iffalse = 4'h0;
  assign sum12_mux_bit_math_h_l386_c3_b7f9_iftrue = 4'hc;
  assign sum12_mux_bit_math_h_l386_c3_b7f9_return_output = bin_op_or_bit_math_h_l589_c22_c8e2_right;
  assign sum13_mux_bit_math_h_l396_c3_8cb2_iffalse = 4'h0;
  assign sum13_mux_bit_math_h_l396_c3_8cb2_iftrue = 4'hd;
  assign sum13_mux_bit_math_h_l396_c3_8cb2_return_output = bin_op_or_bit_math_h_l591_c22_3ea9_left;
  assign sum14_mux_bit_math_h_l406_c3_fccb_iffalse = 4'h0;
  assign sum14_mux_bit_math_h_l406_c3_fccb_iftrue = 4'he;
  assign sum14_mux_bit_math_h_l406_c3_fccb_return_output = bin_op_or_bit_math_h_l591_c22_3ea9_right;
  assign sum15_mux_bit_math_h_l416_c3_54f9_iffalse = 4'h0;
  assign sum15_mux_bit_math_h_l416_c3_54f9_iftrue = 4'hf;
  assign sum15_mux_bit_math_h_l416_c3_54f9_return_output = bin_op_or_bit_math_h_l593_c22_d2c2_left;
  assign sum16_mux_bit_math_h_l426_c3_7841_iffalse = 5'h00;
  assign sum16_mux_bit_math_h_l426_c3_7841_iftrue = 5'h10;
  assign sum16_mux_bit_math_h_l426_c3_7841_return_output = bin_op_or_bit_math_h_l593_c22_d2c2_right;
  assign sum17_mux_bit_math_h_l436_c3_08b4_iffalse = 5'h00;
  assign sum17_mux_bit_math_h_l436_c3_08b4_iftrue = 5'h11;
  assign sum17_mux_bit_math_h_l436_c3_08b4_return_output = bin_op_or_bit_math_h_l595_c22_4cd9_left;
  assign sum18_mux_bit_math_h_l446_c3_d443_iffalse = 5'h00;
  assign sum18_mux_bit_math_h_l446_c3_d443_iftrue = 5'h12;
  assign sum18_mux_bit_math_h_l446_c3_d443_return_output = bin_op_or_bit_math_h_l595_c22_4cd9_right;
  assign sum19_mux_bit_math_h_l456_c3_b387_iffalse = 5'h00;
  assign sum19_mux_bit_math_h_l456_c3_b387_iftrue = 5'h13;
  assign sum19_mux_bit_math_h_l456_c3_b387_return_output = bin_op_or_bit_math_h_l597_c22_b895_left;
  assign sum1_mux_bit_math_h_l276_c3_f176_iffalse = 1'h0;
  assign sum1_mux_bit_math_h_l276_c3_f176_iftrue = 1'h1;
  assign sum1_mux_bit_math_h_l276_c3_f176_return_output = bin_op_or_bit_math_h_l579_c22_bb82_left;
  assign sum20_mux_bit_math_h_l466_c3_eaec_iffalse = 5'h00;
  assign sum20_mux_bit_math_h_l466_c3_eaec_iftrue = 5'h14;
  assign sum20_mux_bit_math_h_l466_c3_eaec_return_output = bin_op_or_bit_math_h_l597_c22_b895_right;
  assign sum21_mux_bit_math_h_l476_c3_059c_iffalse = 5'h00;
  assign sum21_mux_bit_math_h_l476_c3_059c_iftrue = 5'h15;
  assign sum21_mux_bit_math_h_l476_c3_059c_return_output = bin_op_or_bit_math_h_l599_c23_f0fa_left;
  assign sum22_mux_bit_math_h_l486_c3_4f9e_iffalse = 5'h00;
  assign sum22_mux_bit_math_h_l486_c3_4f9e_iftrue = 5'h16;
  assign sum22_mux_bit_math_h_l486_c3_4f9e_return_output = bin_op_or_bit_math_h_l599_c23_f0fa_right;
  assign sum23_mux_bit_math_h_l496_c3_4b07_iffalse = 5'h00;
  assign sum23_mux_bit_math_h_l496_c3_4b07_iftrue = 5'h17;
  assign sum23_mux_bit_math_h_l496_c3_4b07_return_output = bin_op_or_bit_math_h_l601_c23_23c5_left;
  assign sum24_mux_bit_math_h_l506_c3_007b_iffalse = 5'h00;
  assign sum24_mux_bit_math_h_l506_c3_007b_iftrue = 5'h18;
  assign sum24_mux_bit_math_h_l506_c3_007b_return_output = bin_op_or_bit_math_h_l601_c23_23c5_right;
  assign sum25_mux_bit_math_h_l516_c3_6590_iffalse = 5'h00;
  assign sum25_mux_bit_math_h_l516_c3_6590_iftrue = 5'h19;
  assign sum25_mux_bit_math_h_l516_c3_6590_return_output = bin_op_or_bit_math_h_l603_c23_bbd3_left;
  assign sum26_mux_bit_math_h_l526_c3_6b7c_iffalse = 5'h00;
  assign sum26_mux_bit_math_h_l526_c3_6b7c_iftrue = 5'h1a;
  assign sum26_mux_bit_math_h_l526_c3_6b7c_return_output = bin_op_or_bit_math_h_l603_c23_bbd3_right;
  assign sum27_mux_bit_math_h_l536_c3_9739_iffalse = 5'h00;
  assign sum27_mux_bit_math_h_l536_c3_9739_iftrue = 5'h1b;
  assign sum27_mux_bit_math_h_l536_c3_9739_return_output = bin_op_or_bit_math_h_l605_c23_518e_left;
  assign sum28_mux_bit_math_h_l546_c3_f8c7_iffalse = 5'h00;
  assign sum28_mux_bit_math_h_l546_c3_f8c7_iftrue = 5'h1c;
  assign sum28_mux_bit_math_h_l546_c3_f8c7_return_output = bin_op_or_bit_math_h_l605_c23_518e_right;
  assign sum29_mux_bit_math_h_l556_c3_fb1b_iffalse = 5'h00;
  assign sum29_mux_bit_math_h_l556_c3_fb1b_iftrue = 5'h1d;
  assign sum29_mux_bit_math_h_l556_c3_fb1b_return_output = bin_op_or_bit_math_h_l607_c23_231c_left;
  assign sum2_mux_bit_math_h_l286_c3_1fc2_iffalse = 2'h0;
  assign sum2_mux_bit_math_h_l286_c3_1fc2_iftrue = 2'h2;
  assign sum2_mux_bit_math_h_l286_c3_1fc2_return_output = bin_op_or_bit_math_h_l579_c22_bb82_right;
  assign sum30_mux_bit_math_h_l566_c3_0b67_iffalse = 5'h00;
  assign sum30_mux_bit_math_h_l566_c3_0b67_iftrue = 5'h1e;
  assign sum30_mux_bit_math_h_l566_c3_0b67_return_output = bin_op_or_bit_math_h_l607_c23_231c_right;
  assign sum3_mux_bit_math_h_l296_c3_1518_iffalse = 2'h0;
  assign sum3_mux_bit_math_h_l296_c3_1518_iftrue = 2'h3;
  assign sum3_mux_bit_math_h_l296_c3_1518_return_output = bin_op_or_bit_math_h_l581_c22_51fa_left;
  assign sum4_mux_bit_math_h_l306_c3_da68_iffalse = 3'h0;
  assign sum4_mux_bit_math_h_l306_c3_da68_iftrue = 3'h4;
  assign sum4_mux_bit_math_h_l306_c3_da68_return_output = bin_op_or_bit_math_h_l581_c22_51fa_right;
  assign sum5_mux_bit_math_h_l316_c3_e5da_iffalse = 3'h0;
  assign sum5_mux_bit_math_h_l316_c3_e5da_iftrue = 3'h5;
  assign sum5_mux_bit_math_h_l316_c3_e5da_return_output = bin_op_or_bit_math_h_l583_c22_8443_left;
  assign sum6_mux_bit_math_h_l326_c3_03a9_iffalse = 3'h0;
  assign sum6_mux_bit_math_h_l326_c3_03a9_iftrue = 3'h6;
  assign sum6_mux_bit_math_h_l326_c3_03a9_return_output = bin_op_or_bit_math_h_l583_c22_8443_right;
  assign sum7_mux_bit_math_h_l336_c3_9051_iffalse = 3'h0;
  assign sum7_mux_bit_math_h_l336_c3_9051_iftrue = 3'h7;
  assign sum7_mux_bit_math_h_l336_c3_9051_return_output = bin_op_or_bit_math_h_l585_c22_5a75_left;
  assign sum8_mux_bit_math_h_l346_c3_d081_iffalse = 4'h0;
  assign sum8_mux_bit_math_h_l346_c3_d081_iftrue = 4'h8;
  assign sum8_mux_bit_math_h_l346_c3_d081_return_output = bin_op_or_bit_math_h_l585_c22_5a75_right;
  assign sum9_mux_bit_math_h_l356_c3_fa97_iffalse = 4'h0;
  assign sum9_mux_bit_math_h_l356_c3_fa97_iftrue = 4'h9;
  assign sum9_mux_bit_math_h_l356_c3_fa97_return_output = bin_op_or_bit_math_h_l587_c22_bb67_left;
endmodule

module int32_abs_0clk_a5a1cd4e(x, return_output);
  wire bin_op_eq_bit_math_h_l52_c6_6321_left;
  wire bin_op_eq_bit_math_h_l52_c6_6321_return_output;
  wire bin_op_eq_bit_math_h_l52_c6_6321_right;
  wire [31:0] bin_op_minus_bit_math_h_l45_c19_0ca4_left;
  wire [31:0] bin_op_minus_bit_math_h_l45_c19_0ca4_return_output;
  wire bin_op_minus_bit_math_h_l45_c19_0ca4_right;
  output [31:0] return_output;
  wire [31:0] return_output;
  wire rv_mux_bit_math_h_l52_c3_965d_cond;
  wire [31:0] rv_mux_bit_math_h_l52_c3_965d_iffalse;
  wire [31:0] rv_mux_bit_math_h_l52_c3_965d_iftrue;
  wire [31:0] rv_mux_bit_math_h_l52_c3_965d_return_output;
  wire [31:0] unary_op_not_bit_math_h_l49_c24_463f_expr;
  wire [31:0] unary_op_not_bit_math_h_l49_c24_463f_return_output;
  input [31:0] x;
  wire [31:0] x;
  bin_op_eq_uint1_t_uint1_t_0clk_de264c78 bin_op_eq_bit_math_h_l52_c6_6321 (
    .left(x[31]),
    .return_output(rv_mux_bit_math_h_l52_c3_965d_cond),
    .right(1'h1)
  );
  bin_op_minus_uint32_t_uint1_t_0clk_de264c78 bin_op_minus_bit_math_h_l45_c19_0ca4 (
    .left(x),
    .return_output(unary_op_not_bit_math_h_l49_c24_463f_expr),
    .right(1'h1)
  );
  mux_uint1_t_uint32_t_uint32_t_0clk_de264c78 rv_mux_bit_math_h_l52_c3_965d (
    .cond(rv_mux_bit_math_h_l52_c3_965d_cond),
    .iffalse(x),
    .iftrue(rv_mux_bit_math_h_l52_c3_965d_iftrue),
    .return_output(return_output)
  );
  unary_op_not_uint32_t_0clk_de264c78 unary_op_not_bit_math_h_l49_c24_463f (
    .expr(unary_op_not_bit_math_h_l49_c24_463f_expr),
    .return_output(rv_mux_bit_math_h_l52_c3_965d_iftrue)
  );
  assign bin_op_eq_bit_math_h_l52_c6_6321_left = x[31];
  assign bin_op_eq_bit_math_h_l52_c6_6321_return_output = rv_mux_bit_math_h_l52_c3_965d_cond;
  assign bin_op_eq_bit_math_h_l52_c6_6321_right = 1'h1;
  assign bin_op_minus_bit_math_h_l45_c19_0ca4_left = x;
  assign bin_op_minus_bit_math_h_l45_c19_0ca4_return_output = unary_op_not_bit_math_h_l49_c24_463f_expr;
  assign bin_op_minus_bit_math_h_l45_c19_0ca4_right = 1'h1;
  assign rv_mux_bit_math_h_l52_c3_965d_iffalse = x;
  assign rv_mux_bit_math_h_l52_c3_965d_return_output = return_output;
  assign unary_op_not_bit_math_h_l49_c24_463f_return_output = rv_mux_bit_math_h_l52_c3_965d_iftrue;
endmodule

module mux_uint1_t_float_float_0clk_de264c78(cond, iftrue, iffalse, return_output);
  wire [96:0] \471.read_pipe ;
  input cond;
  wire cond;
  input [31:0] iffalse;
  wire [31:0] iffalse;
  input [31:0] iftrue;
  wire [31:0] iftrue;
  output [31:0] return_output;
  wire [31:0] return_output;
  assign return_output = cond ? iftrue : iffalse;
  assign \471.read_pipe  = { iffalse, iftrue, cond, 32'hzzzzzzzz };
endmodule

module mux_uint1_t_int25_t_int25_t_1clk_fa830572(clk, cond, iftrue, iffalse, return_output);
  wire [75:0] \573.read_pipe ;
  input clk;
  wire clk;
  input cond;
  wire cond;
  input [24:0] iffalse;
  wire [24:0] iffalse;
  input [24:0] iftrue;
  wire [24:0] iftrue;
  wire [151:0] manual_registers;
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75" *)
  wire [151:0] manual_registers_r;
  output [24:0] return_output;
  wire [24:0] return_output;
  reg [126:0] _0_;
  always @(posedge clk)
    _0_ <= { iffalse, iftrue, cond, manual_registers_r[151:101], return_output };
  assign { manual_registers_r[151:101], manual_registers_r[75:0] } = _0_;
  assign return_output = manual_registers_r[101] ? manual_registers_r[126:102] : manual_registers_r[151:127];
  assign \573.read_pipe  = { manual_registers_r[151:101], 25'hxxxxxxx };
  assign manual_registers = { iffalse, iftrue, cond, 25'hxxxxxxx, manual_registers_r[151:101], return_output };
  assign manual_registers_r[100:76] = 25'hxxxxxxx;
endmodule

module mux_uint1_t_int31_t_int31_t_0clk_de264c78(cond, iftrue, iffalse, return_output);
  wire [93:0] \2587.read_pipe ;
  input cond;
  wire cond;
  input [30:0] iffalse;
  wire [30:0] iffalse;
  input [30:0] iftrue;
  wire [30:0] iftrue;
  output [30:0] return_output;
  wire [30:0] return_output;
  assign return_output = cond ? iftrue : iffalse;
  assign \2587.read_pipe  = { iffalse, iftrue, cond, 31'hzzzzzzzz };
endmodule

module mux_uint1_t_uint1_t_uint1_t_0clk_de264c78(cond, iftrue, iffalse, return_output);
  wire [3:0] \550.read_pipe ;
  input cond;
  wire cond;
  input iffalse;
  wire iffalse;
  input iftrue;
  wire iftrue;
  output return_output;
  wire return_output;
  assign return_output = cond ? iftrue : iffalse;
  assign \550.read_pipe  = { iffalse, iftrue, cond, 1'hz };
endmodule

module mux_uint1_t_uint23_t_uint23_t_0clk_de264c78(cond, iftrue, iffalse, return_output);
  wire [69:0] \1088.read_pipe ;
  input cond;
  wire cond;
  input [22:0] iffalse;
  wire [22:0] iffalse;
  input [22:0] iftrue;
  wire [22:0] iftrue;
  output [22:0] return_output;
  wire [22:0] return_output;
  assign return_output = cond ? iftrue : iffalse;
  assign \1088.read_pipe  = { iffalse, iftrue, cond, 23'hzzzzzz };
endmodule

module mux_uint1_t_uint2_t_uint2_t_0clk_de264c78(cond, iftrue, iffalse, return_output);
  wire [6:0] \3946.read_pipe ;
  input cond;
  wire cond;
  input [1:0] iffalse;
  wire [1:0] iffalse;
  input [1:0] iftrue;
  wire [1:0] iftrue;
  output [1:0] return_output;
  wire [1:0] return_output;
  assign return_output = cond ? iftrue : iffalse;
  assign \3946.read_pipe  = { iffalse, iftrue, cond, 2'hz };
endmodule

module mux_uint1_t_uint30_t_uint30_t_0clk_de264c78(cond, iftrue, iffalse, return_output);
  wire [90:0] \4239.read_pipe ;
  input cond;
  wire cond;
  input [29:0] iffalse;
  wire [29:0] iffalse;
  input [29:0] iftrue;
  wire [29:0] iftrue;
  output [29:0] return_output;
  wire [29:0] return_output;
  assign return_output = cond ? iftrue : iffalse;
  assign \4239.read_pipe  = { iffalse, iftrue, cond, 30'hzzzzzzzz };
endmodule

module mux_uint1_t_uint30_t_uint30_t_1clk_a751855e(clk, cond, iftrue, iffalse, return_output);
  wire [90:0] \4281.read_pipe ;
  input clk;
  wire clk;
  input cond;
  wire cond;
  input [29:0] iffalse;
  wire [29:0] iffalse;
  input [29:0] iftrue;
  wire [29:0] iftrue;
  wire [181:0] manual_registers;
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90" *)
  reg [181:0] manual_registers_r;
  output [29:0] return_output;
  wire [29:0] return_output;
  assign manual_registers[120:91] = cond ? iftrue : iffalse;
  always @(posedge clk)
    manual_registers_r <= { iffalse, iftrue, cond, manual_registers[120:91], manual_registers_r[181:91] };
  assign \4281.read_pipe  = manual_registers_r[181:91];
  assign { manual_registers[181:121], manual_registers[90:0] } = { iffalse, iftrue, cond, manual_registers_r[181:91] };
  assign return_output = manual_registers_r[120:91];
endmodule

module mux_uint1_t_uint32_t_uint32_t_0clk_de264c78(cond, iftrue, iffalse, return_output);
  wire [96:0] \2822.read_pipe ;
  input cond;
  wire cond;
  input [31:0] iffalse;
  wire [31:0] iffalse;
  input [31:0] iftrue;
  wire [31:0] iftrue;
  output [31:0] return_output;
  wire [31:0] return_output;
  assign return_output = cond ? iftrue : iffalse;
  assign \2822.read_pipe  = { iffalse, iftrue, cond, 32'hzzzzzzzz };
endmodule

module mux_uint1_t_uint3_t_uint3_t_0clk_de264c78(cond, iftrue, iffalse, return_output);
  wire [9:0] \3968.read_pipe ;
  input cond;
  wire cond;
  input [2:0] iffalse;
  wire [2:0] iffalse;
  input [2:0] iftrue;
  wire [2:0] iftrue;
  output [2:0] return_output;
  wire [2:0] return_output;
  assign return_output = cond ? iftrue : iffalse;
  assign \3968.read_pipe  = { iffalse, iftrue, cond, 3'hz };
endmodule

module mux_uint1_t_uint4_t_uint4_t_0clk_de264c78(cond, iftrue, iffalse, return_output);
  wire [12:0] \3990.read_pipe ;
  input cond;
  wire cond;
  input [3:0] iffalse;
  wire [3:0] iffalse;
  input [3:0] iftrue;
  wire [3:0] iftrue;
  output [3:0] return_output;
  wire [3:0] return_output;
  assign return_output = cond ? iftrue : iffalse;
  assign \3990.read_pipe  = { iffalse, iftrue, cond, 4'hz };
endmodule

module mux_uint1_t_uint5_t_uint5_t_0clk_de264c78(cond, iftrue, iffalse, return_output);
  wire [15:0] \4012.read_pipe ;
  input cond;
  wire cond;
  input [4:0] iffalse;
  wire [4:0] iffalse;
  input [4:0] iftrue;
  wire [4:0] iftrue;
  output [4:0] return_output;
  wire [4:0] return_output;
  assign return_output = cond ? iftrue : iffalse;
  assign \4012.read_pipe  = { iffalse, iftrue, cond, 5'hzz };
endmodule

module mux_uint1_t_uint8_t_uint8_t_0clk_de264c78(cond, iftrue, iffalse, return_output);
  wire [24:0] \1066.read_pipe ;
  input cond;
  wire cond;
  input [7:0] iffalse;
  wire [7:0] iffalse;
  input [7:0] iftrue;
  wire [7:0] iftrue;
  output [7:0] return_output;
  wire [7:0] return_output;
  assign return_output = cond ? iftrue : iffalse;
  assign \1066.read_pipe  = { iffalse, iftrue, cond, 8'hzz };
endmodule

module my_pipeline_6clk_a1ef0e6d(clk, x, y, return_output);
  wire [31:0] bin_op_plus_pipeline_c_l13_c10_dda9_left;
  wire [31:0] bin_op_plus_pipeline_c_l13_c10_dda9_return_output;
  wire [31:0] bin_op_plus_pipeline_c_l13_c10_dda9_right;
  input clk;
  wire clk;
  output [31:0] return_output;
  wire [31:0] return_output;
  input [31:0] x;
  wire [31:0] x;
  input [31:0] y;
  wire [31:0] y;
  bin_op_plus_float_float_6clk_fed6bb55 bin_op_plus_pipeline_c_l13_c10_dda9 (
    .clk(clk),
    .left(x),
    .return_output(return_output),
    .right(y)
  );
  assign bin_op_plus_pipeline_c_l13_c10_dda9_left = x;
  assign bin_op_plus_pipeline_c_l13_c10_dda9_return_output = return_output;
  assign bin_op_plus_pipeline_c_l13_c10_dda9_right = y;
endmodule

module uint24_negate_0clk_23f04728(x, return_output);
  wire [24:0] bin_op_plus_bit_math_h_l17_c22_c461_left;
  (* unused_bits = "25" *)
  wire [25:0] bin_op_plus_bit_math_h_l17_c22_c461_return_output;
  wire bin_op_plus_bit_math_h_l17_c22_c461_right;
  output [24:0] return_output;
  wire [24:0] return_output;
  wire [24:0] unary_op_not_bit_math_h_l14_c17_763f_expr;
  wire [24:0] unary_op_not_bit_math_h_l14_c17_763f_return_output;
  input [23:0] x;
  wire [23:0] x;
  bin_op_plus_uint25_t_uint1_t_0clk_de264c78 bin_op_plus_bit_math_h_l17_c22_c461 (
    .left(bin_op_plus_bit_math_h_l17_c22_c461_left),
    .return_output(bin_op_plus_bit_math_h_l17_c22_c461_return_output),
    .right(1'h1)
  );
  unary_op_not_uint25_t_0clk_de264c78 unary_op_not_bit_math_h_l14_c17_763f (
    .expr({ 1'h0, x }),
    .return_output(bin_op_plus_bit_math_h_l17_c22_c461_left)
  );
  assign bin_op_plus_bit_math_h_l17_c22_c461_right = 1'h1;
  assign return_output = bin_op_plus_bit_math_h_l17_c22_c461_return_output[24:0];
  assign unary_op_not_bit_math_h_l14_c17_763f_expr = { 1'h0, x };
  assign unary_op_not_bit_math_h_l14_c17_763f_return_output = bin_op_plus_bit_math_h_l17_c22_c461_left;
endmodule

module unary_op_not_uint25_t_0clk_de264c78(expr, return_output);
  wire [74:0] \2464.read_pipe ;
  input [24:0] expr;
  wire [24:0] expr;
  output [24:0] return_output;
  wire [24:0] return_output;
  assign return_output = ~ expr;
  assign \2464.read_pipe  = { expr, 50'hzzzzzzzzzzzzz };
endmodule

module unary_op_not_uint32_t_0clk_de264c78(expr, return_output);
  wire [95:0] \2764.read_pipe ;
  input [31:0] expr;
  wire [31:0] expr;
  output [31:0] return_output;
  wire [31:0] return_output;
  assign return_output = ~ expr;
  assign \2764.read_pipe  = { expr, 64'hzzzzzzzzzzzzzzzz };
endmodule
