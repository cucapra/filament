extern "comb.sv" {
   // ============= Combinational =================

   comp Const[WIDTH, VALUE]<'G: 'L-('G), ?'L: 1='G+1>() -> (
      out: ['G, 'L] WIDTH,
   ) where 'L > 'G, WIDTH > 0;

   comp Add[IN_WIDTH, ?OUT_WIDTH=IN_WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      left: ['G, 'L] IN_WIDTH,
      right: ['G, 'L] IN_WIDTH,
   ) -> (
      out: ['G, 'L] OUT_WIDTH
   ) where 'L > 'G, IN_WIDTH <= OUT_WIDTH, IN_WIDTH > 0, OUT_WIDTH > 0;

   comp Sub[IN_WIDTH, ?OUT_WIDTH=IN_WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      left: ['G, 'L] IN_WIDTH,
      right: ['G, 'L] IN_WIDTH,
   ) -> (
      out: ['G, 'L] OUT_WIDTH
   ) where 'L > 'G, IN_WIDTH <= OUT_WIDTH, IN_WIDTH > 0, OUT_WIDTH > 0;

   comp MultComb[IN_WIDTH, ?OUT_WIDTH=IN_WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      left: ['G, 'L] IN_WIDTH,
      right: ['G, 'L] IN_WIDTH,
   ) -> (
      out: ['G, 'L] OUT_WIDTH,
   ) where 'L > 'G, IN_WIDTH <= OUT_WIDTH, IN_WIDTH > 0, OUT_WIDTH > 0;

   comp And[WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      left: ['G, 'L] WIDTH,
      right: ['G, 'L] WIDTH,
   ) -> (
      out: ['G, 'L] WIDTH,
   ) where 'L > 'G, WIDTH > 0;

   comp Or[WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      left: ['G, 'L] WIDTH,
      right: ['G, 'L] WIDTH,
   ) -> (
      out: ['G, 'L] WIDTH,
   ) where 'L > 'G, WIDTH > 0;

   comp Xor[WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      left: ['G, 'L] WIDTH,
      right: ['G, 'L] WIDTH,
   ) -> (
      out: ['G, 'L] WIDTH,
   ) where 'L > 'G, WIDTH > 0;

   comp Not[WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      in: ['G, 'L] WIDTH,
   ) -> (
      out: ['G, 'L] WIDTH,
   ) where 'L > 'G, WIDTH > 0;

   comp Eq[WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      left: ['G, 'L] WIDTH,
      right: ['G, 'L] WIDTH,
   ) -> (
      out: ['G, 'L] 1,
   ) where 'L > 'G, WIDTH > 0;

   comp Neq[WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      left: ['G, 'L] WIDTH,
      right: ['G, 'L] WIDTH,
   ) -> (
      out: ['G, 'L] 1,
   ) where 'L > 'G, WIDTH > 0;

   comp Gt[WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      left: ['G, 'L] WIDTH,
      right: ['G, 'L] WIDTH,
   ) -> (
      out: ['G, 'L] 1,
   ) where 'L > 'G, WIDTH > 0;

   comp Lt[WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      left: ['G, 'L] WIDTH,
      right: ['G, 'L] WIDTH,
   ) -> (
      out: ['G, 'L] 1,
   ) where 'L > 'G, WIDTH > 0;

   comp Lte[WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      left: ['G, 'L] WIDTH,
      right: ['G, 'L] WIDTH,
   ) -> (
      out: ['G, 'L] 1,
   ) where 'L > 'G, WIDTH > 0;

   comp Gte[WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      left: ['G, 'L] WIDTH,
      right: ['G, 'L] WIDTH,
   ) -> (
      out: ['G, 'L] 1,
   ) where 'L > 'G, WIDTH > 0;

   comp SignExtend[IN_WIDTH, OUT_WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      in: ['G, 'L] IN_WIDTH,
   ) -> (
      out: ['G, 'L] OUT_WIDTH,
   ) where 'L > 'G, IN_WIDTH > 0, OUT_WIDTH > 0, OUT_WIDTH >= IN_WIDTH;

   comp ZeroExtend[IN_WIDTH, OUT_WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      in: ['G, 'L] IN_WIDTH,
   ) -> (
      out: ['G, 'L] OUT_WIDTH,
   ) where 'L > 'G, IN_WIDTH > 0, OUT_WIDTH > 0, OUT_WIDTH >= IN_WIDTH;

   comp Concat[LEFT, RIGHT, ?OUT = LEFT + RIGHT]<'G: 'L-('G), ?'L: 1='G+1>(
      left: ['G, 'L] LEFT,
      right: ['G, 'L] RIGHT,
   ) -> (
      out: ['G, 'L] OUT,
   ) where 'L > 'G, LEFT > 0, RIGHT > 0, OUT == LEFT + RIGHT;

   comp Select[WIDTH, POS]<'G: 'L-('G), ?'L: 1='G+1>(
      in: ['G, 'L] WIDTH,
   ) -> (
      out: ['G, 'L] 1,
   ) where 'L > 'G, WIDTH > 0, POS < WIDTH;

   comp Slice[IN_WIDTH, MSB, LSB, ?OUT_WIDTH=MSB - LSB + 1]<'G: 'L-('G), ?'L: 1='G+1>(
      in: ['G, 'L] IN_WIDTH,
   ) -> (
      out: ['G, 'L] OUT_WIDTH,
   ) where 'L > 'G,
         IN_WIDTH > 0,
         OUT_WIDTH > 0,
         MSB < IN_WIDTH,
         LSB < IN_WIDTH,
         MSB >= LSB,
         OUT_WIDTH == MSB - LSB + 1;

   comp ReduceAnd[WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      in: ['G, 'L] WIDTH,
   ) -> (
      out: ['G, 'L] 1,
   ) where 'L > 'G, WIDTH > 0;

   comp ReduceOr[WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      in: ['G, 'L] WIDTH,
   ) -> (
      out: ['G, 'L] 1,
   ) where 'L > 'G, WIDTH > 0;

   comp ShiftLeft[WIDTH, ?SHIFT_WIDTH=WIDTH, ?OUT_WIDTH=WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      in: ['G, 'L] WIDTH,
      shift: ['G, 'L] SHIFT_WIDTH,
   ) -> (
      out: ['G, 'L] OUT_WIDTH,
   ) where 'L > 'G, WIDTH > 0, SHIFT_WIDTH > 0, OUT_WIDTH > 0;

   comp ShiftRight[WIDTH, ?SHIFT_WIDTH=WIDTH, ?OUT_WIDTH=WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      in: ['G, 'L] WIDTH,
      shift: ['G, 'L] SHIFT_WIDTH,
   ) -> (
      out: ['G, 'L] OUT_WIDTH,
   ) where 'L > 'G, WIDTH > 0, SHIFT_WIDTH > 0, OUT_WIDTH > 0;

   comp ArithShiftRight[WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      in: ['G, 'L] WIDTH,
      shift: ['G, 'L] WIDTH,
   ) -> (
      out: ['G, 'L] WIDTH,
   ) where 'L > 'G, WIDTH > 0;

   comp Mux[WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      sel: ['G, 'L] 1,
      in0: ['G, 'L] WIDTH,
      in1: ['G, 'L] WIDTH,
   ) -> (
      out: ['G, 'L] WIDTH,
   ) where 'L > 'G, WIDTH > 0;

   comp Extend[IN_WIDTH, OUT_WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
      in: ['G, 'L] IN_WIDTH
   ) -> (
      out: ['G, 'L] OUT_WIDTH
   ) where 'L > 'G, IN_WIDTH > 0, OUT_WIDTH > 0;
}

// Reduces a bundle of N wires of size W to a single wire of size W*N
// {010, 101, 111} -> 010101111
comp ConcatBundle[W, N]<'G: 1>(
   in[N]: ['G, 'G + 1] W
) -> (
   out: ['G, 'G + 1] W*N
) where N > 0, W > 0 {
   if N == 1 {
      out = in{0};
   } else {
      // recursively reduce
      red := new ConcatBundle[W, N-1]<'G>(in{1..N});
      c := new Concat[W, W*(N-1)]<'G>(in{0}, red.out);
      out = c.out;
   }
}

// Splits a wire of size W*N into a bundle of N wires of size W
// 010101111 -> {010, 101, 111}
comp SplitWire[W, N]<'G: 1>(
   in: ['G, 'G + 1] W*N
) -> (
   out[N]: ['G, 'G + 1] W
) where N > 0, W > 0 {
   if N == 1 {
      out{0} = in;
   } else {
      // Take the W most significant bits and put in the left
      s := new Slice[W*N, W*N-1, W*(N-1)]<'G>(in);
      out{0} = s.out;
      // remaining bits
      rem := new Slice[W*N, W*(N-1)-1, 0]<'G>(in);

      spl := new SplitWire[W, N-1]<'G>(rem.out);
      out{1..N} = spl.out{0..N-1};
   }
}