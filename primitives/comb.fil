extern "comb.sv" {
  // ============= Combinational =================

  comp Const[#WIDTH, #VALUE]<G: L-(G), ?L: 1=G+1>() -> (
    @[G, L] out: #WIDTH,
  ) where L > G, #WIDTH > 0;

  comp Add[#IN_WIDTH, ?#OUT_WIDTH=#IN_WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] left: #IN_WIDTH,
    @[G, L] right: #IN_WIDTH,
  ) -> (
    @[G, L] out: #OUT_WIDTH
  ) where L > G, #IN_WIDTH <= #OUT_WIDTH, #IN_WIDTH > 0, #OUT_WIDTH > 0;

  comp Sub[#IN_WIDTH, ?#OUT_WIDTH=#IN_WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] left: #IN_WIDTH,
    @[G, L] right: #IN_WIDTH,
  ) -> (
    @[G, L] out: #OUT_WIDTH
  ) where L > G, #IN_WIDTH <= #OUT_WIDTH, #IN_WIDTH > 0, #OUT_WIDTH > 0;

  comp MultComb[#IN_WIDTH, ?#OUT_WIDTH=#IN_WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] left: #IN_WIDTH,
    @[G, L] right: #IN_WIDTH,
  ) -> (
    @[G, L] out: #OUT_WIDTH,
  ) where L > G, #IN_WIDTH <= #OUT_WIDTH, #IN_WIDTH > 0, #OUT_WIDTH > 0;

  comp And[#WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] left: #WIDTH,
    @[G, L] right: #WIDTH,
  ) -> (
    @[G, L] out: #WIDTH,
  ) where L > G, #WIDTH > 0;

  comp Or[#WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] left: #WIDTH,
    @[G, L] right: #WIDTH,
  ) -> (
    @[G, L] out: #WIDTH,
  ) where L > G, #WIDTH > 0;

  comp Xor[#WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] left: #WIDTH,
    @[G, L] right: #WIDTH,
  ) -> (
    @[G, L] out: #WIDTH,
  ) where L > G, #WIDTH > 0;

  comp Not[#WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] in: #WIDTH,
  ) -> (
    @[G, L] out: #WIDTH,
  ) where L > G, #WIDTH > 0;

  comp Eq[#WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] left: #WIDTH,
    @[G, L] right: #WIDTH,
  ) -> (
    @[G, L] out: 1,
  ) where L > G, #WIDTH > 0;

  comp Neq[#WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] left: #WIDTH,
    @[G, L] right: #WIDTH,
  ) -> (
    @[G, L] out: 1,
  ) where L > G, #WIDTH > 0;

  comp Gt[#WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] left: #WIDTH,
    @[G, L] right: #WIDTH,
  ) -> (
    @[G, L] out: 1,
  ) where L > G, #WIDTH > 0;

  comp Lt[#WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] left: #WIDTH,
    @[G, L] right: #WIDTH,
  ) -> (
    @[G, L] out: 1,
  ) where L > G, #WIDTH > 0;

  comp Lte[#WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] left: #WIDTH,
    @[G, L] right: #WIDTH,
  ) -> (
    @[G, L] out: 1,
  ) where L > G, #WIDTH > 0;

  comp Gte[#WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] left: #WIDTH,
    @[G, L] right: #WIDTH,
  ) -> (
    @[G, L] out: 1,
  ) where L > G, #WIDTH > 0;

  comp SignExtend[#IN_WIDTH, #OUT_WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] in: #IN_WIDTH,
  ) -> (
    @[G, L] out: #OUT_WIDTH,
  ) where L > G, #IN_WIDTH > 0, #OUT_WIDTH > 0, #OUT_WIDTH >= #IN_WIDTH;

  comp ZeroExtend[#IN_WIDTH, #OUT_WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] in: #IN_WIDTH,
  ) -> (
    @[G, L] out: #OUT_WIDTH,
  ) where L > G, #IN_WIDTH > 0, #OUT_WIDTH > 0, #OUT_WIDTH >= #IN_WIDTH;

  comp Concat[#LEFT, #RIGHT, #OUT]<G: L-(G), ?L: 1=G+1>(
    @[G, L] left: #LEFT,
    @[G, L] right: #RIGHT,
  ) -> (
    @[G, L] out: #OUT,
  ) where L > G, #LEFT > 0, #RIGHT > 0, #OUT == #LEFT + #RIGHT;

  comp Select[#WIDTH, #POS]<G: L-(G), ?L: 1=G+1>(
    @[G, L] in: #WIDTH,
  ) -> (
    @[G, L] out: 1,
  ) where L > G, #WIDTH > 0, #POS < #WIDTH;

  comp Slice[#IN_WIDTH, #MSB, #LSB, #OUT_WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] in: #IN_WIDTH,
  ) -> (
    @[G, L] out: #OUT_WIDTH,
  ) where L > G,
          #IN_WIDTH > 0,
          #OUT_WIDTH > 0,
          #MSB < #IN_WIDTH,
          #LSB < #IN_WIDTH,
          #MSB >= #LSB;

  comp ReduceAnd[#WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] in: #WIDTH,
  ) -> (
    @[G, L] out: 1,
  ) where L > G, #WIDTH > 0;

  comp ReduceOr[#WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] in: #WIDTH,
  ) -> (
    @[G, L] out: 1,
  ) where L > G, #WIDTH > 0;

  comp ShiftLeft[#WIDTH, ?#SHIFT_WIDTH=#WIDTH, ?#OUT_WIDTH=#WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] in: #WIDTH,
    @[G, L] shift: #SHIFT_WIDTH,
  ) -> (
    @[G, L] out: #OUT_WIDTH,
  ) where L > G, #WIDTH > 0, #SHIFT_WIDTH > 0, #OUT_WIDTH > 0;

  comp ShiftRight[#WIDTH, ?#SHIFT_WIDTH=#WIDTH, ?#OUT_WIDTH=#WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] in: #WIDTH,
    @[G, L] shift: #SHIFT_WIDTH,
  ) -> (
    @[G, L] out: #OUT_WIDTH,
  ) where L > G, #WIDTH > 0, #SHIFT_WIDTH > 0, #OUT_WIDTH > 0;

  comp ArithShiftRight[#WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] in: #WIDTH,
    @[G, L] shift: #WIDTH,
  ) -> (
    @[G, L] out: #WIDTH,
  ) where L > G, #WIDTH > 0;

  comp Mux[#WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G, L] sel: 1,
    @[G, L] in0: #WIDTH,
    @[G, L] in1: #WIDTH,
  ) -> (
    @[G, L] out: #WIDTH,
  ) where L > G, #WIDTH > 0;

  comp Extend[#IN_WIDTH, #OUT_WIDTH]<G: L-(G), ?L: 1=G+1>(
    @[G,L] in: #IN_WIDTH
  ) -> (
    @[G,L] out: #OUT_WIDTH
  ) where L > G, #IN_WIDTH > 0, #OUT_WIDTH > 0;
}