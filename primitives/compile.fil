/**
 * Primitives defined for compilation
 */

extern "compile.sv" {
  // Compiled representation for `|` (or) syntax.
  // A component like merge but does not require a mux to switch between signals
  // because they are guaranteed to be disjoint because of the exact specification.
  component Or<T0, T, L, E, E0>(
    // Exact requires that the input be a precisely the same interval instead of
    // being a subset.
    @[T0,E0] + @exact[T, L] first: 32,
    @[T0,E0] + @exact[L, E] second: 32
  ) -> (
    @[T0, E0] + @exact[T, E] out: 32,
  ) where T0 <= T, E0 >= E, L > T;

  // Compiled representation for `?` (guard) syntax.
  // The primitive allows a signal to pass through during the interval [T, L]
  // while disabling it during the remainder of its provided lifetime.
  component PassThrough<T0, T, L, L0>(
    @[T0, L0] in: 32,
    @[T0, L0] + @exact[T, L] sel: 1
  ) -> (
    @[T0, L0] + @exact[T, L] out: 32,
  );


  component Not(
    @[T0, E0] + @exact[T, E] in: 1
  ) -> (
    // Represent disjoint union when signals are non-zero.
    @[T0, E0] + @exact[T0, T] + @exact[E, E0] out: 1
  );

  component And<T0, T, L, E, E0>(
    // Exact requires that the input be a precisely the same interval instead of
    // being a subset.
    @[T0,E0] + @exact[T, L] first: 32,
    @[T0,E0] + @exact[T, E] second: 32
  ) -> (
    @[T0, E0] + @exact[T, L] out: 32,
  ) where L < E;
}

