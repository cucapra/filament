generate(flopoco) using "flopoco.toml" {
    /// Floating point addition with Flopoco's internal format
    comp FPAdd[Exp, Mant]<'G:1>(
        clk: 1,
        // TODO(rachitnigam): Support reset with different name
        // rst: 1,
        X: ['G, 'G+1] Width,
        Y: ['G, 'G+1] Width,
    ) -> (
        R: ['G+L, 'G+L+1] Width,
    ) with {
        // Flopoco's internal format uses two extra bits.
        let Width = Exp+Mant+3;
        some L where L >= 0;
    };

    /// Floating point exponentiation with Flopoco's internal format
    comp FPExp[Exp, Mant]<'G:1>(
        clk: 1,
        X: ['G, 'G+1] Width,
        Y: ['G, 'G+1] Width,
    ) -> (
        R: ['G+L, 'G+L+1] Width,
    ) with {
        // Flopoco's internal format uses two extra bits.
        let Width = Exp+Mant+3;
        some L where L >= 0;
    };

    /// Converts an IEEE floating point number to Flopoco internal format
    comp InputIEEE[ExpIn, MantIn, ExpOut, MantOut]<'G:1>(
        X: ['G, 'G+1] WidthIEEE
    ) -> (
        R: ['G+L, 'G+L+1] WidthFPC
    ) with {
        let WidthIEEE = ExpIn + MantIn + 1;
        let WidthFPC = ExpOut + MantOut + 3;
        some L where L >= 0;
    };

    /// Converts a Flopoco internal format floating point number to IEEE
    comp OutputIEEE[ExpIn, MantIn, ExpOut, MantOut]<'G:1>(
        X: ['G, 'G+1] WidthFPC
    ) -> (
        R: ['G+L, 'G+L+1] WidthIEEE
    ) with {
        let WidthFPC = ExpIn + MantIn + 3;
        let WidthIEEE = ExpOut + MantOut + 1;
        some L where L >= 0;
    };

    /// Floating point addition with IEEE format
    comp IEEEFPAdd[Exp, Mant]<'G:1>(
        clk: 1,
        X: ['G, 'G+1] Width,
        Y: ['G, 'G+1] Width,
    ) -> (
        R: ['G+L, 'G+L+1] Width,
    ) with {
        let Width = Exp+Mant+1;
        some L where L >= 0;
    };
}
