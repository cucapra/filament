import "comb.fil";

extern "signed.sv" {
  comp SAdd[WIDTH]<'G: 'L-('G), ?'L: 1='G+1>(
     left: ['G, 'L] WIDTH,
     right: ['G, 'L] WIDTH
  ) -> (
     out: ['G, 'L] WIDTH,
  ) where 'L > 'G;
}

comp SignedConst[WIDTH, VALUE]<'G: 1>() -> (
   out: ['G, 'G + 1] WIDTH,
) where
   WIDTH > 0
{
   if VALUE >= pow2(WIDTH-1) {
      c := new Const[WIDTH, pow2(WIDTH) - VALUE]<'G>();
      negc := new Neg[WIDTH]<'G>(c.out);
      out = negc.out;
   } else {
      posc := new Const[WIDTH, VALUE]<'G>();
      out = posc.out;
   }
}