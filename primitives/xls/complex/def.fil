generate(xls) using "xls.toml" {
    comp ComplexMultXLS[Exp, Mant]<'G:1>(
        clk:1,
        left_r:  ['G, 'G+1] W, 
        left_i:  ['G, 'G+1] W,
        right_r: ['G, 'G+1] W,
        right_i: ['G, 'G+1] W,
    ) -> (
        out: ['G+L-1, 'G+L] 2*W,
    ) with {
        let W = Exp+Mant+1;
        some L where L >= 1;
    };

    comp ComplexAddXLS[Exp, Mant]<'G:1>(
        clk:1,
        left_r:  ['G, 'G+1] W,
        left_i:  ['G, 'G+1] W,
        right_r: ['G, 'G+1] W,
        right_i: ['G, 'G+1] W,
    ) -> (
        out: ['G+L-1, 'G+L] 2*W,
    ) with {
        let W = Exp+Mant+1;
        some L where L >= 1;
    };

    comp ComplexSubXLS[Exp, Mant]<'G:1>(
        clk:1,
        left_r:  ['G, 'G+1] W, 
        left_i:  ['G, 'G+1] W,
        right_r: ['G, 'G+1] W,
        right_i: ['G, 'G+1] W,
    ) -> (
        out: ['G+L-1, 'G+L] 2*W,
    ) with {
        let W = Exp+Mant+1;
        some L where L >= 1;
    };

    comp ComplexNegXLS[Exp, Mant]<'G:1>(
        clk:1,
        left_r:  ['G, 'G+1] W, 
        left_i:  ['G, 'G+1] W,
    ) -> (
        out: ['G+L-1, 'G+L] 2*W,
    ) with {
        let W = Exp+Mant+1;
        some L where L >= 1;
    };
}

comp ComplexMult[Exp, Mant]<'G:1>(
    clk:1,
    in0[2]: ['G, 'G+1] W,
    in1[2]: ['G, 'G+1] W,
) -> (
    out[2]: ['G+L-1, 'G+L] W,
) with {
    let W = Exp+Mant+1;
    some L where L >= 1;
} where W > 0 {
    XLS := new ComplexMultXLS[Exp, Mant];
    x := XLS<'G>(in0{0}, in0{1}, in1{0}, in1{1});
    out_r := new Slice[2*W, 2*W-1, W]<'G+XLS::L+1>(x.out);
    out_i := new Slice[2*W, W-1, 0]<'G+XLS::L+1>(x.out);
    out{0} = out_r.out;
    out{1} = out_i.out;

    L := XLS::L+1;
}

comp ComplexAdd[Exp, Mant]<'G:1>(
    clk:1,
    in0[2]: ['G, 'G+1] W,
    in1[2]: ['G, 'G+1] W,
) -> (
    out[2]: ['G+L-1, 'G+L] W,
) with {
    let W = Exp+Mant+1;
    some L where L >= 1;
} where W > 0 {
    XLS := new ComplexAddXLS[Exp, Mant];
    x := XLS<'G>(in0{0}, in0{1}, in1{0}, in1{1});
    out_r := new Slice[2*W, 2*W-1, W]<'G+XLS::L+1>(x.out);
    out_i := new Slice[2*W, W-1, 0]<'G+XLS::L+1>(x.out);
    out{0} = out_r.out;
    out{1} = out_i.out;

    L := XLS::L+1;
}

comp ComplexSub[Exp, Mant]<'G:1>(
    clk:1,
    in0[2]: ['G, 'G+1] W,
    in1[2]: ['G, 'G+1] W,
) -> (
    out[2]: ['G+L-1, 'G+L] W,
) with {
    let W = Exp+Mant+1;
    some L where L >= 1;
} where W > 0 {
    XLS := new ComplexSubXLS[Exp, Mant];
    x := XLS<'G>(in0{0}, in0{1}, in1{0}, in1{1});
    out_r := new Slice[2*W, 2*W-1, W]<'G+XLS::L+1>(x.out);
    out_i := new Slice[2*W, W-1, 0]<'G+XLS::L+1>(x.out);
    out{0} = out_r.out;
    out{1} = out_i.out;

    L := XLS::L+1;
}

comp ComplexNeg[Exp, Mant]<'G:1>(
    clk:1,
    in0[2]: ['G, 'G+1] W,
) -> (
    out[2]: ['G+L-1, 'G+L] W,
) with {
    let W = Exp+Mant+1;
    some L where L >= 1;
} where W > 0 {
    XLS := new ComplexNegXLS[Exp, Mant];
    x := XLS<'G>(in0{0}, in0{1});
    out_r := new Slice[2*W, 2*W-1, W]<'G+XLS::L+1>(x.out);
    out_i := new Slice[2*W, W-1, 0]<'G+XLS::L+1>(x.out);
    out{0} = out_r.out;
    out{1} = out_i.out;

    L := XLS::L+1;
}