#!/usr/bin/env python3
"""
Summary report generator for timing analysis results.
Analyzes JSON files generated by the timing parser and creates summary reports.
"""

import argparse
import json
import sys
from pathlib import Path
from typing import List, Dict, Any
import csv


def load_json_files(directory: str) -> List[Dict[str, Any]]:
    """Load all JSON files from the specified directory."""
    json_files = []
    directory_path = Path(directory)

    for json_file in directory_path.glob("**/*timing_summary_routed.json"):
        try:
            with open(json_file, "r") as f:
                data = json.load(f)
                data["_source_file"] = str(json_file)
                data["_design_variant"] = json_file.parts[
                    -5
                ]  # Extract design variant from path
                json_files.append(data)
        except Exception as e:
            print(f"Error loading {json_file}: {e}")

    return json_files


def analyze_timing_data(data_list: List[Dict[str, Any]]) -> Dict[str, Any]:
    """Analyze timing data and generate summary statistics."""
    summary = {
        "total_designs": len(data_list),
        "setup_violations": 0,
        "hold_violations": 0,
        "designs_with_critical_paths": 0,
        "worst_setup_wns": 0.0,
        "worst_hold_wns": 0.0,
        "design_details": [],
    }

    for data in data_list:
        design_detail = {
            "variant": data.get("_design_variant", "unknown"),
            "source_file": data.get("_source_file", ""),
            "design_name": data.get("design_info", {}).get("name", "unknown"),
            "setup_wns": data.get("timing_summary", {})
            .get("setup", {})
            .get("wns", 0.0),
            "hold_wns": data.get("timing_summary", {}).get("hold", {}).get("wns", 0.0),
            "setup_failing_endpoints": data.get("timing_summary", {})
            .get("setup", {})
            .get("failing_endpoints", 0),
            "hold_failing_endpoints": data.get("timing_summary", {})
            .get("hold", {})
            .get("failing_endpoints", 0),
            "critical_paths_count": len(data.get("critical_paths", [])),
            "clocks_count": len(data.get("clocks", [])),
            "device": data.get("design_info", {}).get("device", "unknown"),
            "tool_version": data.get("design_info", {}).get("tool_version", "unknown"),
        }

        summary["design_details"].append(design_detail)

        # Count violations
        if design_detail["setup_wns"] < 0:
            summary["setup_violations"] += 1
        if design_detail["hold_wns"] < 0:
            summary["hold_violations"] += 1

        # Track worst case
        if design_detail["setup_wns"] < summary["worst_setup_wns"]:
            summary["worst_setup_wns"] = design_detail["setup_wns"]
        if design_detail["hold_wns"] < summary["worst_hold_wns"]:
            summary["worst_hold_wns"] = design_detail["hold_wns"]

        # Count designs with critical paths
        if design_detail["critical_paths_count"] > 0:
            summary["designs_with_critical_paths"] += 1

    return summary


def generate_text_report(summary: Dict[str, Any], output_file: str = None) -> str:
    """Generate a text summary report."""
    report_lines = [
        "Timing Analysis Summary Report",
        "=" * 40,
        "",
        f"Total designs analyzed: {summary['total_designs']}",
        f"Designs with setup violations: {summary['setup_violations']}",
        f"Designs with hold violations: {summary['hold_violations']}",
        f"Designs with critical paths: {summary['designs_with_critical_paths']}",
        f"Worst setup WNS: {summary['worst_setup_wns']:.3f}ns",
        f"Worst hold WNS: {summary['worst_hold_wns']:.3f}ns",
        "",
        "Design Details:",
        "-" * 20,
    ]

    # Sort by setup WNS (worst first)
    sorted_designs = sorted(summary["design_details"], key=lambda x: x["setup_wns"])

    for design in sorted_designs:
        report_lines.extend(
            [
                f"Design: {design['variant']}",
                f"  Setup WNS: {design['setup_wns']:.3f}ns (failing: {design['setup_failing_endpoints']})",
                f"  Hold WNS: {design['hold_wns']:.3f}ns (failing: {design['hold_failing_endpoints']})",
                f"  Critical paths: {design['critical_paths_count']}",
                f"  Device: {design['device']}",
                "",
            ]
        )

    report_text = "\\n".join(report_lines)

    if output_file:
        with open(output_file, "w") as f:
            f.write(report_text)

    return report_text


def generate_csv_report(summary: Dict[str, Any], output_file: str):
    """Generate a CSV summary report."""
    fieldnames = [
        "variant",
        "design_name",
        "setup_wns",
        "hold_wns",
        "setup_failing_endpoints",
        "hold_failing_endpoints",
        "critical_paths_count",
        "clocks_count",
        "device",
        "tool_version",
    ]

    with open(output_file, "w", newline="") as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()

        for design in summary["design_details"]:
            row = {field: design.get(field, "") for field in fieldnames}
            writer.writerow(row)


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(
        description="Generate summary reports from timing analysis JSON files",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s synth-res/                      # Generate text report from directory
  %(prog)s synth-res/ -o report.txt        # Save text report to file
  %(prog)s synth-res/ --csv summary.csv    # Generate CSV report
        """,
    )

    parser.add_argument(
        "directory", help="Directory containing timing analysis JSON files"
    )

    parser.add_argument("-o", "--output", help="Output file for text report")

    parser.add_argument("--csv", help="Generate CSV report with specified filename")

    parser.add_argument("--json", help="Generate JSON summary with specified filename")

    args = parser.parse_args()

    if not Path(args.directory).exists():
        print(f"Error: Directory {args.directory} does not exist")
        return 1

    print(f"Loading JSON files from {args.directory}...")
    data_list = load_json_files(args.directory)

    if not data_list:
        print("No timing summary JSON files found")
        return 1

    print(f"Found {len(data_list)} timing summary files")

    # Analyze the data
    summary = analyze_timing_data(data_list)

    # Generate text report
    text_report = generate_text_report(summary, args.output)

    if not args.output:
        print(text_report)
    else:
        print(f"Text report saved to {args.output}")

    # Generate CSV report if requested
    if args.csv:
        generate_csv_report(summary, args.csv)
        print(f"CSV report saved to {args.csv}")

    # Generate JSON summary if requested
    if args.json:
        with open(args.json, "w") as f:
            json.dump(summary, f, indent=2)
        print(f"JSON summary saved to {args.json}")

    return 0


if __name__ == "__main__":
    sys.exit(main())
