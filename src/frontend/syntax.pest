WHITESPACE = _{ " " | "\t" | NEWLINE }

// C-style comments
COMMENT = _{ ("//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE) | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// Identifiers may begin with `_` or an ASCII character.
identifier = @{ ("_" | ASCII_ALPHA)+ ~ ("_" | ASCII_ALPHA | ASCII_DIGIT)* }

// Positive numbers
bitwidth = @{ ASCII_DIGIT+ }

char = { !"\"" ~ ANY }
string_lit = ${ "\"" ~ char* ~ "\"" }
import = _{
      "import" ~ string_lit ~ ";"
}
imports = { import* }

// ====== toplevel ======

file = {
  SOI
    ~ imports
    ~ comp_or_ext*
    ~ EOI
}

gt =  { ">" }
gte = { ">=" }
lt =  { "<" }
lte = { "<=" }
eq =  { "=" }
order_op = { gte | gt | lte | lt | eq }

constraint = {
  expr ~ order_op ~ expr
  | time ~ order_op ~ time
}
constraints = {
  ("where" ~ (constraint ~ ("," ~ constraint)*))?
}

params = {
  ("[" ~ param_var ~ ("," ~ param_var)* ~ "]")?
}
signature = {
  identifier ~ params ~ abstract_var? ~ io ~ constraints
}
component = {
  "comp" ~ signature ~ "{" ~ command* ~ "}"
}
external = {
  "extern" ~ string_lit ~ "{" ~  ("comp" ~ signature ~ ";")*  ~ "}"
}

comp_or_ext = {
  component | external
}

// ====== Component signature ======

// Expressions
pound = { "#" }
param_var = ${ pound ~ identifier }
interface = {
  "@interface" ~ "[" ~ identifier ~ "]"
}
op_mul = { "*" }
op_div = { "/" }
op_add = { "+" }
op_sub = { "-" }
operator = _{ op_mul | op_div | op_add | op_sub }

expr_base = {
  | "(" ~ expr ~ ")"
  | bitwidth
  | param_var
}
expr = {
  expr_base ~ (operator ~ expr_base)*
}

// Event bindings
delay = {
  expr |
  time ~ "-" ~ "(" ~ time ~ ")"
}
event_with_delay = _{
  identifier ~ ":" ~ delay
}
event_bind = {
  "?" ~ event_with_delay ~ "=" ~ time |
  event_with_delay
}
abstract_var = {
  "<" ~ event_bind ~ ("," ~ event_bind)* ~ ">"
}

// Time
time = {
  identifier ~ "+" ~ expr
  | expr ~ "+" ~ identifier
  | identifier
  | expr
}

// Intervals
interval_range = {
 "@" ~ "[" ~ time ~ "," ~ time ~ "]"
}

// Ports
port_def = {
  (interval_range | interface)? ~ identifier ~ ":" ~ expr
}

arrow = { "->" }

io = {
  "(" ~ ports? ~ ")" ~ arrow ~ "(" ~ ports? ~ ")"
}
ports = {
  port_def ~ ("," ~ port_def)* ~ ","?
}

// ====== Cell instance ======
conc_params = {
  ("[" ~ expr ~ ("," ~ expr)* ~ "]")?
}
instance = {
  identifier ~ ":=" ~ "new" ~ identifier ~ conc_params ~ invoke_args? ~ ";"
}

// Connections

guard = {
  port ~ ("|" ~ guard)?
}

connect = {
  port ~ "=" ~ (guard ~ "?")? ~ port ~ ";"
}

// ====== Invocations ==========

port = {
  identifier ~ "." ~ identifier
  | identifier ~ "{" ~ expr ~ "}"
  | identifier
  | bitwidth
}

arguments = {
  "(" ~ ")"
  | "(" ~ port ~ ("," ~ port)* ~ ")"
}

time_args = {
  "<" ~ time ~ ("," ~ time)* ~ ">"
}

invoke_args = {
  time_args ~ arguments
}

invocation = {
  identifier ~ ":=" ~ identifier ~ invoke_args ~ ";"
  | identifier ~ ":=" ~ "invoke" ~ identifier ~ time_args ~ ";"
}

fsm = {
  "fsm" ~ identifier ~ "[" ~ bitwidth ~ "]" ~ "(" ~ port ~ ")" ~ ";"
}

// ====== Loops ==========

for_loop = {
  "for" ~ param_var ~ "in" ~ expr ~ ".." ~ expr ~ "{" ~ command* ~ "}"
}

// ====== Wire bundles ==========
bundle_typ = {
  "for" ~ "<" ~ param_var ~ ">" ~ interval_range ~ expr
}

bundle = {
  "bundle" ~ identifier ~ "[" ~ expr ~ "]" ~ ":" ~ bundle_typ ~ ";"
}

// ========== Commands ==========
command = {
  bundle | instance | invocation | connect | fsm | for_loop
}
