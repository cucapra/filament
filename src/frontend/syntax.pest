WHITESPACE = _{ " " | "\t" | NEWLINE }

// C-style comments
COMMENT = _{ ("//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE) | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// Identifiers may begin with `_` or an ASCII character.
identifier = @{ ("_" | ASCII_ALPHA)+ ~ ("_" | ASCII_ALPHA | ASCII_DIGIT)* }

// Positive numbers
bitwidth = @{ ASCII_DIGIT+ }

char = { !"\"" ~ ANY }
string_lit = ${ "\"" ~ char* ~ "\"" }
import = _{
      "import" ~ string_lit ~ ";"
}
imports = { import* }

// ====== toplevel ======

file = {
  SOI
    ~ imports
    ~ comp_or_ext*
    ~ EOI
}

gt = { ">" }
lt = { "<" }
eq = { "=" }
order_op = { gt | lt | eq }

constraint = {
  time ~ order_op ~ time
}
constraints = {
  ("where" ~ (constraint ~ ("," ~ constraint)*))?
}

signature = {
  identifier ~ abstract_var? ~ io ~ constraints
}
component = {
  "component" ~ signature ~ "{" ~ command* ~ "}"
}
external = {
  "extern" ~ "component" ~ signature ~ ";"
}

comp_or_ext = {
  component | external
}

// ====== Component signature ======

abstract_var = {
  "<" ~ identifier ~ ("," ~ identifier)* ~ ">"
}

exact = { "exact" }

interval = {
  "@" ~ exact? ~ "[" ~ time ~ "," ~ time ~ "]"
}

time_base = {
  bitwidth
  | (max ~ "(" ~ time ~ "," ~ time ~ ")")
  | identifier
}
plus = { "+" }
max = { "max" }
time_expr = { (time_base ~ plus ~ time) }
time = { time_expr | time_base }

port_def = {
  interval ~ identifier ~ ":" ~ (bitwidth | identifier)
}

arrow = { "->" }

io = {
  "(" ~ ports? ~ ")" ~ arrow ~ "(" ~ ports? ~ ")"
}
ports = {
  port_def ~ ("," ~ port_def)* ~ ","?
}

// ====== Cell instance ======
instance = {
  identifier ~ ":=" ~ "new" ~ identifier ~ ";"
}

// Connections

guard = {
  port ~ "|" ~ guard
  | port
}

connect = {
  port ~ "=" ~ (guard ~ "?")? ~ port ~ ";"
}

// ====== Invocations ==========

port = {
  identifier ~ "." ~ identifier
  | identifier
  | bitwidth
}

arguments = {
  "(" ~ ")"
  | "(" ~ port ~ ("," ~ port)* ~ ")"
}

time_args = {
  "<" ~ time ~ ("," ~ time)* ~ ">"
}
invocation_expr = {
  identifier ~ time_args ~ arguments
}

invocation = {
  identifier ~ ":=" ~ invocation_expr ~ ";"
}

// =========== When ============
when = {
  "when" ~ time ~ "{" ~ command* ~ "}"
}

// ========== Commands ==========
command = {
  instance | invocation | when | connect
}
