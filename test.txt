warning: field `param_cons` is never read
  --> crates/ir/src/from_ast/sig_map.rs:28:9
   |
13 | pub struct Sig {
   |            --- field in this struct
...
28 |     pub param_cons: Vec<ast::Loc<ast::OrderConstraint<ast::Expr>>>,
   |         ^^^^^^^^^^
   |
   = note: `Sig` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: `fil-ir` (lib) generated 1 warning
   Compiling filament v0.1.0 (/home/filament/crates/filament)
warning: unused imports: `Instance` and `self as ast`
 --> crates/filament/src/ir_passes/assumptions.rs:2:15
  |
2 | use fil_ast::{self as ast, Instance};
  |               ^^^^^^^^^^^  ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `ExprIdx` and `PropIdx`
 --> crates/filament/src/ir_passes/assumptions.rs:4:48
  |
4 |     self as ir, AddCtx, Bind, Ctx, DisplayCtx, ExprIdx, Foreign, PropIdx,
  |                                                ^^^^^^^           ^^^^^^^

warning: `filament` (lib) generated 2 warnings (run `cargo fix --lib -p filament` to apply 2 suggestions)
warning: unreachable statement
  --> crates/filament/src/main.rs:88:5
   |
87 |       std::process::exit(0);
   |       --------------------- any code following this expression is unreachable
88 | /     if !opts.unsafe_skip_discharge {
89 | |         ir_pass_pipeline! {opts, ir; ip::Discharge }
90 | |     }
   | |_____^ unreachable statement
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `gen_exec`
  --> crates/filament/src/main.rs:62:13
   |
62 |     let mut gen_exec = if ns.requires_gen() {
   |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_gen_exec`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
  --> crates/filament/src/main.rs:62:9
   |
62 |     let mut gen_exec = if ns.requires_gen() {
   |         ----^^^^^^^^
   |         |
   |         help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: `filament` (bin "filament") generated 3 warnings (run `cargo fix --bin "filament"` to apply 1 suggestion)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 3.17s
     Running `target/debug/filament tests/check/exist-rec.fil --dump-after astconv --check --log trace --dump-after assumptions`
[INFO ] Parsed `tests/check/exist-rec.fil` in 1ms
[INFO ] Parsed `./primitives/core.fil` in 0ms
[INFO ] Parsed `./primitives/./state.fil` in 3ms
[INFO ] Parsed `./primitives/reshape.fil` in 5ms
[INFO ] Parsed `./primitives/./comb.fil` in 9ms
[TRACE] Imported: {
        "/home/filament/primitives/core.fil",
        "/home/filament/primitives/comb.fil",
        "/home/filament/primitives/state.fil",
        "/home/filament/primitives/reshape.fil",
    }
[TRACE] Components: [
        "Serialize",
        "Deserialize",
        "Downsample",
        "ConcatBundle",
        "SplitWire",
        "Shift",
        "Pow",
        "main",
    ]
[TRACE] Externs: [
        "Register",
        "Delay",
        "PassThroughRegister",
        "Prev",
        "ContPrev",
        "Const",
        "Add",
        "Sub",
        "MultComb",
        "And",
        "Or",
        "Xor",
        "Not",
        "Eq",
        "Neq",
        "Gt",
        "Lt",
        "Lte",
        "Gte",
        "SignExtend",
        "ZeroExtend",
        "Concat",
        "Select",
        "Slice",
        "ReduceAnd",
        "ReduceOr",
        "ShiftLeft",
        "ShiftRight",
        "ArithShiftRight",
        "Mux",
        "Extend",
    ]
[INFO ] fsm-attributes: 0ms
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event G as %ev0
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event L as %ev1
[TRACE] Added event G as %ev0
[TRACE] Added event G as %ev0
[TRACE] Added event G as %ev0
[TRACE] Added event G as %ev0
[TRACE] Added event G as %ev0
[TRACE] Added event G as %ev0
[TRACE] Added event G as %ev0
[TRACE] Added event G as %ev0
[DEBUG] Adding component: %comp0
[DEBUG] Adding component: %comp1
[DEBUG] Adding component: %comp2
[DEBUG] Adding component: %comp3
[DEBUG] Adding component: %comp4
[DEBUG] Adding component: %comp5
[DEBUG] Adding component: %comp6
[DEBUG] Adding component: %comp7
[DEBUG] Adding component: %comp8
[DEBUG] Adding component: %comp9
[DEBUG] Adding component: %comp10
[DEBUG] Adding component: %comp11
[DEBUG] Adding component: %comp12
[DEBUG] Adding component: %comp13
[DEBUG] Adding component: %comp14
[DEBUG] Adding component: %comp15
[DEBUG] Adding component: %comp16
[DEBUG] Adding component: %comp17
[DEBUG] Adding component: %comp18
[DEBUG] Adding component: %comp19
[DEBUG] Adding component: %comp20
[DEBUG] Adding component: %comp21
[DEBUG] Adding component: %comp22
[DEBUG] Adding component: %comp23
[DEBUG] Adding component: %comp24
[DEBUG] Adding component: %comp25
[DEBUG] Adding component: %comp26
[DEBUG] Adding component: %comp27
[DEBUG] Adding component: %comp28
[DEBUG] Adding component: %comp29
[DEBUG] Adding component: %comp30
[DEBUG] Adding component: %comp31
[DEBUG] Adding component: %comp32
[DEBUG] Adding component: %comp33
[DEBUG] Adding component: %comp34
[DEBUG] Adding component: %comp35
[DEBUG] Adding component: %comp36
[DEBUG] Adding component: %comp37
[DEBUG] Adding component: %comp38
[INFO ] astconv: 8ms
#[]
ext comp Register[%pr0]<%ev0: |%ev1 - %ev0+1|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev0+1] %pr0) -> (
  #[]%p1: for<%pr2:1> [%ev0+1, %ev1] %pr0) with {
} where 
  %ev1 > %ev0+1,
{
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
}
#[]
ext comp Delay[%pr0]<%ev0: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev0+1] %pr0) -> (
  #[]%p1: for<%pr2:1> [%ev0+1, %ev0+2] %pr0) with {
{
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
}
#[]
ext comp PassThroughRegister[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev0+1] %pr0) -> (
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) with {
} where 
  %ev1 > %ev0,
{
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
}
#[]
ext comp Prev[%pr0, %pr1]<%ev0: 1>(
  #[]%p0: for<%pr2:1> [%ev0, %ev0+1] %pr0) -> (
  #[]%p1: for<%pr3:1> [%ev0, %ev0+1] %pr0) with {
{
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp ContPrev[%pr0, %pr1]<%ev0: 1>(
  #[]%p0: for<%pr2:1> [%ev0, %ev0+1] %pr0) -> (
  #[]%p1: for<%pr3:1> [%ev0, %ev0+1] %pr0) with {
{
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Const[%pr0, %pr1]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
) -> (
  #[]%p0: for<%pr2:1> [%ev0, %ev1] %pr0) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %pr2 >= 0 & 1 > %pr2; // Misc
}
#[]
ext comp Add[%pr0, %pr1]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr2:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr3:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr4:1> [%ev0, %ev1] %pr1) with {
} where 
  %pr1 >= %pr0,
  %pr0 > 0,
  %pr1 > 0,
  %ev1 > %ev0,
{
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
  assume %pr4 >= 0 & 1 > %pr4; // Misc
}
#[]
ext comp Sub[%pr0, %pr1]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr2:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr3:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr4:1> [%ev0, %ev1] %pr1) with {
} where 
  %pr1 >= %pr0,
  %pr0 > 0,
  %pr1 > 0,
  %ev1 > %ev0,
{
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
  assume %pr4 >= 0 & 1 > %pr4; // Misc
}
#[]
ext comp MultComb[%pr0, %pr1]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr2:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr3:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr4:1> [%ev0, %ev1] %pr1) with {
} where 
  %pr1 >= %pr0,
  %pr0 > 0,
  %pr1 > 0,
  %ev1 > %ev0,
{
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
  assume %pr4 >= 0 & 1 > %pr4; // Misc
}
#[]
ext comp And[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] %pr0) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Or[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] %pr0) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Xor[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] %pr0) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Not[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0) -> (
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
}
#[]
ext comp Eq[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] 1) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Neq[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] 1) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Gt[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] 1) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Lt[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] 1) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Lte[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] 1) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Gte[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] 1) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp SignExtend[%pr0, %pr1]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p1: for<%pr3:1> [%ev0, %ev1] %pr1) with {
} where 
  %pr0 > 0,
  %pr1 > 0,
  %pr1 >= %pr0,
  %ev1 > %ev0,
{
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp ZeroExtend[%pr0, %pr1]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p1: for<%pr3:1> [%ev0, %ev1] %pr1) with {
} where 
  %pr0 > 0,
  %pr1 > 0,
  %pr1 >= %pr0,
  %ev1 > %ev0,
{
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Concat[%pr0, %pr1, %pr2]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr3:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr4:1> [%ev0, %ev1] %pr1) -> (
  #[]%p2: for<%pr5:1> [%ev0, %ev1] %pr2) with {
} where 
  %pr0 > 0,
  %pr1 > 0,
  %pr2 == %pr0+%pr1,
  %ev1 > %ev0,
{
  assume %pr3 >= 0 & 1 > %pr3; // Misc
  assume %pr4 >= 0 & 1 > %pr4; // Misc
  assume %pr5 >= 0 & 1 > %pr5; // Misc
}
#[]
ext comp Select[%pr0, %pr1]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p1: for<%pr3:1> [%ev0, %ev1] 1) with {
} where 
  %pr0 > 0,
  %pr0 > %pr1,
  %ev1 > %ev0,
{
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Slice[%pr0, %pr1, %pr2, %pr3]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr4:1> [%ev0, %ev1] %pr0) -> (
  #[]%p1: for<%pr5:1> [%ev0, %ev1] %pr3) with {
} where 
  %pr0 > 0,
  %pr3 > 0,
  %pr0 > %pr1,
  %pr0 > %pr2,
  %pr1 >= %pr2,
  %pr3 == %pr1-%pr2+1,
  %ev1 > %ev0,
{
  assume %pr4 >= 0 & 1 > %pr4; // Misc
  assume %pr5 >= 0 & 1 > %pr5; // Misc
}
#[]
ext comp ReduceAnd[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0) -> (
  #[]%p1: for<%pr2:1> [%ev0, %ev1] 1) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
}
#[]
ext comp ReduceOr[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0) -> (
  #[]%p1: for<%pr2:1> [%ev0, %ev1] 1) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
}
#[]
ext comp ShiftLeft[%pr0, %pr1, %pr2]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr3:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr4:1> [%ev0, %ev1] %pr1) -> (
  #[]%p2: for<%pr5:1> [%ev0, %ev1] %pr2) with {
} where 
  %pr0 > 0,
  %pr1 > 0,
  %pr2 > 0,
  %ev1 > %ev0,
{
  assume %pr3 >= 0 & 1 > %pr3; // Misc
  assume %pr4 >= 0 & 1 > %pr4; // Misc
  assume %pr5 >= 0 & 1 > %pr5; // Misc
}
#[]
ext comp ShiftRight[%pr0, %pr1, %pr2]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr3:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr4:1> [%ev0, %ev1] %pr1) -> (
  #[]%p2: for<%pr5:1> [%ev0, %ev1] %pr2) with {
} where 
  %pr0 > 0,
  %pr1 > 0,
  %pr2 > 0,
  %ev1 > %ev0,
{
  assume %pr3 >= 0 & 1 > %pr3; // Misc
  assume %pr4 >= 0 & 1 > %pr4; // Misc
  assume %pr5 >= 0 & 1 > %pr5; // Misc
}
#[]
ext comp ArithShiftRight[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] %pr0) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Mux[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] 1,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0,
  #[]%p2: for<%pr3:1> [%ev0, %ev1] %pr0) -> (
  #[]%p3: for<%pr4:1> [%ev0, %ev1] %pr0) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
  assume %pr4 >= 0 & 1 > %pr4; // Misc
}
#[]
ext comp Extend[%pr0, %pr1]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p1: for<%pr3:1> [%ev0, %ev1] %pr1) with {
} where 
  %pr0 > 0,
  %pr1 > 0,
  %ev1 > %ev0,
{
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
comp %comp31[%pr0, %pr1, %pr2, %pr3, %pr4]<%ev0: %pr3*(%pr1-1)+%pr4>(
  #[]%p0: for<%pr5:%pr1*%pr2> [%ev0, %ev0+%pr4] %pr0) -> (
  #[]%p1: for<%pr6:%pr1, %pr7:%pr2> [%ev0+%pr3*%pr6, %ev0+%pr3*%pr6+%pr4] %pr0) with {
} where 
  %pr1 > 0,
  %pr2 > 0,
  %pr3 > 0,
  %pr4 > 0,
{
  assume %pr5 >= 0 & %pr1*%pr2 > %pr5; // Misc
  assume %pr6 >= 0 & %pr1 > %pr6; // Misc
  assume %pr7 >= 0 & %pr2 > %pr7; // Misc
  assume %pr11 >= 0 & 1 > %pr11; // Misc
  assume %pr12 >= 0 & 1 > %pr12; // Misc
  for %pr8 in 0..%pr1 {
    for %pr9 in 0..%pr2 {
      let %pr10 = %pr2*%pr8+%pr9
      if %pr8 > 0 {
        %inst0 = Register[%pr0];
        %inv0, %inv0.%p2, %inv0.%p3 = %inst0<%ev0, %ev0+%pr3*%pr8+%pr4>;
        %inv0.%p3{0} = %p0{%pr10};
        assert %pr3*%pr8+%pr4 > 1; // EventConstraint
        %p1{%pr8}{%pr9} = %inv0.%p2{0};
      } else {
        %p1{%pr8}{%pr9} = %p0{%pr10};
      }
    }
    assume %pr9 >= 0 & %pr2 > %pr9; // Misc
  }
  assume %pr8 >= 0 & %pr1 > %pr8; // Misc
}
#[]
comp %comp32[%pr0, %pr1, %pr2, %pr3, %pr4]<%ev0: (%pr3*(%pr1-1)+%pr4)-1>(
  #[]%p0: for<%pr5:%pr1, %pr6:%pr2> [%ev0+%pr3*%pr5, %ev0+%pr3*%pr5+%pr4] %pr0) -> (
  #[]%p1: for<%pr7:%pr1*%pr2> [%ev0+%pr3*(%pr1-1), %ev0+%pr3*(%pr1-1)+%pr4] %pr0) with {
} where 
  %pr1 > 1,
  %pr2 > 0,
  %pr3 > 0,
  %pr4 > 0,
{
  assume %pr5 >= 0 & %pr1 > %pr5; // Misc
  assume %pr6 >= 0 & %pr2 > %pr6; // Misc
  assume %pr7 >= 0 & %pr1*%pr2 > %pr7; // Misc
  assume %pr11 >= 0 & 1 > %pr11; // Misc
  assume %pr12 >= 0 & 1 > %pr12; // Misc
  for %pr8 in 0..%pr1 {
    for %pr9 in 0..%pr2 {
      let %pr10 = %pr2*%pr8+%pr9
      if %pr1-1 > %pr8 {
        %inst0 = Register[%pr0];
        %inv0, %inv0.%p2, %inv0.%p3 = %inst0<%ev0+%pr3*%pr8, %ev0+%pr3*(%pr1-1)+%pr4>;
        %inv0.%p3{0} = %p0{%pr8}{%pr9};
        assert %pr3*(%pr1-1)+%pr4 > %pr3*%pr8+1; // EventConstraint
        %p1{%pr10} = %inv0.%p2{0};
      } else {
        %p1{%pr10} = %p0{%pr8}{%pr9};
      }
    }
    assume %pr9 >= 0 & %pr2 > %pr9; // Misc
  }
  assume %pr8 >= 0 & %pr1 > %pr8; // Misc
}
#[]
comp %comp33[%pr0, %pr1, %pr2, %pr3]<%ev0: (%pr1-%pr0)*%pr2>(
  #[]%p0: for<%pr4:%pr2> [%ev0+%pr0*%pr4, %ev0+%pr0*%pr4+1] %pr3) -> (
  #[]%p1: for<%pr5:%pr2> [%ev0+%pr1*%pr5, %ev0+%pr1*%pr5+1] %pr3) with {
} where 
  %pr0 > 0,
  %pr1 > %pr0,
{
  assume %pr4 >= 0 & %pr2 > %pr4; // Misc
  assume %pr5 >= 0 & %pr2 > %pr5; // Misc
  assume %pr7 >= 0 & 1 > %pr7; // Misc
  assume %pr8 >= 0 & 1 > %pr8; // Misc
  for %pr6 in 0..%pr2 {
    if %pr6 == 0 {
      %p1{%pr6} = %p0{%pr6};
    } else {
      %inst0 = Register[%pr3];
      %inv0, %inv0.%p2, %inv0.%p3 = %inst0<%ev0+%pr0*%pr6, %ev0+%pr1*%pr6+1>;
      %inv0.%p3{0} = %p0{%pr6};
      assert %pr1*%pr6+1 > %pr0*%pr6+1; // EventConstraint
      %p1{%pr6} = %inv0.%p2{0};
    }
  }
  assume %pr6 >= 0 & %pr2 > %pr6; // Misc
}
#[]
comp %comp34[%pr0, %pr1, %pr2]<%ev0: %pr2>(
  #[]%p0: for<%pr3:%pr1> [%ev0, %ev0+%pr2] %pr0) -> (
  #[]%p1: for<%pr4:1> [%ev0, %ev0+%pr2] %pr0*%pr1) with {
} where 
  %pr1 > 0,
  %pr0 > 0,
  %pr2 > 0,
{
  assume %pr3 >= 0 & %pr1 > %pr3; // Misc
  assume %pr4 >= 0 & 1 > %pr4; // Misc
  assume %pr5 >= 0 & 1 > %pr5; // Misc
  assume %pr6 >= 0 & 1 > %pr6; // Misc
  assume %pr7 >= 0 & %pr1-1 > %pr7; // Misc
  assume %pr8 >= 0 & 1 > %pr8; // Misc
  assume %pr9 >= 0 & 1 > %pr9; // Misc
  if %pr1 == 1 {
    %p1{0} = %p0{0};
  } else {
    %inst0 = comp34[%pr0, %pr1-1, %pr2];
    %inv0, %inv0.%p2, %inv0.%p4 = %inst0<%ev0>;
    %inv0.%p4{0..%pr1-1} = %p0{1..%pr1};
    %inst1 = Concat[%pr0, %pr0*(%pr1-1), %pr0+%pr0*(%pr1-1)];
    %inv1, %inv1.%p3, %inv1.%p5, %inv1.%p6 = %inst1<%ev0, %ev0+%pr2>;
    %inv1.%p5{0} = %p0{0};
    %inv1.%p6{0} = %inv0.%p2{0};
    assert %pr2 > 0; // EventConstraint
    %p1{0} = %inv1.%p3{0};
  }
}
#[]
comp %comp35[%pr0, %pr1, %pr2]<%ev0: %pr2>(
  #[]%p0: for<%pr3:1> [%ev0, %ev0+%pr2] %pr0*%pr1) -> (
  #[]%p1: for<%pr4:%pr1> [%ev0, %ev0+%pr2] %pr0) with {
} where 
  %pr1 > 0,
  %pr0 > 0,
  %pr2 > 0,
{
  assume %pr3 >= 0 & 1 > %pr3; // Misc
  assume %pr4 >= 0 & %pr1 > %pr4; // Misc
  assume %pr5 >= 0 & 1 > %pr5; // Misc
  assume %pr6 >= 0 & 1 > %pr6; // Misc
  assume %pr7 >= 0 & %pr1-1 > %pr7; // Misc
  assume %pr8 >= 0 & 1 > %pr8; // Misc
  assume %pr9 >= 0 & 1 > %pr9; // Misc
  assume %pr10 >= 0 & 1 > %pr10; // Misc
  if %pr1 == 1 {
    %p1{0} = %p0{0};
  } else {
    %inst0 = Slice[%pr0*%pr1, %pr0*%pr1-1, %pr0*(%pr1-1), %pr0*%pr1-1-%pr0*(%pr1-1)+1];
    %inv0, %inv0.%p2, %inv0.%p5 = %inst0<%ev0, %ev0+%pr2>;
    %inv0.%p5{0} = %p0{0};
    assert %pr2 > 0; // EventConstraint
    %p1{0} = %inv0.%p2{0};
    %inst1 = Slice[%pr0*%pr1, %pr0*(%pr1-1)-1, 0, %pr0*(%pr1-1)-1+1];
    %inv1, %inv1.%p3, %inv1.%p6 = %inst1<%ev0, %ev0+%pr2>;
    %inv1.%p6{0} = %p0{0};
    assert %pr2 > 0; // EventConstraint
    %inst2 = comp35[%pr0, %pr1-1, %pr2];
    %inv2, %inv2.%p4, %inv2.%p7 = %inst2<%ev0>;
    %inv2.%p7{0} = %inv1.%p3{0};
    %p1{1..%pr1} = %inv2.%p4{0..%pr1-1};
  }
}
#[]
comp %comp36[%pr0, %pr1, %pr2]<%ev0: 1>(
  #[]%p0: for<%pr3:%pr2> [%ev0, %ev0+1] %pr0) -> (
  #[]%p1: for<%pr4:%pr2> [%ev0+%pr1, %ev0+%pr1+1] %pr0) with {
} where 
  %pr0 > 0,
{
  assume %pr3 >= 0 & %pr2 > %pr3; // Misc
  assume %pr4 >= 0 & %pr2 > %pr4; // Misc
  assume %pr5 >= 0 & 1 > %pr5; // Misc
  assume %pr6 >= 0 & %pr2 > %pr6; // Misc
  assume %pr7 >= 0 & %pr2 > %pr7; // Misc
  assume %pr8 >= 0 & %pr1+1 > %pr8; // Misc
  assume %pr10 >= 0 & 1 > %pr10; // Misc
  assume %pr11 >= 0 & 1 > %pr11; // Misc
  assume %pr12 >= 0 & 1 > %pr12; // Misc
  %inst0 = comp34[%pr0, %pr2, 1];
  %inv0, %inv0.%p2, %inv0.%p4 = %inst0<%ev0>;
  %inv0.%p4{0..%pr2} = %p0{0..%pr2};
  %p5 = bundle for<%pr8:%pr1+1> [%ev0+%pr8, %ev0+%pr8+1] %pr0*%pr2;
  %p5{0} = %inv0.%p2{0};
  for %pr9 in 0..%pr1 {
    %inst2 = Delay[%pr0*%pr2];
    %inv2, %inv2.%p6, %inv2.%p7 = %inst2<%ev0+%pr9>;
    %inv2.%p7{0} = %p5{%pr9};
    %p5{%pr9+1} = %inv2.%p6{0};
  }
  assume %pr9 >= 0 & %pr1 > %pr9; // Misc
  %inst1 = comp35[%pr0, %pr2, 1];
  %inv1, %inv1.%p3, %inv1.%p8 = %inst1<%ev0+%pr1>;
  %inv1.%p8{0} = %p5{%pr1};
  %p1{0..%pr2} = %inv1.%p3{0..%pr2};
}
#[]
comp %comp37[%pr0]<%ev0: 1>(
) -> (
) with {
  exists %pr1 where %pr1 > 0;
} where 
  %pr0 >= 0,
{
  if %pr0 == 0 {
    exists %pr1 = 1;
  } else {
    %inst0, %pr2 = comp37[%pr0-1];
    assume %pr2 > 0; // ExistsConstraint
    exists %pr1 = %pr2*2;
  }
}
#[toplevel]
comp main[]<%ev0: 1>(
) -> (
) with {
{
  %inst0, %pr0 = comp37[4];
  assume %pr0 > 0; // ExistsConstraint
  %inst1 = Add[%pr0, %pr0];
}
[TRACE] assumptions: Visiting component %comp0
[TRACE] assumptions: Visiting component %comp1
[TRACE] assumptions: Visiting component %comp2
[TRACE] assumptions: Visiting component %comp3
[TRACE] assumptions: Visiting component %comp4
[TRACE] assumptions: Visiting component %comp5
[TRACE] assumptions: Visiting component %comp6
[TRACE] assumptions: Visiting component %comp7
[TRACE] assumptions: Visiting component %comp8
[TRACE] assumptions: Visiting component %comp9
[TRACE] assumptions: Visiting component %comp10
[TRACE] assumptions: Visiting component %comp11
[TRACE] assumptions: Visiting component %comp12
[TRACE] assumptions: Visiting component %comp13
[TRACE] assumptions: Visiting component %comp14
[TRACE] assumptions: Visiting component %comp15
[TRACE] assumptions: Visiting component %comp16
[TRACE] assumptions: Visiting component %comp17
[TRACE] assumptions: Visiting component %comp18
[TRACE] assumptions: Visiting component %comp19
[TRACE] assumptions: Visiting component %comp20
[TRACE] assumptions: Visiting component %comp21
[TRACE] assumptions: Visiting component %comp22
[TRACE] assumptions: Visiting component %comp23
[TRACE] assumptions: Visiting component %comp24
[TRACE] assumptions: Visiting component %comp25
[TRACE] assumptions: Visiting component %comp26
[TRACE] assumptions: Visiting component %comp27
[TRACE] assumptions: Visiting component %comp28
[TRACE] assumptions: Visiting component %comp29
[TRACE] assumptions: Visiting component %comp30
[TRACE] assumptions: Visiting component %comp31
[TRACE] Transferring assumptions for instance %inst0 from comp %comp0 to %comp31
[TRACE] assumptions: Visiting component %comp32
[TRACE] Transferring assumptions for instance %inst0 from comp %comp0 to %comp32
[TRACE] assumptions: Visiting component %comp33
[TRACE] Transferring assumptions for instance %inst0 from comp %comp0 to %comp33
[TRACE] assumptions: Visiting component %comp34
[TRACE] Transferring assumptions for instance %inst0 from comp %comp34 to %comp34
[TRACE] Transferring assumptions for instance %inst1 from comp %comp21 to %comp34
[TRACE] Transferring parameter assumption %pr0 > 0 from %comp21 to %comp34
[TRACE] Transferring parameter assumption %pr1 > 0 from %comp21 to %comp34
[TRACE] Transferring parameter assumption %pr2 == %pr0+%pr1 from %comp21 to %comp34
[TRACE] assumptions: Visiting component %comp35
[TRACE] Transferring assumptions for instance %inst0 from comp %comp23 to %comp35
[TRACE] Transferring parameter assumption %pr0 > 0 from %comp23 to %comp35
[TRACE] Transferring parameter assumption %pr3 > 0 from %comp23 to %comp35
[TRACE] Transferring parameter assumption %pr0 > %pr1 from %comp23 to %comp35
[TRACE] Transferring parameter assumption %pr0 > %pr2 from %comp23 to %comp35
[TRACE] Transferring parameter assumption %pr1 >= %pr2 from %comp23 to %comp35
[TRACE] Transferring parameter assumption %pr3 == %pr1-%pr2+1 from %comp23 to %comp35
[TRACE] Transferring assumptions for instance %inst1 from comp %comp23 to %comp35
[TRACE] Transferring parameter assumption %pr0 > 0 from %comp23 to %comp35
[TRACE] Transferring parameter assumption %pr3 > 0 from %comp23 to %comp35
[TRACE] Transferring parameter assumption %pr0 > %pr1 from %comp23 to %comp35
[TRACE] Transferring parameter assumption %pr0 > %pr2 from %comp23 to %comp35
[TRACE] Transferring parameter assumption %pr1 >= %pr2 from %comp23 to %comp35
[TRACE] Transferring parameter assumption %pr3 == %pr1-%pr2+1 from %comp23 to %comp35
[TRACE] Transferring assumptions for instance %inst2 from comp %comp35 to %comp35
[TRACE] assumptions: Visiting component %comp36
[TRACE] Transferring assumptions for instance %inst0 from comp %comp34 to %comp36
[TRACE] Transferring parameter assumption %pr1 > 0 from %comp34 to %comp36
[TRACE] Transferring parameter assumption %pr0 > 0 from %comp34 to %comp36
[TRACE] Transferring parameter assumption %pr2 > 0 from %comp34 to %comp36
[TRACE] Transferring assumptions for instance %inst2 from comp %comp1 to %comp36
[TRACE] Transferring assumptions for instance %inst1 from comp %comp35 to %comp36
[TRACE] Transferring parameter assumption %pr1 > 0 from %comp35 to %comp36
[TRACE] Transferring parameter assumption %pr0 > 0 from %comp35 to %comp36
[TRACE] Transferring parameter assumption %pr2 > 0 from %comp35 to %comp36
[TRACE] assumptions: Visiting component %comp37
[TRACE] Transferring assumptions for instance %inst0 from comp %comp37 to %comp37
[TRACE] assumptions: Visiting component %comp38
[TRACE] Transferring assumptions for instance %inst0 from comp %comp37 to %comp38
[TRACE] Transferring parameter assumption %pr0 >= 0 from %comp37 to %comp38
[TRACE] Transferring existential assumption %pr1 > 0 from %comp37 to %comp38
[TRACE] Transferring assumptions for instance %inst1 from comp %comp6 to %comp38
[TRACE] Transferring parameter assumption %pr1 >= %pr0 from %comp6 to %comp38
[TRACE] Transferring parameter assumption %pr0 > 0 from %comp6 to %comp38
[TRACE] Transferring parameter assumption %pr1 > 0 from %comp6 to %comp38
[INFO ] assumptions: 1ms
#[]
ext comp Register[%pr0]<%ev0: |%ev1 - %ev0+1|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev0+1] %pr0) -> (
  #[]%p1: for<%pr2:1> [%ev0+1, %ev1] %pr0) with {
} where 
  %ev1 > %ev0+1,
{
  assume %ev1 > %ev0+1; // Misc
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
}
#[]
ext comp Delay[%pr0]<%ev0: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev0+1] %pr0) -> (
  #[]%p1: for<%pr2:1> [%ev0+1, %ev0+2] %pr0) with {
{
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
}
#[]
ext comp PassThroughRegister[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev0+1] %pr0) -> (
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) with {
} where 
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
}
#[]
ext comp Prev[%pr0, %pr1]<%ev0: 1>(
  #[]%p0: for<%pr2:1> [%ev0, %ev0+1] %pr0) -> (
  #[]%p1: for<%pr3:1> [%ev0, %ev0+1] %pr0) with {
{
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp ContPrev[%pr0, %pr1]<%ev0: 1>(
  #[]%p0: for<%pr2:1> [%ev0, %ev0+1] %pr0) -> (
  #[]%p1: for<%pr3:1> [%ev0, %ev0+1] %pr0) with {
{
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Const[%pr0, %pr1]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
) -> (
  #[]%p0: for<%pr2:1> [%ev0, %ev1] %pr0) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
}
#[]
ext comp Add[%pr0, %pr1]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr2:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr3:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr4:1> [%ev0, %ev1] %pr1) with {
} where 
  %pr1 >= %pr0,
  %pr0 > 0,
  %pr1 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr1 >= %pr0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 > 0; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
  assume %pr4 >= 0 & 1 > %pr4; // Misc
}
#[]
ext comp Sub[%pr0, %pr1]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr2:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr3:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr4:1> [%ev0, %ev1] %pr1) with {
} where 
  %pr1 >= %pr0,
  %pr0 > 0,
  %pr1 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr1 >= %pr0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 > 0; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
  assume %pr4 >= 0 & 1 > %pr4; // Misc
}
#[]
ext comp MultComb[%pr0, %pr1]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr2:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr3:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr4:1> [%ev0, %ev1] %pr1) with {
} where 
  %pr1 >= %pr0,
  %pr0 > 0,
  %pr1 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr1 >= %pr0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 > 0; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
  assume %pr4 >= 0 & 1 > %pr4; // Misc
}
#[]
ext comp And[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] %pr0) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Or[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] %pr0) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Xor[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] %pr0) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Not[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0) -> (
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
}
#[]
ext comp Eq[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] 1) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Neq[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] 1) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Gt[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] 1) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Lt[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] 1) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Lte[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] 1) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Gte[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] 1) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp SignExtend[%pr0, %pr1]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p1: for<%pr3:1> [%ev0, %ev1] %pr1) with {
} where 
  %pr0 > 0,
  %pr1 > 0,
  %pr1 >= %pr0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 > 0; // Misc
  assume %pr1 >= %pr0; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp ZeroExtend[%pr0, %pr1]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p1: for<%pr3:1> [%ev0, %ev1] %pr1) with {
} where 
  %pr0 > 0,
  %pr1 > 0,
  %pr1 >= %pr0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 > 0; // Misc
  assume %pr1 >= %pr0; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Concat[%pr0, %pr1, %pr2]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr3:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr4:1> [%ev0, %ev1] %pr1) -> (
  #[]%p2: for<%pr5:1> [%ev0, %ev1] %pr2) with {
} where 
  %pr0 > 0,
  %pr1 > 0,
  %pr2 == %pr0+%pr1,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 > 0; // Misc
  assume %pr2 == %pr0+%pr1; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
  assume %pr4 >= 0 & 1 > %pr4; // Misc
  assume %pr5 >= 0 & 1 > %pr5; // Misc
}
#[]
ext comp Select[%pr0, %pr1]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p1: for<%pr3:1> [%ev0, %ev1] 1) with {
} where 
  %pr0 > 0,
  %pr0 > %pr1,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr0 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Slice[%pr0, %pr1, %pr2, %pr3]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr4:1> [%ev0, %ev1] %pr0) -> (
  #[]%p1: for<%pr5:1> [%ev0, %ev1] %pr3) with {
} where 
  %pr0 > 0,
  %pr3 > 0,
  %pr0 > %pr1,
  %pr0 > %pr2,
  %pr1 >= %pr2,
  %pr3 == %pr1-%pr2+1,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr3 > 0; // Misc
  assume %pr0 > %pr1; // Misc
  assume %pr0 > %pr2; // Misc
  assume %pr1 >= %pr2; // Misc
  assume %pr3 == %pr1-%pr2+1; // Misc
  assume %pr4 >= 0 & 1 > %pr4; // Misc
  assume %pr5 >= 0 & 1 > %pr5; // Misc
}
#[]
ext comp ReduceAnd[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0) -> (
  #[]%p1: for<%pr2:1> [%ev0, %ev1] 1) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
}
#[]
ext comp ReduceOr[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0) -> (
  #[]%p1: for<%pr2:1> [%ev0, %ev1] 1) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
}
#[]
ext comp ShiftLeft[%pr0, %pr1, %pr2]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr3:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr4:1> [%ev0, %ev1] %pr1) -> (
  #[]%p2: for<%pr5:1> [%ev0, %ev1] %pr2) with {
} where 
  %pr0 > 0,
  %pr1 > 0,
  %pr2 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 > 0; // Misc
  assume %pr2 > 0; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
  assume %pr4 >= 0 & 1 > %pr4; // Misc
  assume %pr5 >= 0 & 1 > %pr5; // Misc
}
#[]
ext comp ShiftRight[%pr0, %pr1, %pr2]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr3:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr4:1> [%ev0, %ev1] %pr1) -> (
  #[]%p2: for<%pr5:1> [%ev0, %ev1] %pr2) with {
} where 
  %pr0 > 0,
  %pr1 > 0,
  %pr2 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 > 0; // Misc
  assume %pr2 > 0; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
  assume %pr4 >= 0 & 1 > %pr4; // Misc
  assume %pr5 >= 0 & 1 > %pr5; // Misc
}
#[]
ext comp ArithShiftRight[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] %pr0,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p2: for<%pr3:1> [%ev0, %ev1] %pr0) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
ext comp Mux[%pr0]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr1:1> [%ev0, %ev1] 1,
  #[]%p1: for<%pr2:1> [%ev0, %ev1] %pr0,
  #[]%p2: for<%pr3:1> [%ev0, %ev1] %pr0) -> (
  #[]%p3: for<%pr4:1> [%ev0, %ev1] %pr0) with {
} where 
  %pr0 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 >= 0 & 1 > %pr1; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
  assume %pr4 >= 0 & 1 > %pr4; // Misc
}
#[]
ext comp Extend[%pr0, %pr1]<%ev0: |%ev1 - %ev0|, %ev1: 1>(
  #[]%p0: for<%pr2:1> [%ev0, %ev1] %pr0) -> (
  #[]%p1: for<%pr3:1> [%ev0, %ev1] %pr1) with {
} where 
  %pr0 > 0,
  %pr1 > 0,
  %ev1 > %ev0,
{
  assume %ev1 > %ev0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr1 > 0; // Misc
  assume %pr2 >= 0 & 1 > %pr2; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
}
#[]
comp %comp31[%pr0, %pr1, %pr2, %pr3, %pr4]<%ev0: %pr3*(%pr1-1)+%pr4>(
  #[]%p0: for<%pr5:%pr1*%pr2> [%ev0, %ev0+%pr4] %pr0) -> (
  #[]%p1: for<%pr6:%pr1, %pr7:%pr2> [%ev0+%pr3*%pr6, %ev0+%pr3*%pr6+%pr4] %pr0) with {
} where 
  %pr1 > 0,
  %pr2 > 0,
  %pr3 > 0,
  %pr4 > 0,
{
  assume %pr1 > 0; // Misc
  assume %pr2 > 0; // Misc
  assume %pr3 > 0; // Misc
  assume %pr4 > 0; // Misc
  assume %pr5 >= 0 & %pr1*%pr2 > %pr5; // Misc
  assume %pr6 >= 0 & %pr1 > %pr6; // Misc
  assume %pr7 >= 0 & %pr2 > %pr7; // Misc
  assume %pr11 >= 0 & 1 > %pr11; // Misc
  assume %pr12 >= 0 & 1 > %pr12; // Misc
  for %pr8 in 0..%pr1 {
    for %pr9 in 0..%pr2 {
      let %pr10 = %pr2*%pr8+%pr9
      if %pr8 > 0 {
        %inst0 = Register[%pr0];
        %inv0, %inv0.%p2, %inv0.%p3 = %inst0<%ev0, %ev0+%pr3*%pr8+%pr4>;
        %inv0.%p3{0} = %p0{%pr10};
        assert %pr3*%pr8+%pr4 > 1; // EventConstraint
        %p1{%pr8}{%pr9} = %inv0.%p2{0};
      } else {
        %p1{%pr8}{%pr9} = %p0{%pr10};
      }
    }
    assume %pr9 >= 0 & %pr2 > %pr9; // Misc
  }
  assume %pr8 >= 0 & %pr1 > %pr8; // Misc
}
#[]
comp %comp32[%pr0, %pr1, %pr2, %pr3, %pr4]<%ev0: (%pr3*(%pr1-1)+%pr4)-1>(
  #[]%p0: for<%pr5:%pr1, %pr6:%pr2> [%ev0+%pr3*%pr5, %ev0+%pr3*%pr5+%pr4] %pr0) -> (
  #[]%p1: for<%pr7:%pr1*%pr2> [%ev0+%pr3*(%pr1-1), %ev0+%pr3*(%pr1-1)+%pr4] %pr0) with {
} where 
  %pr1 > 1,
  %pr2 > 0,
  %pr3 > 0,
  %pr4 > 0,
{
  assume %pr1 > 1; // Misc
  assume %pr2 > 0; // Misc
  assume %pr3 > 0; // Misc
  assume %pr4 > 0; // Misc
  assume %pr5 >= 0 & %pr1 > %pr5; // Misc
  assume %pr6 >= 0 & %pr2 > %pr6; // Misc
  assume %pr7 >= 0 & %pr1*%pr2 > %pr7; // Misc
  assume %pr11 >= 0 & 1 > %pr11; // Misc
  assume %pr12 >= 0 & 1 > %pr12; // Misc
  for %pr8 in 0..%pr1 {
    for %pr9 in 0..%pr2 {
      let %pr10 = %pr2*%pr8+%pr9
      if %pr1-1 > %pr8 {
        %inst0 = Register[%pr0];
        %inv0, %inv0.%p2, %inv0.%p3 = %inst0<%ev0+%pr3*%pr8, %ev0+%pr3*(%pr1-1)+%pr4>;
        %inv0.%p3{0} = %p0{%pr8}{%pr9};
        assert %pr3*(%pr1-1)+%pr4 > %pr3*%pr8+1; // EventConstraint
        %p1{%pr10} = %inv0.%p2{0};
      } else {
        %p1{%pr10} = %p0{%pr8}{%pr9};
      }
    }
    assume %pr9 >= 0 & %pr2 > %pr9; // Misc
  }
  assume %pr8 >= 0 & %pr1 > %pr8; // Misc
}
#[]
comp %comp33[%pr0, %pr1, %pr2, %pr3]<%ev0: (%pr1-%pr0)*%pr2>(
  #[]%p0: for<%pr4:%pr2> [%ev0+%pr0*%pr4, %ev0+%pr0*%pr4+1] %pr3) -> (
  #[]%p1: for<%pr5:%pr2> [%ev0+%pr1*%pr5, %ev0+%pr1*%pr5+1] %pr3) with {
} where 
  %pr0 > 0,
  %pr1 > %pr0,
{
  assume %pr0 > 0; // Misc
  assume %pr1 > %pr0; // Misc
  assume %pr4 >= 0 & %pr2 > %pr4; // Misc
  assume %pr5 >= 0 & %pr2 > %pr5; // Misc
  assume %pr7 >= 0 & 1 > %pr7; // Misc
  assume %pr8 >= 0 & 1 > %pr8; // Misc
  for %pr6 in 0..%pr2 {
    if %pr6 == 0 {
      %p1{%pr6} = %p0{%pr6};
    } else {
      %inst0 = Register[%pr3];
      %inv0, %inv0.%p2, %inv0.%p3 = %inst0<%ev0+%pr0*%pr6, %ev0+%pr1*%pr6+1>;
      %inv0.%p3{0} = %p0{%pr6};
      assert %pr1*%pr6+1 > %pr0*%pr6+1; // EventConstraint
      %p1{%pr6} = %inv0.%p2{0};
    }
  }
  assume %pr6 >= 0 & %pr2 > %pr6; // Misc
}
#[]
comp %comp34[%pr0, %pr1, %pr2]<%ev0: %pr2>(
  #[]%p0: for<%pr3:%pr1> [%ev0, %ev0+%pr2] %pr0) -> (
  #[]%p1: for<%pr4:1> [%ev0, %ev0+%pr2] %pr0*%pr1) with {
} where 
  %pr1 > 0,
  %pr0 > 0,
  %pr2 > 0,
{
  assume %pr1 > 0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr2 > 0; // Misc
  assume %pr3 >= 0 & %pr1 > %pr3; // Misc
  assume %pr4 >= 0 & 1 > %pr4; // Misc
  assume %pr5 >= 0 & 1 > %pr5; // Misc
  assume %pr6 >= 0 & 1 > %pr6; // Misc
  assume %pr7 >= 0 & %pr1-1 > %pr7; // Misc
  assume %pr8 >= 0 & 1 > %pr8; // Misc
  assume %pr9 >= 0 & 1 > %pr9; // Misc
  if %pr1 == 1 {
    %p1{0} = %p0{0};
  } else {
    %inst0 = comp34[%pr0, %pr1-1, %pr2];
    %inv0, %inv0.%p2, %inv0.%p4 = %inst0<%ev0>;
    %inv0.%p4{0..%pr1-1} = %p0{1..%pr1};
    assert %pr0 > 0; // ParamConstraint
    assert %pr0*(%pr1-1) > 0; // ParamConstraint
    assert %pr0+%pr0*(%pr1-1) == %pr0+%pr0*(%pr1-1); // ParamConstraint
    %inst1 = Concat[%pr0, %pr0*(%pr1-1), %pr0+%pr0*(%pr1-1)];
    %inv1, %inv1.%p3, %inv1.%p5, %inv1.%p6 = %inst1<%ev0, %ev0+%pr2>;
    %inv1.%p5{0} = %p0{0};
    %inv1.%p6{0} = %inv0.%p2{0};
    assert %pr2 > 0; // EventConstraint
    %p1{0} = %inv1.%p3{0};
  }
}
#[]
comp %comp35[%pr0, %pr1, %pr2]<%ev0: %pr2>(
  #[]%p0: for<%pr3:1> [%ev0, %ev0+%pr2] %pr0*%pr1) -> (
  #[]%p1: for<%pr4:%pr1> [%ev0, %ev0+%pr2] %pr0) with {
} where 
  %pr1 > 0,
  %pr0 > 0,
  %pr2 > 0,
{
  assume %pr1 > 0; // Misc
  assume %pr0 > 0; // Misc
  assume %pr2 > 0; // Misc
  assume %pr3 >= 0 & 1 > %pr3; // Misc
  assume %pr4 >= 0 & %pr1 > %pr4; // Misc
  assume %pr5 >= 0 & 1 > %pr5; // Misc
  assume %pr6 >= 0 & 1 > %pr6; // Misc
  assume %pr7 >= 0 & %pr1-1 > %pr7; // Misc
  assume %pr8 >= 0 & 1 > %pr8; // Misc
  assume %pr9 >= 0 & 1 > %pr9; // Misc
  assume %pr10 >= 0 & 1 > %pr10; // Misc
  if %pr1 == 1 {
    %p1{0} = %p0{0};
  } else {
    assert %pr0*%pr1 > 0; // ParamConstraint
    assert %pr0*%pr1-1-%pr0*(%pr1-1)+1 > 0; // ParamConstraint
    assert %pr0*%pr1 > %pr0*%pr1-1; // ParamConstraint
    assert %pr0*%pr1 > %pr0*(%pr1-1); // ParamConstraint
    assert %pr0*%pr1-1 >= %pr0*(%pr1-1); // ParamConstraint
    assert %pr0*%pr1-1-%pr0*(%pr1-1)+1 == %pr0*%pr1-1-%pr0*(%pr1-1)+1; // ParamConstraint
    %inst0 = Slice[%pr0*%pr1, %pr0*%pr1-1, %pr0*(%pr1-1), %pr0*%pr1-1-%pr0*(%pr1-1)+1];
    %inv0, %inv0.%p2, %inv0.%p5 = %inst0<%ev0, %ev0+%pr2>;
    %inv0.%p5{0} = %p0{0};
    assert %pr2 > 0; // EventConstraint
    %p1{0} = %inv0.%p2{0};
    assert %pr0*%pr1 > 0; // ParamConstraint
    assert %pr0*(%pr1-1)-1+1 > 0; // ParamConstraint
    assert %pr0*%pr1 > %pr0*(%pr1-1)-1; // ParamConstraint
    assert %pr0*%pr1 > 0; // ParamConstraint
    assert %pr0*(%pr1-1)-1 >= 0; // ParamConstraint
    assert %pr0*(%pr1-1)-1+1 == %pr0*(%pr1-1)-1+1; // ParamConstraint
    %inst1 = Slice[%pr0*%pr1, %pr0*(%pr1-1)-1, 0, %pr0*(%pr1-1)-1+1];
    %inv1, %inv1.%p3, %inv1.%p6 = %inst1<%ev0, %ev0+%pr2>;
    %inv1.%p6{0} = %p0{0};
    assert %pr2 > 0; // EventConstraint
    %inst2 = comp35[%pr0, %pr1-1, %pr2];
    %inv2, %inv2.%p4, %inv2.%p7 = %inst2<%ev0>;
    %inv2.%p7{0} = %inv1.%p3{0};
    %p1{1..%pr1} = %inv2.%p4{0..%pr1-1};
  }
}
#[]
comp %comp36[%pr0, %pr1, %pr2]<%ev0: 1>(
  #[]%p0: for<%pr3:%pr2> [%ev0, %ev0+1] %pr0) -> (
  #[]%p1: for<%pr4:%pr2> [%ev0+%pr1, %ev0+%pr1+1] %pr0) with {
} where 
  %pr0 > 0,
{
  assume %pr0 > 0; // Misc
  assume %pr3 >= 0 & %pr2 > %pr3; // Misc
  assume %pr4 >= 0 & %pr2 > %pr4; // Misc
  assume %pr5 >= 0 & 1 > %pr5; // Misc
  assume %pr6 >= 0 & %pr2 > %pr6; // Misc
  assume %pr7 >= 0 & %pr2 > %pr7; // Misc
  assume %pr8 >= 0 & %pr1+1 > %pr8; // Misc
  assume %pr10 >= 0 & 1 > %pr10; // Misc
  assume %pr11 >= 0 & 1 > %pr11; // Misc
  assume %pr12 >= 0 & 1 > %pr12; // Misc
  assert %pr2 > 0; // ParamConstraint
  assert %pr0 > 0; // ParamConstraint
  %inst0 = comp34[%pr0, %pr2, 1];
  %inv0, %inv0.%p2, %inv0.%p4 = %inst0<%ev0>;
  %inv0.%p4{0..%pr2} = %p0{0..%pr2};
  %p5 = bundle for<%pr8:%pr1+1> [%ev0+%pr8, %ev0+%pr8+1] %pr0*%pr2;
  %p5{0} = %inv0.%p2{0};
  for %pr9 in 0..%pr1 {
    %inst2 = Delay[%pr0*%pr2];
    %inv2, %inv2.%p6, %inv2.%p7 = %inst2<%ev0+%pr9>;
    %inv2.%p7{0} = %p5{%pr9};
    %p5{%pr9+1} = %inv2.%p6{0};
  }
  assume %pr9 >= 0 & %pr1 > %pr9; // Misc
  assert %pr2 > 0; // ParamConstraint
  assert %pr0 > 0; // ParamConstraint
  %inst1 = comp35[%pr0, %pr2, 1];
  %inv1, %inv1.%p3, %inv1.%p8 = %inst1<%ev0+%pr1>;
  %inv1.%p8{0} = %p5{%pr1};
  %p1{0..%pr2} = %inv1.%p3{0..%pr2};
}
#[]
comp %comp37[%pr0]<%ev0: 1>(
) -> (
) with {
  exists %pr1 where %pr1 > 0;
} where 
  %pr0 >= 0,
{
  assume %pr0 >= 0; // Misc
  if %pr0 == 0 {
    exists %pr1 = 1;
  } else {
    %inst0, %pr2 = comp37[%pr0-1];
    assume %pr2 > 0; // ExistsConstraint
    exists %pr1 = %pr2*2;
  }
}
#[toplevel]
comp main[]<%ev0: 1>(
) -> (
) with {
{
  assume %pr0 > 0; // ExistsConstraint
  %inst0, %pr0 = comp37[4];
  assume %pr0 > 0; // ExistsConstraint
  assert %pr0 >= %pr0; // ParamConstraint
  assert %pr0 > 0; // ParamConstraint
  assert %pr0 > 0; // ParamConstraint
  %inst1 = Add[%pr0, %pr0];
}
[TRACE] build-domination: Visiting component %comp0
[TRACE] build-domination: Visiting component %comp1
[TRACE] build-domination: Visiting component %comp2
[TRACE] build-domination: Visiting component %comp3
[TRACE] build-domination: Visiting component %comp4
[TRACE] build-domination: Visiting component %comp5
[TRACE] build-domination: Visiting component %comp6
[TRACE] build-domination: Visiting component %comp7
[TRACE] build-domination: Visiting component %comp8
[TRACE] build-domination: Visiting component %comp9
[TRACE] build-domination: Visiting component %comp10
[TRACE] build-domination: Visiting component %comp11
[TRACE] build-domination: Visiting component %comp12
[TRACE] build-domination: Visiting component %comp13
[TRACE] build-domination: Visiting component %comp14
[TRACE] build-domination: Visiting component %comp15
[TRACE] build-domination: Visiting component %comp16
[TRACE] build-domination: Visiting component %comp17
[TRACE] build-domination: Visiting component %comp18
[TRACE] build-domination: Visiting component %comp19
[TRACE] build-domination: Visiting component %comp20
[TRACE] build-domination: Visiting component %comp21
[TRACE] build-domination: Visiting component %comp22
[TRACE] build-domination: Visiting component %comp23
[TRACE] build-domination: Visiting component %comp24
[TRACE] build-domination: Visiting component %comp25
[TRACE] build-domination: Visiting component %comp26
[TRACE] build-domination: Visiting component %comp27
[TRACE] build-domination: Visiting component %comp28
[TRACE] build-domination: Visiting component %comp29
[TRACE] build-domination: Visiting component %comp30
[TRACE] build-domination: Visiting component %comp31
[TRACE] param %pr0 is used by %inst0
[TRACE] let-bound param %pr10
[TRACE] param %pr2 is used by %pr10
[TRACE] param %pr8 is used by %pr10
[TRACE] param %pr9 is used by %pr10
[TRACE] build-domination: Visiting component %comp32
[TRACE] param %pr0 is used by %inst0
[TRACE] let-bound param %pr10
[TRACE] param %pr2 is used by %pr10
[TRACE] param %pr8 is used by %pr10
[TRACE] param %pr9 is used by %pr10
[TRACE] build-domination: Visiting component %comp33
[TRACE] param %pr3 is used by %inst0
[TRACE] build-domination: Visiting component %comp34
[TRACE] param %pr0 is used by %inst0
[TRACE] param %pr1 is used by %inst0
[TRACE] param %pr2 is used by %inst0
[TRACE] param %pr0 is used by %inst1
[TRACE] param %pr0 is used by %inst1
[TRACE] param %pr1 is used by %inst1
[TRACE] param %pr0 is used by %inst1
[TRACE] param %pr0 is used by %inst1
[TRACE] param %pr1 is used by %inst1
[TRACE] build-domination: Visiting component %comp35
[TRACE] param %pr0 is used by %inst0
[TRACE] param %pr1 is used by %inst0
[TRACE] param %pr0 is used by %inst0
[TRACE] param %pr1 is used by %inst0
[TRACE] param %pr0 is used by %inst0
[TRACE] param %pr1 is used by %inst0
[TRACE] param %pr0 is used by %inst0
[TRACE] param %pr1 is used by %inst0
[TRACE] param %pr0 is used by %inst0
[TRACE] param %pr1 is used by %inst0
[TRACE] param %pr0 is used by %inst1
[TRACE] param %pr1 is used by %inst1
[TRACE] param %pr0 is used by %inst1
[TRACE] param %pr1 is used by %inst1
[TRACE] param %pr0 is used by %inst1
[TRACE] param %pr1 is used by %inst1
[TRACE] param %pr0 is used by %inst2
[TRACE] param %pr1 is used by %inst2
[TRACE] param %pr2 is used by %inst2
[TRACE] build-domination: Visiting component %comp36
[TRACE] param %pr0 is used by %inst2
[TRACE] param %pr2 is used by %inst2
[TRACE] param %pr0 is used by %inst0
[TRACE] param %pr2 is used by %inst0
[TRACE] param %pr0 is used by %inst1
[TRACE] param %pr2 is used by %inst1
[TRACE] build-domination: Visiting component %comp37
[TRACE] param %pr2 is owned by %inst0
[TRACE] param %pr0 is used by %inst0
[TRACE] build-domination: Visiting component %comp38
[TRACE] param %pr0 is owned by %inst0
[TRACE] param %pr0 is used by %inst1
[TRACE] param %pr0 is used by %inst1
[INFO ] build-domination: 0ms
[TRACE] type-check: Visiting component %comp0
[TRACE] type-check: Visiting component %comp1
[TRACE] type-check: Visiting component %comp2
[TRACE] type-check: Visiting component %comp3
[TRACE] type-check: Visiting component %comp4
[TRACE] type-check: Visiting component %comp5
[TRACE] type-check: Visiting component %comp6
[TRACE] type-check: Visiting component %comp7
[TRACE] type-check: Visiting component %comp8
[TRACE] type-check: Visiting component %comp9
[TRACE] type-check: Visiting component %comp10
[TRACE] type-check: Visiting component %comp11
[TRACE] type-check: Visiting component %comp12
[TRACE] type-check: Visiting component %comp13
[TRACE] type-check: Visiting component %comp14
[TRACE] type-check: Visiting component %comp15
[TRACE] type-check: Visiting component %comp16
[TRACE] type-check: Visiting component %comp17
[TRACE] type-check: Visiting component %comp18
[TRACE] type-check: Visiting component %comp19
[TRACE] type-check: Visiting component %comp20
[TRACE] type-check: Visiting component %comp21
[TRACE] type-check: Visiting component %comp22
[TRACE] type-check: Visiting component %comp23
[TRACE] type-check: Visiting component %comp24
[TRACE] type-check: Visiting component %comp25
[TRACE] type-check: Visiting component %comp26
[TRACE] type-check: Visiting component %comp27
[TRACE] type-check: Visiting component %comp28
[TRACE] type-check: Visiting component %comp29
[TRACE] type-check: Visiting component %comp30
[TRACE] type-check: Visiting component %comp31
[TRACE] type-check: Visiting component %comp32
[TRACE] type-check: Visiting component %comp33
[TRACE] type-check: Visiting component %comp34
[TRACE] type-check: Visiting component %comp35
[TRACE] type-check: Visiting component %comp36
[TRACE] type-check: Visiting component %comp37
[TRACE] type-check: Visiting component %comp38
[INFO ] type-check: 1ms
[TRACE] interval-check: Visiting component %comp0
[TRACE] interval-check: Visiting component %comp1
[TRACE] interval-check: Visiting component %comp2
[TRACE] interval-check: Visiting component %comp3
[TRACE] interval-check: Visiting component %comp4
[TRACE] interval-check: Visiting component %comp5
[TRACE] interval-check: Visiting component %comp6
[TRACE] interval-check: Visiting component %comp7
[TRACE] interval-check: Visiting component %comp8
[TRACE] interval-check: Visiting component %comp9
[TRACE] interval-check: Visiting component %comp10
[TRACE] interval-check: Visiting component %comp11
[TRACE] interval-check: Visiting component %comp12
[TRACE] interval-check: Visiting component %comp13
[TRACE] interval-check: Visiting component %comp14
[TRACE] interval-check: Visiting component %comp15
[TRACE] interval-check: Visiting component %comp16
[TRACE] interval-check: Visiting component %comp17
[TRACE] interval-check: Visiting component %comp18
[TRACE] interval-check: Visiting component %comp19
[TRACE] interval-check: Visiting component %comp20
[TRACE] interval-check: Visiting component %comp21
[TRACE] interval-check: Visiting component %comp22
[TRACE] interval-check: Visiting component %comp23
[TRACE] interval-check: Visiting component %comp24
[TRACE] interval-check: Visiting component %comp25
[TRACE] interval-check: Visiting component %comp26
[TRACE] interval-check: Visiting component %comp27
[TRACE] interval-check: Visiting component %comp28
[TRACE] interval-check: Visiting component %comp29
[TRACE] interval-check: Visiting component %comp30
[TRACE] interval-check: Visiting component %comp31
[TRACE] interval-check: Visiting component %comp32
[TRACE] interval-check: Visiting component %comp33
[TRACE] interval-check: Visiting component %comp34
[TRACE] interval-check: Visiting component %comp35
[TRACE] interval-check: Visiting component %comp36
[TRACE] interval-check: Visiting component %comp37
[TRACE] interval-check: Visiting component %comp38
[INFO ] interval-check: 2ms
[TRACE] phantom-check: Visiting component %comp0
[TRACE] phantom-check: Visiting component %comp1
[TRACE] phantom-check: Visiting component %comp2
[TRACE] phantom-check: Visiting component %comp3
[TRACE] phantom-check: Visiting component %comp4
[TRACE] phantom-check: Visiting component %comp5
[TRACE] phantom-check: Visiting component %comp6
[TRACE] phantom-check: Visiting component %comp7
[TRACE] phantom-check: Visiting component %comp8
[TRACE] phantom-check: Visiting component %comp9
[TRACE] phantom-check: Visiting component %comp10
[TRACE] phantom-check: Visiting component %comp11
[TRACE] phantom-check: Visiting component %comp12
[TRACE] phantom-check: Visiting component %comp13
[TRACE] phantom-check: Visiting component %comp14
[TRACE] phantom-check: Visiting component %comp15
[TRACE] phantom-check: Visiting component %comp16
[TRACE] phantom-check: Visiting component %comp17
[TRACE] phantom-check: Visiting component %comp18
[TRACE] phantom-check: Visiting component %comp19
[TRACE] phantom-check: Visiting component %comp20
[TRACE] phantom-check: Visiting component %comp21
[TRACE] phantom-check: Visiting component %comp22
[TRACE] phantom-check: Visiting component %comp23
[TRACE] phantom-check: Visiting component %comp24
[TRACE] phantom-check: Visiting component %comp25
[TRACE] phantom-check: Visiting component %comp26
[TRACE] phantom-check: Visiting component %comp27
[TRACE] phantom-check: Visiting component %comp28
[TRACE] phantom-check: Visiting component %comp29
[TRACE] phantom-check: Visiting component %comp30
[TRACE] phantom-check: Visiting component %comp31
[TRACE] phantom-check: Visiting component %comp32
[TRACE] phantom-check: Visiting component %comp33
[TRACE] phantom-check: Visiting component %comp34
[TRACE] phantom-check: Visiting component %comp35
[TRACE] phantom-check: Visiting component %comp36
[TRACE] phantom-check: Visiting component %comp37
[TRACE] phantom-check: Visiting component %comp38
[INFO ] phantom-check: 0ms
[TRACE] fun-assumptions: Visiting component %comp0
[TRACE] fun-assumptions: Visiting component %comp1
[TRACE] fun-assumptions: Visiting component %comp2
[TRACE] fun-assumptions: Visiting component %comp3
[TRACE] fun-assumptions: Visiting component %comp4
[TRACE] fun-assumptions: Visiting component %comp5
[TRACE] fun-assumptions: Visiting component %comp6
[TRACE] fun-assumptions: Visiting component %comp7
[TRACE] fun-assumptions: Visiting component %comp8
[TRACE] fun-assumptions: Visiting component %comp9
[TRACE] fun-assumptions: Visiting component %comp10
[TRACE] fun-assumptions: Visiting component %comp11
[TRACE] fun-assumptions: Visiting component %comp12
[TRACE] fun-assumptions: Visiting component %comp13
[TRACE] fun-assumptions: Visiting component %comp14
[TRACE] fun-assumptions: Visiting component %comp15
[TRACE] fun-assumptions: Visiting component %comp16
[TRACE] fun-assumptions: Visiting component %comp17
[TRACE] fun-assumptions: Visiting component %comp18
[TRACE] fun-assumptions: Visiting component %comp19
[TRACE] fun-assumptions: Visiting component %comp20
[TRACE] fun-assumptions: Visiting component %comp21
[TRACE] fun-assumptions: Visiting component %comp22
[TRACE] fun-assumptions: Visiting component %comp23
[TRACE] fun-assumptions: Visiting component %comp24
[TRACE] fun-assumptions: Visiting component %comp25
[TRACE] fun-assumptions: Visiting component %comp26
[TRACE] fun-assumptions: Visiting component %comp27
[TRACE] fun-assumptions: Visiting component %comp28
[TRACE] fun-assumptions: Visiting component %comp29
[TRACE] fun-assumptions: Visiting component %comp30
[TRACE] fun-assumptions: Visiting component %comp31
[TRACE] fun-assumptions: Visiting component %comp32
[TRACE] fun-assumptions: Visiting component %comp33
[TRACE] fun-assumptions: Visiting component %comp34
[TRACE] fun-assumptions: Visiting component %comp35
[TRACE] fun-assumptions: Visiting component %comp36
[TRACE] fun-assumptions: Visiting component %comp37
[TRACE] fun-assumptions: Visiting component %comp38
[INFO ] fun-assumptions: 0ms
