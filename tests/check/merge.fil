import "primitives/core.fil";

extern "dummy.sv" {
  // Merge two signals with disjoint lifetimes to generate a new signal available
  // for the union of their lifetimes
  // Implemented using a temporal mux that switches from signal `in1` to `in2`
  // on event L.
  // The signals `in1` and `in2` might exist for more their specified lifetime
  // in this function's signature but that is okay because inputs only require
  // signals to be active for at least as long as the requirement
  comp Merge<G: E-(G), L: E-(L), E: 1>(
    @interface[G] go_G: 1,
    @interface[L] go_L: 1,
    @[G, L] in1: 32,
    @[L, E] in2: 32,
  ) -> (
    @[G, E] out: 32,
  ) where L > G, E > L, E > G;
}

// The comp produces an output signal that lives for three cycles immediately
// starting the cycle that `in` is given.
// We use a merge unit to forward the input signal in the first cycle and
// Register the output to make it available for the remaining cycles.
comp main<G: 3>(
  @interface[G] go_G: 1,
  @[G, G+1] in: 32
) -> (
  @[G, G+3] out: 32
) {
  L := new Register[32];
  M := new Merge;

  // Intentially make the Register exist longer than needed.
  l0 := L<G, G+4>(in);
  m0 := M<G, G+1, G+3>(in, l0.out);

  out = m0.out;
}
