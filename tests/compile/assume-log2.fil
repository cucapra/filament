import "primitives/core.fil";

// A Shift register that waits 2^#N cycles.
comp ShiftExp[#W, #N, #K]<G:#K>(
    @interface[G] go: 1,
    @[G, G+1] in: #W
) -> (
    @[G+#K, G+#K+1] out: #W
) where #W > 1,
        #N >= 0,
        log2(#K) == #N,
        #K >= 1
{
    if #N == 0 {
        d := new Delay[#W]<G>(in);
        out = d.out;
    } else {
        shift := new ShiftExp[#W, #N-1, #K/2];
        first := shift<G>(in);
        second := shift<G+#K/2>(first.out);
        out = second.out;
    }
}

comp main<G:16>(
    @interface[G] go: 1,
    @[G, G+1] in: 32,
) -> (
    @[G+16, G+17] out: 32
) {
    reduce := new ShiftExp[32, 4, 16]<G>(in);
    out = reduce.out;
}