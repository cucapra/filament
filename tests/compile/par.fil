import "primitives/core.fil";
import "primitives/sequential.fil";

comp FastMult<G: 1>(
  @interface[G] go_G: 1,
  @[G, G+1] left: 32,
  @[G, G+1] right: 32,
) -> (
  @[G+1, G+2] out: 32,
) {
  cm := new MultComb[32]<G>(left, right);
  l := new Register[32]<G, G+2>(cm.out);
  out = l.out;
}

comp main<G: 2>(
  @interface[G] go_G: 1,
  @[G, G+1] a: 32,
  @[G, G+1] b: 32,
) -> (
  @[G+2, G+3] out: 32
) {
  // Execute the Fast and Slow mutlipliers in parallel and add their results

  // Registeres to save the value of the input signals
  sm0 := new Mult<G>(a, b);

  la := new Register[32]<G, G+2>(a);
  lb := new Register[32]<G, G+2>(b);
  fm0 := new FastMult<G+1>(la.out, lb.out);

  a0 := new Add[32]<G+2>(sm0.out, fm0.out);
  out = a0.out;
}
