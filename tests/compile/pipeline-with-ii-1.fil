import "primitives/core.fil";

/// Implementation of a multiplier with initiation interval 1 and latency 3
comp main<G: 1>(
  @interface[G] go_G: 1,
  @[G, G+1] left: 32,
  @[G, G+1] right: 32,
) -> (
  @[G+3, G+4] out: 32,
) {
  // First stage, register the inputs
  l := new Register[32]<G, G+2>(left);
  r := new Register[32]<G, G+2>(right);

  // Second stage, perform the computation and save it
  m := new MultComb[32]<G+1>(l.out, r.out);
  ot := new Register[32]<G+1, G+3>(m.out);

  // Third stage, forward the value from temp out to out register
  final := new Register[32]<G+2, G+4>(ot.out);

  // Connect the output to the out register
  out = final.out;
}
