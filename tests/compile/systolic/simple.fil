import "primitives/core.fil";

comp Process<G: 1>(
  @interface[G] go: 1,
  @[G, G+1] left: 32,
  @[G, G+1] right: 32,
) -> (
  @[G, G+1] out: 32,
) {
  // If acc does not contain a valid value, use 0
  acc := new Prev[32, 1]<G>(add.out);
  mul := new MultComb[32]<G>(left, right);
  add := new Add[32]<G>(acc.prev, mul.out);

  out = add.out;
}

comp main<G: 1>(
  @interface[G] go: 1,
  @[G, G+1] l0: 32,
  @[G, G+1] l1: 32,
  @[G, G+1] t0: 32,
  @[G, G+1] t1: 32,
) -> (
  @[G, G+1] out00: 32,
  @[G, G+1] out01: 32,
  @[G, G+1] out10: 32,
  @[G, G+1] out11: 32,
) {
  // Systolic registers that go from left to right
  r00_01 := new Prev[32, 1]<G>(l0);
  r00_10 := new Prev[32, 1]<G>(t0);
  r10_11 := new Prev[32, 1]<G>(l1);
  r01_11 := new Prev[32, 1]<G>(t1);

  // Connection registers to processing elements
  pe00 := new Process<G>(l0, t0);
  pe01 := new Process<G>(r00_01.prev, t1);
  pe10 := new Process<G>(l1, r00_10.prev);
  pe11 := new Process<G>(r10_11.prev, r01_11.prev);

  out00 = pe00.out;
  out01 = pe01.out;
  out10 = pe10.out;
  out11 = pe11.out;
}