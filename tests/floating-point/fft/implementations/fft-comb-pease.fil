import "primitives/signed.fil";
import "helpers.fil";

/// Implements a combinational PEASE fft dataflow.
comp CombPeaseFFT[NStages]<'G: 1>(
  in[NPoints*2]: ['G, 'G+1] W
) -> (
  out[NPoints*2]: ['G, 'G+1] W
) with {
  let NPoints = pow2(NStages);
  // specifies the fixed point size
  let W = 32;
  let E = 8;
  let M = 23;
} where
  NStages > 0
{
  assume pow2(NStages-1) == NPoints/2;
  assume pow2(NStages-2) == NPoints/4;

  twiddle := new TwiddleFactor[NPoints]<'G>();

  // NPoints*2 * (Nstages+1) bus storing the inputs and outputs for every stage
  bundle data[NPoints*2 * (NStages+1)]: ['G, 'G+1] W;

  bitrev := new BitRev[NStages, W]<'G>(in{0..NPoints*2});
  data{0..NPoints*2} = bitrev.out{0..NPoints*2};

  // perform the fft
  for stage in 0..NStages {
    stage_twiddle := new TwiddleStage[NStages, stage, W]<'G>(twiddle.out{0..NPoints});

    let data_offset = NPoints * stage * 2;

    // temporary data storage before stride permutation
    bundle tmp_data[NPoints*2]: ['G, 'G+1] W;

    // perform the butterflies
    for butterfly_i in 0..pow2(NStages-1) {
      butterfly := new Butterfly[W, E, M]<'G>(
        data{data_offset+butterfly_i*4..data_offset+butterfly_i*4+2},
        data{data_offset+butterfly_i*4+2..data_offset+butterfly_i*4+4},
        stage_twiddle.out{butterfly_i*2..butterfly_i*2+2}
      );

      tmp_data{butterfly_i*4..butterfly_i*4+2} = butterfly.out0{0..2};
      tmp_data{butterfly_i*4+2..butterfly_i*4+4} = butterfly.out1{0..2};
    }

    // perform the stride permutation
    stride_perm := new StridePermutation[NStages, W]<'G>(tmp_data{0..NPoints*2});
    // set the next stage's data
    data{data_offset+NPoints*2..data_offset+NPoints*4} = stride_perm.out{0..NPoints*2};
  }

  out{0..NPoints*2} = data{NPoints*NStages*2..NPoints*NStages*2+NPoints*2};
}