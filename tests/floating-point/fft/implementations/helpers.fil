import "primitives/math/complex.fil";

comp TwiddleFactor[NPoints]<'G: 1>() -> (
  out[NPoints]: ['G, 'G+1] 32
) with {
  let W = 32;
} where
  NPoints > 0,
  NPoints % 2 == 0
{
  // generate twiddle factors
  for i in 0..NPoints/2 {
    cosbits := new SignedConst[W, cos_bits(i, NPoints)]<'G>();
    sinbits := new SignedConst[W, sin_bits(i+NPoints/2, NPoints)]<'G>(); // equivalent to -sin
    out{i*2} = cosbits.out;
    out{i*2+1} = sinbits.out;
  }
}

comp BitRev[NStages, W]<'G: 1>(
  in[NPoints*2]: ['G, 'G+1] W
) -> (
  out[NPoints*2]: ['G, 'G+1] W
) with {
  let NPoints = pow2(NStages);
} where 
  NStages > 0,
  W > 0
{
  // bit reverse the input
  for j in 0..NPoints {
    let br = bit_rev(j, NStages);
    assume br < NPoints;
    out{j*2..j*2+2} = in{br*2..br*2+2};
  }
}

/// Generates the twiddle factors for a stage of the fft.
/// Separated out to simplify typechecking.
comp TwiddleStage[NStages, Stage, W]<'G: 1>(
  twiddle[NPoints]: ['G, 'G+1] W
) -> (
  out[NPoints]: ['G, 'G+1] W
) with {
  let NPoints = pow2(NStages);
} where 
  NStages > 0,
  Stage < NStages,
  Stage >= 0,
  W > 0
{
  // calculate the twiddle factors.
  // Uses the fact that the twiddle factors can be generated recursively
  for twiddle_j in 0..pow2(Stage) {
    let twiddle_index = twiddle_j * pow2(NStages-Stage-1);
    assume twiddle_index < NPoints/2;
    for twiddle_i in 0..pow2(NStages-Stage-1) {
      let stage_twiddle_index = twiddle_index + twiddle_i;
      assume stage_twiddle_index < NPoints/2;
      out{stage_twiddle_index*2..stage_twiddle_index*2+2} = twiddle{twiddle_index*2..twiddle_index*2+2};
    }
  }
}

/// Performs an `NPoints` point stride permutation.
comp StridePermutation[NStages, W]<'G: 1>(
  in[NPoints*2]: ['G, 'G+1] W
) -> (
  out[NPoints*2]: ['G, 'G+1] W
) with {
  let NPoints = pow2(NStages);
} where
  NStages > 0,
  W > 0
{
  // Described on page 33 of https://link.springer.com/chapter/10.1007/978-1-4757-2767-8_2.
  assume NPoints/2 == pow2(NStages-1);

  for i in 0..NPoints/2 {
    out{i*2..i*2+2} = in{i*4..i*4+2};
    out{i*2+NPoints..i*2+NPoints+2} = in{i*4+2..i*4+4};
  }
}

// Combinational butterfly module.
comp Butterfly[W, E, ?M=W-E-1]<'G: 1>(
  in0[2]: ['G, 'G+1] W, // real and imaginary parts of input
  in1[2]: ['G, 'G+1] W,
  twiddle[2]: ['G, 'G+1] W // twiddle factor
) -> (
  out0[2]: ['G, 'G+1] W,
  out1[2]: ['G, 'G+1] W
) where
    W == E + M + 1,
    E > 1,
    M > 1
{
  t1 := new ComplexMult[W, E, M]<'G>(in1{0..2}, twiddle{0..2});
  O0 := new ComplexAdd[W, E, M]<'G>(in0{0..2}, t1.out{0..2});
  out0{0..2} = O0.out{0..2};
  
  // multiply by twiddle
  O1 := new ComplexSub[W, E, M]<'G>(in0{0..2}, t1.out{0..2});
  out1{0..2} = O1.out{0..2};
}