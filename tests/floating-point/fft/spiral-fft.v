/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

//   Input/output stream: 16 complex words per cycle
//   Throughput: one transform every 1 cycles
//   Latency: 65 cycles

//   Resources required:
//     24 multipliers (32 x 32 bit)
//     144 adders (32 x 32 bit)

// Generated on Fri Oct 06 22:37:54 UTC 2023

// Latency: 65 clock cycles
// Throughput: 1 transform every 1 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 1 cycles.  This means that
// 1 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 65 cycles.  This means that
// the 'next_out' will be asserted 65 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.


 module dft_testbench();
   reg clk, reset, next;
   wire next_out;
   integer i, j, k, l, m;
   reg [15:0] counter;
   reg [31:0] in [31:0];
   wire [31:0] X0;
   wire [31:0] Y0;
   wire [31:0] X1;
   wire [31:0] Y1;
   wire [31:0] X2;
   wire [31:0] Y2;
   wire [31:0] X3;
   wire [31:0] Y3;
   wire [31:0] X4;
   wire [31:0] Y4;
   wire [31:0] X5;
   wire [31:0] Y5;
   wire [31:0] X6;
   wire [31:0] Y6;
   wire [31:0] X7;
   wire [31:0] Y7;
   wire [31:0] X8;
   wire [31:0] Y8;
   wire [31:0] X9;
   wire [31:0] Y9;
   wire [31:0] X10;
   wire [31:0] Y10;
   wire [31:0] X11;
   wire [31:0] Y11;
   wire [31:0] X12;
   wire [31:0] Y12;
   wire [31:0] X13;
   wire [31:0] Y13;
   wire [31:0] X14;
   wire [31:0] Y14;
   wire [31:0] X15;
   wire [31:0] Y15;
   wire [31:0] X16;
   wire [31:0] Y16;
   wire [31:0] X17;
   wire [31:0] Y17;
   wire [31:0] X18;
   wire [31:0] Y18;
   wire [31:0] X19;
   wire [31:0] Y19;
   wire [31:0] X20;
   wire [31:0] Y20;
   wire [31:0] X21;
   wire [31:0] Y21;
   wire [31:0] X22;
   wire [31:0] Y22;
   wire [31:0] X23;
   wire [31:0] Y23;
   wire [31:0] X24;
   wire [31:0] Y24;
   wire [31:0] X25;
   wire [31:0] Y25;
   wire [31:0] X26;
   wire [31:0] Y26;
   wire [31:0] X27;
   wire [31:0] Y27;
   wire [31:0] X28;
   wire [31:0] Y28;
   wire [31:0] X29;
   wire [31:0] Y29;
   wire [31:0] X30;
   wire [31:0] Y30;
   wire [31:0] X31;
   wire [31:0] Y31;
   reg clrCnt;
   assign X0 = in[0];
   assign X1 = in[1];
   assign X2 = in[2];
   assign X3 = in[3];
   assign X4 = in[4];
   assign X5 = in[5];
   assign X6 = in[6];
   assign X7 = in[7];
   assign X8 = in[8];
   assign X9 = in[9];
   assign X10 = in[10];
   assign X11 = in[11];
   assign X12 = in[12];
   assign X13 = in[13];
   assign X14 = in[14];
   assign X15 = in[15];
   assign X16 = in[16];
   assign X17 = in[17];
   assign X18 = in[18];
   assign X19 = in[19];
   assign X20 = in[20];
   assign X21 = in[21];
   assign X22 = in[22];
   assign X23 = in[23];
   assign X24 = in[24];
   assign X25 = in[25];
   assign X26 = in[26];
   assign X27 = in[27];
   assign X28 = in[28];
   assign X29 = in[29];
   assign X30 = in[30];
   assign X31 = in[31];

   initial clk = 0;

   always #10000 clk = ~clk;


   // Instantiate top-level module of core 'X' signals are system inputs
   // and 'Y' signals are system outputs
   dft_top dft_top_instance (.clk(clk), .reset(reset), .next(next), .next_out(next_out),
    .X0(X0), .Y0(Y0),
    .X1(X1), .Y1(Y1),
    .X2(X2), .Y2(Y2),
    .X3(X3), .Y3(Y3),
    .X4(X4), .Y4(Y4),
    .X5(X5), .Y5(Y5),
    .X6(X6), .Y6(Y6),
    .X7(X7), .Y7(Y7),
    .X8(X8), .Y8(Y8),
    .X9(X9), .Y9(Y9),
    .X10(X10), .Y10(Y10),
    .X11(X11), .Y11(Y11),
    .X12(X12), .Y12(Y12),
    .X13(X13), .Y13(Y13),
    .X14(X14), .Y14(Y14),
    .X15(X15), .Y15(Y15),
    .X16(X16), .Y16(Y16),
    .X17(X17), .Y17(Y17),
    .X18(X18), .Y18(Y18),
    .X19(X19), .Y19(Y19),
    .X20(X20), .Y20(Y20),
    .X21(X21), .Y21(Y21),
    .X22(X22), .Y22(Y22),
    .X23(X23), .Y23(Y23),
    .X24(X24), .Y24(Y24),
    .X25(X25), .Y25(Y25),
    .X26(X26), .Y26(Y26),
    .X27(X27), .Y27(Y27),
    .X28(X28), .Y28(Y28),
    .X29(X29), .Y29(Y29),
    .X30(X30), .Y30(Y30),
    .X31(X31), .Y31(Y31));

   // You can use this counter to verify that the gap and latency are as expected.
   always @(posedge clk) begin
      if (clrCnt) counter <= 0;
      else counter <= counter+1;
   end


   initial begin
      @(posedge clk);
      @(posedge clk);

      // On the next cycle, begin loading input vector.
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // The 16 complex data points enter the system over 1 cycles
      for (j=0; j < 0; j = j+1) begin
          // Input: 16 complex words per cycle
         for (k=0; k < 32; k = k+1) begin
            in[k] <= j*32 + k;
         end
         @(posedge clk);
      end
      j = 0;
      for (k=0; k < 32; k = k+1) begin
         in[k] <= j*32 + k;
      end


      @(posedge clk);
      // Wait until the next data vector can be entered
      while (counter < 0)
        @(posedge clk);

      // On the next cycle, we will start the next data vector
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // Start entering next input vector
      for (j=0; j < 0; j = j+1) begin
         // Input 32 words per cycle
         for (k=0; k < 32; k = k+1) begin
            in[k] <= 32 + j*32 + k;
          end
          @(posedge clk);
       end
       j = 0;
       for (k=0; k < 32; k = k+1) begin
          in[k] <= 32 + j*32 + k;
       end
   end


   initial begin
      // set initial values
      in[0] <= 0;
      in[1] <= 0;
      in[2] <= 0;
      in[3] <= 0;
      in[4] <= 0;
      in[5] <= 0;
      in[6] <= 0;
      in[7] <= 0;
      in[8] <= 0;
      in[9] <= 0;
      in[10] <= 0;
      in[11] <= 0;
      in[12] <= 0;
      in[13] <= 0;
      in[14] <= 0;
      in[15] <= 0;
      in[16] <= 0;
      in[17] <= 0;
      in[18] <= 0;
      in[19] <= 0;
      in[20] <= 0;
      in[21] <= 0;
      in[22] <= 0;
      in[23] <= 0;
      in[24] <= 0;
      in[25] <= 0;
      in[26] <= 0;
      in[27] <= 0;
      in[28] <= 0;
      in[29] <= 0;
      in[30] <= 0;
      in[31] <= 0;
      next <= 0;
      reset <= 0;

      @(posedge clk);
      reset <= 1;
      @(posedge clk);
      reset <= 0;
      @(posedge clk);
      @(posedge clk);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 1---");

      for (m=0; m < 0; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         $display("%x", Y16);
         $display("%x", Y17);
         $display("%x", Y18);
         $display("%x", Y19);
         $display("%x", Y20);
         $display("%x", Y21);
         $display("%x", Y22);
         $display("%x", Y23);
         $display("%x", Y24);
         $display("%x", Y25);
         $display("%x", Y26);
         $display("%x", Y27);
         $display("%x", Y28);
         $display("%x", Y29);
         $display("%x", Y30);
         $display("%x", Y31);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      $display("%x", Y16);
      $display("%x", Y17);
      $display("%x", Y18);
      $display("%x", Y19);
      $display("%x", Y20);
      $display("%x", Y21);
      $display("%x", Y22);
      $display("%x", Y23);
      $display("%x", Y24);
      $display("%x", Y25);
      $display("%x", Y26);
      $display("%x", Y27);
      $display("%x", Y28);
      $display("%x", Y29);
      $display("%x", Y30);
      $display("%x", Y31);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 2---");

      for (m=0; m < 0; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         $display("%x", Y16);
         $display("%x", Y17);
         $display("%x", Y18);
         $display("%x", Y19);
         $display("%x", Y20);
         $display("%x", Y21);
         $display("%x", Y22);
         $display("%x", Y23);
         $display("%x", Y24);
         $display("%x", Y25);
         $display("%x", Y26);
         $display("%x", Y27);
         $display("%x", Y28);
         $display("%x", Y29);
         $display("%x", Y30);
         $display("%x", Y31);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      $display("%x", Y16);
      $display("%x", Y17);
      $display("%x", Y18);
      $display("%x", Y19);
      $display("%x", Y20);
      $display("%x", Y21);
      $display("%x", Y22);
      $display("%x", Y23);
      $display("%x", Y24);
      $display("%x", Y25);
      $display("%x", Y26);
      $display("%x", Y27);
      $display("%x", Y28);
      $display("%x", Y29);
      $display("%x", Y30);
      $display("%x", Y31);
      $finish;
   end
endmodule

// Latency: 65
// Gap: 1
// module_name_is:dft_top
module dft_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15,
   X16, Y16,
   X17, Y17,
   X18, Y18,
   X19, Y19,
   X20, Y20,
   X21, Y21,
   X22, Y22,
   X23, Y23,
   X24, Y24,
   X25, Y25,
   X26, Y26,
   X27, Y27,
   X28, Y28,
   X29, Y29,
   X30, Y30,
   X31, Y31);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   wire [31:0] t0_0;
   wire [31:0] t0_1;
   wire [31:0] t0_2;
   wire [31:0] t0_3;
   wire [31:0] t0_4;
   wire [31:0] t0_5;
   wire [31:0] t0_6;
   wire [31:0] t0_7;
   wire [31:0] t0_8;
   wire [31:0] t0_9;
   wire [31:0] t0_10;
   wire [31:0] t0_11;
   wire [31:0] t0_12;
   wire [31:0] t0_13;
   wire [31:0] t0_14;
   wire [31:0] t0_15;
   wire [31:0] t0_16;
   wire [31:0] t0_17;
   wire [31:0] t0_18;
   wire [31:0] t0_19;
   wire [31:0] t0_20;
   wire [31:0] t0_21;
   wire [31:0] t0_22;
   wire [31:0] t0_23;
   wire [31:0] t0_24;
   wire [31:0] t0_25;
   wire [31:0] t0_26;
   wire [31:0] t0_27;
   wire [31:0] t0_28;
   wire [31:0] t0_29;
   wire [31:0] t0_30;
   wire [31:0] t0_31;
   wire next_0;
   wire [31:0] t1_0;
   wire [31:0] t1_1;
   wire [31:0] t1_2;
   wire [31:0] t1_3;
   wire [31:0] t1_4;
   wire [31:0] t1_5;
   wire [31:0] t1_6;
   wire [31:0] t1_7;
   wire [31:0] t1_8;
   wire [31:0] t1_9;
   wire [31:0] t1_10;
   wire [31:0] t1_11;
   wire [31:0] t1_12;
   wire [31:0] t1_13;
   wire [31:0] t1_14;
   wire [31:0] t1_15;
   wire [31:0] t1_16;
   wire [31:0] t1_17;
   wire [31:0] t1_18;
   wire [31:0] t1_19;
   wire [31:0] t1_20;
   wire [31:0] t1_21;
   wire [31:0] t1_22;
   wire [31:0] t1_23;
   wire [31:0] t1_24;
   wire [31:0] t1_25;
   wire [31:0] t1_26;
   wire [31:0] t1_27;
   wire [31:0] t1_28;
   wire [31:0] t1_29;
   wire [31:0] t1_30;
   wire [31:0] t1_31;
   wire next_1;
   wire [31:0] t2_0;
   wire [31:0] t2_1;
   wire [31:0] t2_2;
   wire [31:0] t2_3;
   wire [31:0] t2_4;
   wire [31:0] t2_5;
   wire [31:0] t2_6;
   wire [31:0] t2_7;
   wire [31:0] t2_8;
   wire [31:0] t2_9;
   wire [31:0] t2_10;
   wire [31:0] t2_11;
   wire [31:0] t2_12;
   wire [31:0] t2_13;
   wire [31:0] t2_14;
   wire [31:0] t2_15;
   wire [31:0] t2_16;
   wire [31:0] t2_17;
   wire [31:0] t2_18;
   wire [31:0] t2_19;
   wire [31:0] t2_20;
   wire [31:0] t2_21;
   wire [31:0] t2_22;
   wire [31:0] t2_23;
   wire [31:0] t2_24;
   wire [31:0] t2_25;
   wire [31:0] t2_26;
   wire [31:0] t2_27;
   wire [31:0] t2_28;
   wire [31:0] t2_29;
   wire [31:0] t2_30;
   wire [31:0] t2_31;
   wire next_2;
   assign t0_0 = X0;
   assign Y0 = t2_0;
   assign t0_1 = X1;
   assign Y1 = t2_1;
   assign t0_2 = X2;
   assign Y2 = t2_2;
   assign t0_3 = X3;
   assign Y3 = t2_3;
   assign t0_4 = X4;
   assign Y4 = t2_4;
   assign t0_5 = X5;
   assign Y5 = t2_5;
   assign t0_6 = X6;
   assign Y6 = t2_6;
   assign t0_7 = X7;
   assign Y7 = t2_7;
   assign t0_8 = X8;
   assign Y8 = t2_8;
   assign t0_9 = X9;
   assign Y9 = t2_9;
   assign t0_10 = X10;
   assign Y10 = t2_10;
   assign t0_11 = X11;
   assign Y11 = t2_11;
   assign t0_12 = X12;
   assign Y12 = t2_12;
   assign t0_13 = X13;
   assign Y13 = t2_13;
   assign t0_14 = X14;
   assign Y14 = t2_14;
   assign t0_15 = X15;
   assign Y15 = t2_15;
   assign t0_16 = X16;
   assign Y16 = t2_16;
   assign t0_17 = X17;
   assign Y17 = t2_17;
   assign t0_18 = X18;
   assign Y18 = t2_18;
   assign t0_19 = X19;
   assign Y19 = t2_19;
   assign t0_20 = X20;
   assign Y20 = t2_20;
   assign t0_21 = X21;
   assign Y21 = t2_21;
   assign t0_22 = X22;
   assign Y22 = t2_22;
   assign t0_23 = X23;
   assign Y23 = t2_23;
   assign t0_24 = X24;
   assign Y24 = t2_24;
   assign t0_25 = X25;
   assign Y25 = t2_25;
   assign t0_26 = X26;
   assign Y26 = t2_26;
   assign t0_27 = X27;
   assign Y27 = t2_27;
   assign t0_28 = X28;
   assign Y28 = t2_28;
   assign t0_29 = X29;
   assign Y29 = t2_29;
   assign t0_30 = X30;
   assign Y30 = t2_30;
   assign t0_31 = X31;
   assign Y31 = t2_31;
   assign next_0 = next;
   assign next_out = next_2;

// latency=42, gap=1
   codeBlock73267 stage0(.clk(clk), .reset(reset), .next_in(next_0), .next_out(next_1),
       .X0_in(t0_0), .Y0(t1_0),
       .X1_in(t0_1), .Y1(t1_1),
       .X2_in(t0_2), .Y2(t1_2),
       .X3_in(t0_3), .Y3(t1_3),
       .X4_in(t0_4), .Y4(t1_4),
       .X5_in(t0_5), .Y5(t1_5),
       .X6_in(t0_6), .Y6(t1_6),
       .X7_in(t0_7), .Y7(t1_7),
       .X8_in(t0_8), .Y8(t1_8),
       .X9_in(t0_9), .Y9(t1_9),
       .X10_in(t0_10), .Y10(t1_10),
       .X11_in(t0_11), .Y11(t1_11),
       .X12_in(t0_12), .Y12(t1_12),
       .X13_in(t0_13), .Y13(t1_13),
       .X14_in(t0_14), .Y14(t1_14),
       .X15_in(t0_15), .Y15(t1_15),
       .X16_in(t0_16), .Y16(t1_16),
       .X17_in(t0_17), .Y17(t1_17),
       .X18_in(t0_18), .Y18(t1_18),
       .X19_in(t0_19), .Y19(t1_19),
       .X20_in(t0_20), .Y20(t1_20),
       .X21_in(t0_21), .Y21(t1_21),
       .X22_in(t0_22), .Y22(t1_22),
       .X23_in(t0_23), .Y23(t1_23),
       .X24_in(t0_24), .Y24(t1_24),
       .X25_in(t0_25), .Y25(t1_25),
       .X26_in(t0_26), .Y26(t1_26),
       .X27_in(t0_27), .Y27(t1_27),
       .X28_in(t0_28), .Y28(t1_28),
       .X29_in(t0_29), .Y29(t1_29),
       .X30_in(t0_30), .Y30(t1_30),
       .X31_in(t0_31), .Y31(t1_31));


// latency=23, gap=1
   codeBlock74385 stage1(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7),
       .X8_in(t1_8), .Y8(t2_8),
       .X9_in(t1_9), .Y9(t2_9),
       .X10_in(t1_10), .Y10(t2_10),
       .X11_in(t1_11), .Y11(t2_11),
       .X12_in(t1_12), .Y12(t2_12),
       .X13_in(t1_13), .Y13(t2_13),
       .X14_in(t1_14), .Y14(t2_14),
       .X15_in(t1_15), .Y15(t2_15),
       .X16_in(t1_16), .Y16(t2_16),
       .X17_in(t1_17), .Y17(t2_17),
       .X18_in(t1_18), .Y18(t2_18),
       .X19_in(t1_19), .Y19(t2_19),
       .X20_in(t1_20), .Y20(t2_20),
       .X21_in(t1_21), .Y21(t2_21),
       .X22_in(t1_22), .Y22(t2_22),
       .X23_in(t1_23), .Y23(t2_23),
       .X24_in(t1_24), .Y24(t2_24),
       .X25_in(t1_25), .Y25(t2_25),
       .X26_in(t1_26), .Y26(t2_26),
       .X27_in(t1_27), .Y27(t2_27),
       .X28_in(t1_28), .Y28(t2_28),
       .X29_in(t1_29), .Y29(t2_29),
       .X30_in(t1_30), .Y30(t2_30),
       .X31_in(t1_31), .Y31(t2_31));


endmodule

// Latency: 42
// Gap: 1
module codeBlock73267(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15,
   X16_in, Y16,
   X17_in, Y17,
   X18_in, Y18,
   X19_in, Y19,
   X20_in, Y20,
   X21_in, Y21,
   X22_in, Y22,
   X23_in, Y23,
   X24_in, Y24,
   X25_in, Y25,
   X26_in, Y26,
   X27_in, Y27,
   X28_in, Y28,
   X29_in, Y29,
   X30_in, Y30,
   X31_in, Y31);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in,
      X16_in,
      X17_in,
      X18_in,
      X19_in,
      X20_in,
      X21_in,
      X22_in,
      X23_in,
      X24_in,
      X25_in,
      X26_in,
      X27_in,
      X28_in,
      X29_in,
      X30_in,
      X31_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   shiftRegFIFO #(41, 1) shiftFIFO_76438(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a249;
   wire signed [31:0] a250;
   wire signed [31:0] a251;
   wire signed [31:0] a252;
   wire signed [31:0] a257;
   wire signed [31:0] a258;
   wire signed [31:0] a259;
   wire signed [31:0] a260;
   wire signed [31:0] a265;
   wire signed [31:0] a266;
   wire signed [31:0] a267;
   wire signed [31:0] a268;
   wire signed [31:0] a273;
   wire signed [31:0] a274;
   wire signed [31:0] a275;
   wire signed [31:0] a276;
   wire signed [31:0] a281;
   wire signed [31:0] a282;
   wire signed [31:0] a283;
   wire signed [31:0] a284;
   wire signed [31:0] a289;
   wire signed [31:0] a290;
   wire signed [31:0] a291;
   wire signed [31:0] a292;
   wire signed [31:0] a297;
   wire signed [31:0] a298;
   wire signed [31:0] a299;
   wire signed [31:0] a300;
   wire signed [31:0] a305;
   wire signed [31:0] a306;
   wire signed [31:0] a307;
   wire signed [31:0] a308;
   wire  [31:0] t914;
   wire  [31:0] t915;
   wire  [31:0] t916;
   wire  [31:0] t917;
   wire  [31:0] t918;
   wire  [31:0] t919;
   wire  [31:0] t920;
   wire  [31:0] t921;
   wire  [31:0] t930;
   wire  [31:0] t931;
   wire  [31:0] t932;
   wire  [31:0] t933;
   wire  [31:0] t934;
   wire  [31:0] t935;
   wire  [31:0] t936;
   wire  [31:0] t937;
   wire  [31:0] t952;
   wire  [31:0] t953;
   wire  [31:0] t954;
   wire  [31:0] t955;
   wire  [31:0] t956;
   wire  [31:0] t957;
   wire  [31:0] t958;
   wire  [31:0] t959;
   wire  [31:0] t972;
   wire  [31:0] t973;
   wire  [31:0] t974;
   wire  [31:0] t975;
   wire  [31:0] t976;
   wire  [31:0] t977;
   wire  [31:0] t978;
   wire  [31:0] t979;
   wire  [31:0] t922;
   wire  [31:0] t923;
   wire  [31:0] t924;
   wire  [31:0] t925;
   wire  [31:0] t926;
   wire  [31:0] t927;
   wire  [31:0] t928;
   wire  [31:0] t929;
   wire  [31:0] t938;
   wire  [31:0] t939;
   wire  [31:0] t940;
   wire  [31:0] t941;
   wire  [31:0] t944;
   wire  [31:0] t945;
   wire  [31:0] t946;
   wire  [31:0] t947;
   wire  [31:0] t960;
   wire  [31:0] t961;
   wire  [31:0] t962;
   wire  [31:0] t963;
   wire  [31:0] t964;
   wire  [31:0] t965;
   wire  [31:0] t966;
   wire  [31:0] t967;
   wire  [31:0] t980;
   wire  [31:0] t981;
   wire  [31:0] t982;
   wire  [31:0] t983;
   wire  [31:0] t986;
   wire  [31:0] t987;
   wire  [31:0] t988;
   wire  [31:0] t989;
   reg signed [31:0] tm24;
   reg signed [31:0] tm43;
   reg signed [31:0] tm62;
   reg signed [31:0] tm81;
   reg signed [31:0] tm100;
   reg signed [31:0] tm119;
   reg signed [31:0] tm138;
   reg signed [31:0] tm157;
   reg signed [31:0] tm176;
   reg signed [31:0] tm195;
   reg signed [31:0] tm214;
   reg signed [31:0] tm233;
   reg signed [31:0] tm252;
   reg signed [31:0] tm271;
   reg signed [31:0] tm290;
   reg signed [31:0] tm309;
   reg signed [31:0] tm25;
   reg signed [31:0] tm44;
   reg signed [31:0] tm63;
   reg signed [31:0] tm82;
   reg signed [31:0] tm101;
   reg signed [31:0] tm120;
   reg signed [31:0] tm139;
   reg signed [31:0] tm158;
   reg signed [31:0] tm177;
   reg signed [31:0] tm196;
   reg signed [31:0] tm215;
   reg signed [31:0] tm234;
   reg signed [31:0] tm253;
   reg signed [31:0] tm272;
   reg signed [31:0] tm291;
   reg signed [31:0] tm310;
   reg signed [31:0] tm26;
   reg signed [31:0] tm45;
   reg signed [31:0] tm64;
   reg signed [31:0] tm83;
   reg signed [31:0] tm102;
   reg signed [31:0] tm121;
   reg signed [31:0] tm140;
   reg signed [31:0] tm159;
   reg signed [31:0] tm178;
   reg signed [31:0] tm197;
   reg signed [31:0] tm216;
   reg signed [31:0] tm235;
   reg signed [31:0] tm254;
   reg signed [31:0] tm273;
   reg signed [31:0] tm292;
   reg signed [31:0] tm311;
   reg signed [31:0] tm27;
   reg signed [31:0] tm46;
   reg signed [31:0] tm65;
   reg signed [31:0] tm84;
   reg signed [31:0] tm103;
   reg signed [31:0] tm122;
   reg signed [31:0] tm141;
   reg signed [31:0] tm160;
   reg signed [31:0] tm179;
   reg signed [31:0] tm198;
   reg signed [31:0] tm217;
   reg signed [31:0] tm236;
   reg signed [31:0] tm255;
   reg signed [31:0] tm274;
   reg signed [31:0] tm293;
   reg signed [31:0] tm312;
   reg signed [31:0] tm28;
   reg signed [31:0] tm47;
   reg signed [31:0] tm66;
   reg signed [31:0] tm85;
   reg signed [31:0] tm104;
   reg signed [31:0] tm123;
   reg signed [31:0] tm142;
   reg signed [31:0] tm161;
   reg signed [31:0] tm180;
   reg signed [31:0] tm199;
   reg signed [31:0] tm218;
   reg signed [31:0] tm237;
   reg signed [31:0] tm256;
   reg signed [31:0] tm275;
   reg signed [31:0] tm294;
   reg signed [31:0] tm313;
   reg signed [31:0] tm29;
   reg signed [31:0] tm48;
   reg signed [31:0] tm67;
   reg signed [31:0] tm86;
   reg signed [31:0] tm105;
   reg signed [31:0] tm124;
   reg signed [31:0] tm143;
   reg signed [31:0] tm162;
   reg signed [31:0] tm181;
   reg signed [31:0] tm200;
   reg signed [31:0] tm219;
   reg signed [31:0] tm238;
   reg signed [31:0] tm257;
   reg signed [31:0] tm276;
   reg signed [31:0] tm295;
   reg signed [31:0] tm314;
   reg signed [31:0] tm30;
   reg signed [31:0] tm49;
   reg signed [31:0] tm68;
   reg signed [31:0] tm87;
   reg signed [31:0] tm106;
   reg signed [31:0] tm125;
   reg signed [31:0] tm144;
   reg signed [31:0] tm163;
   reg signed [31:0] tm182;
   reg signed [31:0] tm201;
   reg signed [31:0] tm220;
   reg signed [31:0] tm239;
   reg signed [31:0] tm258;
   reg signed [31:0] tm277;
   reg signed [31:0] tm296;
   reg signed [31:0] tm315;
   wire  [31:0] a225;
   wire  [31:0] a226;
   wire  [31:0] a227;
   wire  [31:0] a228;
   wire  [31:0] a229;
   wire  [31:0] a230;
   wire  [31:0] a231;
   wire  [31:0] a232;
   wire  [31:0] a233;
   wire  [31:0] a234;
   wire  [31:0] a235;
   wire  [31:0] a236;
   wire  [31:0] a237;
   wire  [31:0] a238;
   wire  [31:0] a239;
   wire  [31:0] a240;
   wire  [31:0] a241;
   wire  [31:0] a242;
   wire  [31:0] a243;
   wire  [31:0] a244;
   wire  [31:0] a245;
   wire  [31:0] a246;
   wire  [31:0] a247;
   wire  [31:0] a248;
   reg signed [31:0] tm31;
   reg signed [31:0] tm50;
   reg signed [31:0] tm69;
   reg signed [31:0] tm88;
   reg signed [31:0] tm107;
   reg signed [31:0] tm126;
   reg signed [31:0] tm145;
   reg signed [31:0] tm164;
   reg signed [31:0] tm183;
   reg signed [31:0] tm202;
   reg signed [31:0] tm221;
   reg signed [31:0] tm240;
   reg signed [31:0] tm259;
   reg signed [31:0] tm278;
   reg signed [31:0] tm297;
   reg signed [31:0] tm316;
   reg signed [31:0] tm32;
   reg signed [31:0] tm51;
   reg signed [31:0] tm70;
   reg signed [31:0] tm89;
   reg signed [31:0] tm108;
   reg signed [31:0] tm127;
   reg signed [31:0] tm146;
   reg signed [31:0] tm165;
   reg signed [31:0] tm184;
   reg signed [31:0] tm203;
   reg signed [31:0] tm222;
   reg signed [31:0] tm241;
   reg signed [31:0] tm260;
   reg signed [31:0] tm279;
   reg signed [31:0] tm298;
   reg signed [31:0] tm317;
   reg signed [31:0] tm33;
   reg signed [31:0] tm52;
   reg signed [31:0] tm71;
   reg signed [31:0] tm90;
   reg signed [31:0] tm109;
   reg signed [31:0] tm128;
   reg signed [31:0] tm147;
   reg signed [31:0] tm166;
   reg signed [31:0] tm185;
   reg signed [31:0] tm204;
   reg signed [31:0] tm223;
   reg signed [31:0] tm242;
   reg signed [31:0] tm261;
   reg signed [31:0] tm280;
   reg signed [31:0] tm299;
   reg signed [31:0] tm318;
   reg signed [31:0] tm34;
   reg signed [31:0] tm53;
   reg signed [31:0] tm72;
   reg signed [31:0] tm91;
   reg signed [31:0] tm110;
   reg signed [31:0] tm129;
   reg signed [31:0] tm148;
   reg signed [31:0] tm167;
   reg signed [31:0] tm186;
   reg signed [31:0] tm205;
   reg signed [31:0] tm224;
   reg signed [31:0] tm243;
   reg signed [31:0] tm262;
   reg signed [31:0] tm281;
   reg signed [31:0] tm300;
   reg signed [31:0] tm319;
   reg signed [31:0] tm35;
   reg signed [31:0] tm54;
   reg signed [31:0] tm73;
   reg signed [31:0] tm92;
   reg signed [31:0] tm111;
   reg signed [31:0] tm130;
   reg signed [31:0] tm149;
   reg signed [31:0] tm168;
   reg signed [31:0] tm187;
   reg signed [31:0] tm206;
   reg signed [31:0] tm225;
   reg signed [31:0] tm244;
   reg signed [31:0] tm263;
   reg signed [31:0] tm282;
   reg signed [31:0] tm301;
   reg signed [31:0] tm320;
   reg signed [31:0] tm36;
   reg signed [31:0] tm55;
   reg signed [31:0] tm74;
   reg signed [31:0] tm93;
   reg signed [31:0] tm112;
   reg signed [31:0] tm131;
   reg signed [31:0] tm150;
   reg signed [31:0] tm169;
   reg signed [31:0] tm188;
   reg signed [31:0] tm207;
   reg signed [31:0] tm226;
   reg signed [31:0] tm245;
   reg signed [31:0] tm264;
   reg signed [31:0] tm283;
   reg signed [31:0] tm302;
   reg signed [31:0] tm321;
   reg signed [31:0] tm37;
   reg signed [31:0] tm56;
   reg signed [31:0] tm75;
   reg signed [31:0] tm94;
   reg signed [31:0] tm113;
   reg signed [31:0] tm132;
   reg signed [31:0] tm151;
   reg signed [31:0] tm170;
   reg signed [31:0] tm189;
   reg signed [31:0] tm208;
   reg signed [31:0] tm227;
   reg signed [31:0] tm246;
   reg signed [31:0] tm265;
   reg signed [31:0] tm284;
   reg signed [31:0] tm303;
   reg signed [31:0] tm322;
   reg signed [31:0] tm38;
   reg signed [31:0] tm57;
   reg signed [31:0] tm76;
   reg signed [31:0] tm95;
   reg signed [31:0] tm114;
   reg signed [31:0] tm133;
   reg signed [31:0] tm152;
   reg signed [31:0] tm171;
   reg signed [31:0] tm190;
   reg signed [31:0] tm209;
   reg signed [31:0] tm228;
   reg signed [31:0] tm247;
   reg signed [31:0] tm266;
   reg signed [31:0] tm285;
   reg signed [31:0] tm304;
   reg signed [31:0] tm323;
   reg signed [31:0] tm39;
   reg signed [31:0] tm58;
   reg signed [31:0] tm77;
   reg signed [31:0] tm96;
   reg signed [31:0] tm115;
   reg signed [31:0] tm134;
   reg signed [31:0] tm153;
   reg signed [31:0] tm172;
   reg signed [31:0] tm191;
   reg signed [31:0] tm210;
   reg signed [31:0] tm229;
   reg signed [31:0] tm248;
   reg signed [31:0] tm267;
   reg signed [31:0] tm286;
   reg signed [31:0] tm305;
   reg signed [31:0] tm324;
   reg signed [31:0] tm40;
   reg signed [31:0] tm59;
   reg signed [31:0] tm78;
   reg signed [31:0] tm97;
   reg signed [31:0] tm116;
   reg signed [31:0] tm135;
   reg signed [31:0] tm154;
   reg signed [31:0] tm173;
   reg signed [31:0] tm192;
   reg signed [31:0] tm211;
   reg signed [31:0] tm230;
   reg signed [31:0] tm249;
   reg signed [31:0] tm268;
   reg signed [31:0] tm287;
   reg signed [31:0] tm306;
   reg signed [31:0] tm325;
   reg signed [31:0] tm41;
   reg signed [31:0] tm60;
   reg signed [31:0] tm79;
   reg signed [31:0] tm98;
   reg signed [31:0] tm117;
   reg signed [31:0] tm136;
   reg signed [31:0] tm155;
   reg signed [31:0] tm174;
   reg signed [31:0] tm193;
   reg signed [31:0] tm212;
   reg signed [31:0] tm231;
   reg signed [31:0] tm250;
   reg signed [31:0] tm269;
   reg signed [31:0] tm288;
   reg signed [31:0] tm307;
   reg signed [31:0] tm326;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y4;
   wire signed [31:0] Y5;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;
   wire signed [31:0] Y6;
   wire signed [31:0] Y7;
   wire  [31:0] t942;
   wire  [31:0] t943;
   wire signed [31:0] Y8;
   wire signed [31:0] Y9;
   wire signed [31:0] Y12;
   wire signed [31:0] Y13;
   wire  [31:0] t948;
   wire  [31:0] t949;
   wire  [31:0] t950;
   wire  [31:0] t951;
   wire signed [31:0] Y10;
   wire signed [31:0] Y11;
   wire signed [31:0] Y14;
   wire signed [31:0] Y15;
   wire signed [31:0] Y16;
   wire signed [31:0] Y17;
   wire signed [31:0] Y20;
   wire signed [31:0] Y21;
   wire  [31:0] t968;
   wire  [31:0] t969;
   wire  [31:0] t970;
   wire  [31:0] t971;
   wire signed [31:0] Y18;
   wire signed [31:0] Y19;
   wire signed [31:0] Y22;
   wire signed [31:0] Y23;
   wire  [31:0] t984;
   wire  [31:0] t985;
   wire signed [31:0] Y24;
   wire signed [31:0] Y25;
   wire signed [31:0] Y28;
   wire signed [31:0] Y29;
   wire  [31:0] t990;
   wire  [31:0] t991;
   wire  [31:0] t992;
   wire  [31:0] t993;
   wire signed [31:0] Y26;
   wire signed [31:0] Y27;
   wire signed [31:0] Y30;
   wire signed [31:0] Y31;
   reg signed [31:0] tm42;
   reg signed [31:0] tm61;
   reg signed [31:0] tm80;
   reg signed [31:0] tm99;
   reg signed [31:0] tm118;
   reg signed [31:0] tm137;
   reg signed [31:0] tm156;
   reg signed [31:0] tm175;
   reg signed [31:0] tm194;
   reg signed [31:0] tm213;
   reg signed [31:0] tm232;
   reg signed [31:0] tm251;
   reg signed [31:0] tm270;
   reg signed [31:0] tm289;
   reg signed [31:0] tm308;
   reg signed [31:0] tm327;

   wire signed [31:0] tm0;
   assign tm0 = 32'h3f3504f3;
   wire signed [31:0] tm2;
   assign tm2 = 32'h3f6c835e;
   wire signed [31:0] tm3;
   assign tm3 = 32'h3ec3ef15;

   assign a249 = X0;
   assign a250 = X16;
   assign a251 = X1;
   assign a252 = X17;
   assign a257 = X8;
   assign a258 = X24;
   assign a259 = X9;
   assign a260 = X25;
   assign a265 = X2;
   assign a266 = X18;
   assign a267 = X3;
   assign a268 = X19;
   assign a273 = X10;
   assign a274 = X26;
   assign a275 = X11;
   assign a276 = X27;
   assign a281 = X4;
   assign a282 = X20;
   assign a283 = X5;
   assign a284 = X21;
   assign a289 = X12;
   assign a290 = X28;
   assign a291 = X13;
   assign a292 = X29;
   assign a297 = X6;
   assign a298 = X22;
   assign a299 = X7;
   assign a300 = X23;
   assign a305 = X14;
   assign a306 = X30;
   assign a307 = X15;
   assign a308 = X31;
   assign Y0 = tm42;
   assign Y1 = tm61;
   assign Y4 = tm80;
   assign Y5 = tm99;
   assign Y2 = tm118;
   assign Y3 = tm137;
   assign Y6 = tm156;
   assign Y7 = tm175;
   assign Y8 = tm194;
   assign Y9 = tm213;
   assign Y12 = t942;
   assign Y13 = t943;
   assign Y10 = t948;
   assign Y11 = t949;
   assign Y14 = t950;
   assign Y15 = t951;
   assign Y16 = tm232;
   assign Y17 = tm251;
   assign Y20 = tm270;
   assign Y21 = tm289;
   assign Y18 = t968;
   assign Y19 = t969;
   assign Y22 = t970;
   assign Y23 = {~(t971[31]), t971[30:0]};
   assign Y24 = tm308;
   assign Y25 = tm327;
   assign Y28 = t984;
   assign Y29 = {~(t985[31]), t985[30:0]};
   assign Y26 = t990;
   assign Y27 = t991;
   assign Y30 = {~(t992[31]), t992[30:0]};
   assign Y31 = t993;

    addfp32 add73279(.a(a249), .b(a250), .clk(clk), .out(t914), .enable(1'b1), .rst(reset));
    addfp32 add73294(.a(a251), .b(a252), .clk(clk), .out(t915), .enable(1'b1), .rst(reset));
    subfp32 sub73309(.a(a249), .b(a250), .clk(clk), .out(t916), .enable(1'b1), .rst(reset));
    subfp32 sub73324(.a(a251), .b(a252), .clk(clk), .out(t917), .enable(1'b1), .rst(reset));
    addfp32 add73339(.a(a257), .b(a258), .clk(clk), .out(t918), .enable(1'b1), .rst(reset));
    addfp32 add73354(.a(a259), .b(a260), .clk(clk), .out(t919), .enable(1'b1), .rst(reset));
    subfp32 sub73369(.a(a257), .b(a258), .clk(clk), .out(t920), .enable(1'b1), .rst(reset));
    subfp32 sub73384(.a(a259), .b(a260), .clk(clk), .out(t921), .enable(1'b1), .rst(reset));
    addfp32 add73487(.a(a265), .b(a266), .clk(clk), .out(t930), .enable(1'b1), .rst(reset));
    addfp32 add73502(.a(a267), .b(a268), .clk(clk), .out(t931), .enable(1'b1), .rst(reset));
    subfp32 sub73517(.a(a265), .b(a266), .clk(clk), .out(t932), .enable(1'b1), .rst(reset));
    subfp32 sub73532(.a(a267), .b(a268), .clk(clk), .out(t933), .enable(1'b1), .rst(reset));
    addfp32 add73547(.a(a273), .b(a274), .clk(clk), .out(t934), .enable(1'b1), .rst(reset));
    addfp32 add73562(.a(a275), .b(a276), .clk(clk), .out(t935), .enable(1'b1), .rst(reset));
    subfp32 sub73577(.a(a273), .b(a274), .clk(clk), .out(t936), .enable(1'b1), .rst(reset));
    subfp32 sub73592(.a(a275), .b(a276), .clk(clk), .out(t937), .enable(1'b1), .rst(reset));
    addfp32 add73807(.a(a281), .b(a282), .clk(clk), .out(t952), .enable(1'b1), .rst(reset));
    addfp32 add73822(.a(a283), .b(a284), .clk(clk), .out(t953), .enable(1'b1), .rst(reset));
    subfp32 sub73837(.a(a281), .b(a282), .clk(clk), .out(t954), .enable(1'b1), .rst(reset));
    subfp32 sub73852(.a(a283), .b(a284), .clk(clk), .out(t955), .enable(1'b1), .rst(reset));
    addfp32 add73867(.a(a289), .b(a290), .clk(clk), .out(t956), .enable(1'b1), .rst(reset));
    addfp32 add73882(.a(a291), .b(a292), .clk(clk), .out(t957), .enable(1'b1), .rst(reset));
    subfp32 sub73897(.a(a289), .b(a290), .clk(clk), .out(t958), .enable(1'b1), .rst(reset));
    subfp32 sub73912(.a(a291), .b(a292), .clk(clk), .out(t959), .enable(1'b1), .rst(reset));
    addfp32 add74073(.a(a297), .b(a298), .clk(clk), .out(t972), .enable(1'b1), .rst(reset));
    addfp32 add74088(.a(a299), .b(a300), .clk(clk), .out(t973), .enable(1'b1), .rst(reset));
    subfp32 sub74103(.a(a297), .b(a298), .clk(clk), .out(t974), .enable(1'b1), .rst(reset));
    subfp32 sub74118(.a(a299), .b(a300), .clk(clk), .out(t975), .enable(1'b1), .rst(reset));
    addfp32 add74133(.a(a305), .b(a306), .clk(clk), .out(t976), .enable(1'b1), .rst(reset));
    addfp32 add74148(.a(a307), .b(a308), .clk(clk), .out(t977), .enable(1'b1), .rst(reset));
    subfp32 sub74163(.a(a305), .b(a306), .clk(clk), .out(t978), .enable(1'b1), .rst(reset));
    subfp32 sub74178(.a(a307), .b(a308), .clk(clk), .out(t979), .enable(1'b1), .rst(reset));
    addfp32 add73391(.a(t914), .b(t918), .clk(clk), .out(t922), .enable(1'b1), .rst(reset));
    addfp32 add73398(.a(t915), .b(t919), .clk(clk), .out(t923), .enable(1'b1), .rst(reset));
    subfp32 sub73405(.a(t914), .b(t918), .clk(clk), .out(t924), .enable(1'b1), .rst(reset));
    subfp32 sub73412(.a(t915), .b(t919), .clk(clk), .out(t925), .enable(1'b1), .rst(reset));
    addfp32 add73435(.a(t916), .b(t921), .clk(clk), .out(t926), .enable(1'b1), .rst(reset));
    subfp32 sub73442(.a(t917), .b(t920), .clk(clk), .out(t927), .enable(1'b1), .rst(reset));
    subfp32 sub73449(.a(t916), .b(t921), .clk(clk), .out(t928), .enable(1'b1), .rst(reset));
    addfp32 add73456(.a(t917), .b(t920), .clk(clk), .out(t929), .enable(1'b1), .rst(reset));
    addfp32 add73599(.a(t930), .b(t934), .clk(clk), .out(t938), .enable(1'b1), .rst(reset));
    addfp32 add73606(.a(t931), .b(t935), .clk(clk), .out(t939), .enable(1'b1), .rst(reset));
    subfp32 sub73613(.a(t930), .b(t934), .clk(clk), .out(t940), .enable(1'b1), .rst(reset));
    subfp32 sub73620(.a(t931), .b(t935), .clk(clk), .out(t941), .enable(1'b1), .rst(reset));
    addfp32 add73671(.a(t932), .b(t937), .clk(clk), .out(t944), .enable(1'b1), .rst(reset));
    subfp32 sub73678(.a(t933), .b(t936), .clk(clk), .out(t945), .enable(1'b1), .rst(reset));
    subfp32 sub73685(.a(t932), .b(t937), .clk(clk), .out(t946), .enable(1'b1), .rst(reset));
    addfp32 add73692(.a(t933), .b(t936), .clk(clk), .out(t947), .enable(1'b1), .rst(reset));
    addfp32 add73919(.a(t952), .b(t956), .clk(clk), .out(t960), .enable(1'b1), .rst(reset));
    addfp32 add73926(.a(t953), .b(t957), .clk(clk), .out(t961), .enable(1'b1), .rst(reset));
    subfp32 sub73933(.a(t952), .b(t956), .clk(clk), .out(t962), .enable(1'b1), .rst(reset));
    subfp32 sub73940(.a(t953), .b(t957), .clk(clk), .out(t963), .enable(1'b1), .rst(reset));
    addfp32 add73964(.a(t954), .b(t959), .clk(clk), .out(t964), .enable(1'b1), .rst(reset));
    subfp32 sub73971(.a(t955), .b(t958), .clk(clk), .out(t965), .enable(1'b1), .rst(reset));
    subfp32 sub73978(.a(t954), .b(t959), .clk(clk), .out(t966), .enable(1'b1), .rst(reset));
    addfp32 add73985(.a(t955), .b(t958), .clk(clk), .out(t967), .enable(1'b1), .rst(reset));
    addfp32 add74185(.a(t972), .b(t976), .clk(clk), .out(t980), .enable(1'b1), .rst(reset));
    addfp32 add74192(.a(t973), .b(t977), .clk(clk), .out(t981), .enable(1'b1), .rst(reset));
    subfp32 sub74199(.a(t972), .b(t976), .clk(clk), .out(t982), .enable(1'b1), .rst(reset));
    subfp32 sub74206(.a(t973), .b(t977), .clk(clk), .out(t983), .enable(1'b1), .rst(reset));
    addfp32 add74258(.a(t974), .b(t979), .clk(clk), .out(t986), .enable(1'b1), .rst(reset));
    subfp32 sub74265(.a(t975), .b(t978), .clk(clk), .out(t987), .enable(1'b1), .rst(reset));
    subfp32 sub74272(.a(t974), .b(t979), .clk(clk), .out(t988), .enable(1'b1), .rst(reset));
    addfp32 add74279(.a(t975), .b(t978), .clk(clk), .out(t989), .enable(1'b1), .rst(reset));
    multfp32fp32 m73627(.a(tm0), .b(t940), .clk(clk), .out(a225), .enable(1'b1), .rst(reset));
    multfp32fp32 m73634(.a(tm0), .b(t941), .clk(clk), .out(a226), .enable(1'b1), .rst(reset));
    multfp32fp32 m73699(.a(tm2), .b(t944), .clk(clk), .out(a227), .enable(1'b1), .rst(reset));
    multfp32fp32 m73706(.a(tm3), .b(t945), .clk(clk), .out(a228), .enable(1'b1), .rst(reset));
    multfp32fp32 m73720(.a(tm2), .b(t945), .clk(clk), .out(a229), .enable(1'b1), .rst(reset));
    multfp32fp32 m73727(.a(tm3), .b(t944), .clk(clk), .out(a230), .enable(1'b1), .rst(reset));
    multfp32fp32 m73741(.a(tm3), .b(t946), .clk(clk), .out(a231), .enable(1'b1), .rst(reset));
    multfp32fp32 m73748(.a(tm2), .b(t947), .clk(clk), .out(a232), .enable(1'b1), .rst(reset));
    multfp32fp32 m73762(.a(tm3), .b(t947), .clk(clk), .out(a233), .enable(1'b1), .rst(reset));
    multfp32fp32 m73769(.a(tm2), .b(t946), .clk(clk), .out(a234), .enable(1'b1), .rst(reset));
    multfp32fp32 m73992(.a(tm0), .b(t964), .clk(clk), .out(a235), .enable(1'b1), .rst(reset));
    multfp32fp32 m73999(.a(tm0), .b(t965), .clk(clk), .out(a236), .enable(1'b1), .rst(reset));
    multfp32fp32 m74020(.a(tm0), .b(t967), .clk(clk), .out(a237), .enable(1'b1), .rst(reset));
    multfp32fp32 m74027(.a(tm0), .b(t966), .clk(clk), .out(a238), .enable(1'b1), .rst(reset));
    multfp32fp32 m74213(.a(tm0), .b(t983), .clk(clk), .out(a239), .enable(1'b1), .rst(reset));
    multfp32fp32 m74220(.a(tm0), .b(t982), .clk(clk), .out(a240), .enable(1'b1), .rst(reset));
    multfp32fp32 m74286(.a(tm3), .b(t986), .clk(clk), .out(a241), .enable(1'b1), .rst(reset));
    multfp32fp32 m74293(.a(tm2), .b(t987), .clk(clk), .out(a242), .enable(1'b1), .rst(reset));
    multfp32fp32 m74307(.a(tm3), .b(t987), .clk(clk), .out(a243), .enable(1'b1), .rst(reset));
    multfp32fp32 m74314(.a(tm2), .b(t986), .clk(clk), .out(a244), .enable(1'b1), .rst(reset));
    multfp32fp32 m74328(.a(tm2), .b(t988), .clk(clk), .out(a245), .enable(1'b1), .rst(reset));
    multfp32fp32 m74335(.a(tm3), .b(t989), .clk(clk), .out(a246), .enable(1'b1), .rst(reset));
    multfp32fp32 m74349(.a(tm3), .b(t988), .clk(clk), .out(a247), .enable(1'b1), .rst(reset));
    multfp32fp32 m74356(.a(tm2), .b(t989), .clk(clk), .out(a248), .enable(1'b1), .rst(reset));
    addfp32 add73641(.a(a225), .b(a226), .clk(clk), .out(t942), .enable(1'b1), .rst(reset));
    subfp32 sub73648(.a(a226), .b(a225), .clk(clk), .out(t943), .enable(1'b1), .rst(reset));
    addfp32 add73713(.a(a227), .b(a228), .clk(clk), .out(t948), .enable(1'b1), .rst(reset));
    subfp32 sub73734(.a(a229), .b(a230), .clk(clk), .out(t949), .enable(1'b1), .rst(reset));
    addfp32 add73755(.a(a231), .b(a232), .clk(clk), .out(t950), .enable(1'b1), .rst(reset));
    subfp32 sub73776(.a(a233), .b(a234), .clk(clk), .out(t951), .enable(1'b1), .rst(reset));
    addfp32 add74006(.a(a235), .b(a236), .clk(clk), .out(t968), .enable(1'b1), .rst(reset));
    subfp32 sub74013(.a(a236), .b(a235), .clk(clk), .out(t969), .enable(1'b1), .rst(reset));
    subfp32 sub74034(.a(a237), .b(a238), .clk(clk), .out(t970), .enable(1'b1), .rst(reset));
    addfp32 add74041(.a(a238), .b(a237), .clk(clk), .out(t971), .enable(1'b1), .rst(reset));
    subfp32 sub74227(.a(a239), .b(a240), .clk(clk), .out(t984), .enable(1'b1), .rst(reset));
    addfp32 add74234(.a(a240), .b(a239), .clk(clk), .out(t985), .enable(1'b1), .rst(reset));
    addfp32 add74300(.a(a241), .b(a242), .clk(clk), .out(t990), .enable(1'b1), .rst(reset));
    subfp32 sub74321(.a(a243), .b(a244), .clk(clk), .out(t991), .enable(1'b1), .rst(reset));
    addfp32 add74342(.a(a245), .b(a246), .clk(clk), .out(t992), .enable(1'b1), .rst(reset));
    subfp32 sub74363(.a(a247), .b(a248), .clk(clk), .out(t993), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         X16 <= X16_in;
         X17 <= X17_in;
         X18 <= X18_in;
         X19 <= X19_in;
         X20 <= X20_in;
         X21 <= X21_in;
         X22 <= X22_in;
         X23 <= X23_in;
         X24 <= X24_in;
         X25 <= X25_in;
         X26 <= X26_in;
         X27 <= X27_in;
         X28 <= X28_in;
         X29 <= X29_in;
         X30 <= X30_in;
         X31 <= X31_in;
         next <= next_in;
         tm24 <= t922;
         tm43 <= t923;
         tm62 <= t924;
         tm81 <= t925;
         tm100 <= t926;
         tm119 <= t927;
         tm138 <= t928;
         tm157 <= t929;
         tm176 <= t938;
         tm195 <= t939;
         tm214 <= t960;
         tm233 <= t961;
         tm252 <= t963;
         tm271 <= {~(t962[31]), t962[30:0]};
         tm290 <= t980;
         tm309 <= t981;
         tm25 <= tm24;
         tm44 <= tm43;
         tm63 <= tm62;
         tm82 <= tm81;
         tm101 <= tm100;
         tm120 <= tm119;
         tm139 <= tm138;
         tm158 <= tm157;
         tm177 <= tm176;
         tm196 <= tm195;
         tm215 <= tm214;
         tm234 <= tm233;
         tm253 <= tm252;
         tm272 <= tm271;
         tm291 <= tm290;
         tm310 <= tm309;
         tm26 <= tm25;
         tm45 <= tm44;
         tm64 <= tm63;
         tm83 <= tm82;
         tm102 <= tm101;
         tm121 <= tm120;
         tm140 <= tm139;
         tm159 <= tm158;
         tm178 <= tm177;
         tm197 <= tm196;
         tm216 <= tm215;
         tm235 <= tm234;
         tm254 <= tm253;
         tm273 <= tm272;
         tm292 <= tm291;
         tm311 <= tm310;
         tm27 <= tm26;
         tm46 <= tm45;
         tm65 <= tm64;
         tm84 <= tm83;
         tm103 <= tm102;
         tm122 <= tm121;
         tm141 <= tm140;
         tm160 <= tm159;
         tm179 <= tm178;
         tm198 <= tm197;
         tm217 <= tm216;
         tm236 <= tm235;
         tm255 <= tm254;
         tm274 <= tm273;
         tm293 <= tm292;
         tm312 <= tm311;
         tm28 <= tm27;
         tm47 <= tm46;
         tm66 <= tm65;
         tm85 <= tm84;
         tm104 <= tm103;
         tm123 <= tm122;
         tm142 <= tm141;
         tm161 <= tm160;
         tm180 <= tm179;
         tm199 <= tm198;
         tm218 <= tm217;
         tm237 <= tm236;
         tm256 <= tm255;
         tm275 <= tm274;
         tm294 <= tm293;
         tm313 <= tm312;
         tm29 <= tm28;
         tm48 <= tm47;
         tm67 <= tm66;
         tm86 <= tm85;
         tm105 <= tm104;
         tm124 <= tm123;
         tm143 <= tm142;
         tm162 <= tm161;
         tm181 <= tm180;
         tm200 <= tm199;
         tm219 <= tm218;
         tm238 <= tm237;
         tm257 <= tm256;
         tm276 <= tm275;
         tm295 <= tm294;
         tm314 <= tm313;
         tm30 <= tm29;
         tm49 <= tm48;
         tm68 <= tm67;
         tm87 <= tm86;
         tm106 <= tm105;
         tm125 <= tm124;
         tm144 <= tm143;
         tm163 <= tm162;
         tm182 <= tm181;
         tm201 <= tm200;
         tm220 <= tm219;
         tm239 <= tm238;
         tm258 <= tm257;
         tm277 <= tm276;
         tm296 <= tm295;
         tm315 <= tm314;
         tm31 <= tm30;
         tm50 <= tm49;
         tm69 <= tm68;
         tm88 <= tm87;
         tm107 <= tm106;
         tm126 <= tm125;
         tm145 <= tm144;
         tm164 <= tm163;
         tm183 <= tm182;
         tm202 <= tm201;
         tm221 <= tm220;
         tm240 <= tm239;
         tm259 <= tm258;
         tm278 <= tm277;
         tm297 <= tm296;
         tm316 <= tm315;
         tm32 <= tm31;
         tm51 <= tm50;
         tm70 <= tm69;
         tm89 <= tm88;
         tm108 <= tm107;
         tm127 <= tm126;
         tm146 <= tm145;
         tm165 <= tm164;
         tm184 <= tm183;
         tm203 <= tm202;
         tm222 <= tm221;
         tm241 <= tm240;
         tm260 <= tm259;
         tm279 <= tm278;
         tm298 <= tm297;
         tm317 <= tm316;
         tm33 <= tm32;
         tm52 <= tm51;
         tm71 <= tm70;
         tm90 <= tm89;
         tm109 <= tm108;
         tm128 <= tm127;
         tm147 <= tm146;
         tm166 <= tm165;
         tm185 <= tm184;
         tm204 <= tm203;
         tm223 <= tm222;
         tm242 <= tm241;
         tm261 <= tm260;
         tm280 <= tm279;
         tm299 <= tm298;
         tm318 <= tm317;
         tm34 <= tm33;
         tm53 <= tm52;
         tm72 <= tm71;
         tm91 <= tm90;
         tm110 <= tm109;
         tm129 <= tm128;
         tm148 <= tm147;
         tm167 <= tm166;
         tm186 <= tm185;
         tm205 <= tm204;
         tm224 <= tm223;
         tm243 <= tm242;
         tm262 <= tm261;
         tm281 <= tm280;
         tm300 <= tm299;
         tm319 <= tm318;
         tm35 <= tm34;
         tm54 <= tm53;
         tm73 <= tm72;
         tm92 <= tm91;
         tm111 <= tm110;
         tm130 <= tm129;
         tm149 <= tm148;
         tm168 <= tm167;
         tm187 <= tm186;
         tm206 <= tm205;
         tm225 <= tm224;
         tm244 <= tm243;
         tm263 <= tm262;
         tm282 <= tm281;
         tm301 <= tm300;
         tm320 <= tm319;
         tm36 <= tm35;
         tm55 <= tm54;
         tm74 <= tm73;
         tm93 <= tm92;
         tm112 <= tm111;
         tm131 <= tm130;
         tm150 <= tm149;
         tm169 <= tm168;
         tm188 <= tm187;
         tm207 <= tm206;
         tm226 <= tm225;
         tm245 <= tm244;
         tm264 <= tm263;
         tm283 <= tm282;
         tm302 <= tm301;
         tm321 <= tm320;
         tm37 <= tm36;
         tm56 <= tm55;
         tm75 <= tm74;
         tm94 <= tm93;
         tm113 <= tm112;
         tm132 <= tm131;
         tm151 <= tm150;
         tm170 <= tm169;
         tm189 <= tm188;
         tm208 <= tm207;
         tm227 <= tm226;
         tm246 <= tm245;
         tm265 <= tm264;
         tm284 <= tm283;
         tm303 <= tm302;
         tm322 <= tm321;
         tm38 <= tm37;
         tm57 <= tm56;
         tm76 <= tm75;
         tm95 <= tm94;
         tm114 <= tm113;
         tm133 <= tm132;
         tm152 <= tm151;
         tm171 <= tm170;
         tm190 <= tm189;
         tm209 <= tm208;
         tm228 <= tm227;
         tm247 <= tm246;
         tm266 <= tm265;
         tm285 <= tm284;
         tm304 <= tm303;
         tm323 <= tm322;
         tm39 <= tm38;
         tm58 <= tm57;
         tm77 <= tm76;
         tm96 <= tm95;
         tm115 <= tm114;
         tm134 <= tm133;
         tm153 <= tm152;
         tm172 <= tm171;
         tm191 <= tm190;
         tm210 <= tm209;
         tm229 <= tm228;
         tm248 <= tm247;
         tm267 <= tm266;
         tm286 <= tm285;
         tm305 <= tm304;
         tm324 <= tm323;
         tm40 <= tm39;
         tm59 <= tm58;
         tm78 <= tm77;
         tm97 <= tm96;
         tm116 <= tm115;
         tm135 <= tm134;
         tm154 <= tm153;
         tm173 <= tm172;
         tm192 <= tm191;
         tm211 <= tm210;
         tm230 <= tm229;
         tm249 <= tm248;
         tm268 <= tm267;
         tm287 <= tm286;
         tm306 <= tm305;
         tm325 <= tm324;
         tm41 <= tm40;
         tm60 <= tm59;
         tm79 <= tm78;
         tm98 <= tm97;
         tm117 <= tm116;
         tm136 <= tm135;
         tm155 <= tm154;
         tm174 <= tm173;
         tm193 <= tm192;
         tm212 <= tm211;
         tm231 <= tm230;
         tm250 <= tm249;
         tm269 <= tm268;
         tm288 <= tm287;
         tm307 <= tm306;
         tm326 <= tm325;
         tm42 <= tm41;
         tm61 <= tm60;
         tm80 <= tm79;
         tm99 <= tm98;
         tm118 <= tm117;
         tm137 <= tm136;
         tm156 <= tm155;
         tm175 <= tm174;
         tm194 <= tm193;
         tm213 <= tm212;
         tm232 <= tm231;
         tm251 <= tm250;
         tm270 <= tm269;
         tm289 <= tm288;
         tm308 <= tm307;
         tm327 <= tm326;
      end
   end
endmodule

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

// Latency: 23
// Gap: 1
module codeBlock74385(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15,
   X16_in, Y16,
   X17_in, Y17,
   X18_in, Y18,
   X19_in, Y19,
   X20_in, Y20,
   X21_in, Y21,
   X22_in, Y22,
   X23_in, Y23,
   X24_in, Y24,
   X25_in, Y25,
   X26_in, Y26,
   X27_in, Y27,
   X28_in, Y28,
   X29_in, Y29,
   X30_in, Y30,
   X31_in, Y31);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in,
      X16_in,
      X17_in,
      X18_in,
      X19_in,
      X20_in,
      X21_in,
      X22_in,
      X23_in,
      X24_in,
      X25_in,
      X26_in,
      X27_in,
      X28_in,
      X29_in,
      X30_in,
      X31_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   shiftRegFIFO #(22, 1) shiftFIFO_76441(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a65;
   wire signed [31:0] a66;
   wire signed [31:0] a67;
   wire signed [31:0] a68;
   wire signed [31:0] a73;
   wire signed [31:0] a74;
   wire signed [31:0] a75;
   wire signed [31:0] a76;
   wire signed [31:0] a81;
   wire signed [31:0] a82;
   wire signed [31:0] a83;
   wire signed [31:0] a84;
   wire signed [31:0] a89;
   wire signed [31:0] a90;
   wire signed [31:0] a91;
   wire signed [31:0] a92;
   wire signed [31:0] a97;
   wire signed [31:0] a98;
   wire signed [31:0] a99;
   wire signed [31:0] a100;
   wire signed [31:0] a105;
   wire signed [31:0] a106;
   wire signed [31:0] a107;
   wire signed [31:0] a108;
   wire signed [31:0] a113;
   wire signed [31:0] a114;
   wire signed [31:0] a115;
   wire signed [31:0] a116;
   wire signed [31:0] a121;
   wire signed [31:0] a122;
   wire signed [31:0] a123;
   wire signed [31:0] a124;
   wire  [31:0] t402;
   wire  [31:0] t403;
   wire  [31:0] t404;
   wire  [31:0] t405;
   wire  [31:0] t406;
   wire  [31:0] t407;
   wire  [31:0] t408;
   wire  [31:0] t409;
   wire  [31:0] t418;
   wire  [31:0] t419;
   wire  [31:0] t420;
   wire  [31:0] t421;
   wire  [31:0] t422;
   wire  [31:0] t423;
   wire  [31:0] t424;
   wire  [31:0] t425;
   wire  [31:0] t434;
   wire  [31:0] t435;
   wire  [31:0] t436;
   wire  [31:0] t437;
   wire  [31:0] t438;
   wire  [31:0] t439;
   wire  [31:0] t440;
   wire  [31:0] t441;
   wire  [31:0] t450;
   wire  [31:0] t451;
   wire  [31:0] t452;
   wire  [31:0] t453;
   wire  [31:0] t454;
   wire  [31:0] t455;
   wire  [31:0] t456;
   wire  [31:0] t457;
   wire  [31:0] t410;
   wire  [31:0] t411;
   wire  [31:0] t412;
   wire  [31:0] t413;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y16;
   wire signed [31:0] Y17;
   wire  [31:0] t414;
   wire  [31:0] t415;
   wire  [31:0] t416;
   wire  [31:0] t417;
   wire signed [31:0] Y8;
   wire signed [31:0] Y9;
   wire signed [31:0] Y24;
   wire signed [31:0] Y25;
   wire  [31:0] t426;
   wire  [31:0] t427;
   wire  [31:0] t428;
   wire  [31:0] t429;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;
   wire signed [31:0] Y18;
   wire signed [31:0] Y19;
   wire  [31:0] t430;
   wire  [31:0] t431;
   wire  [31:0] t432;
   wire  [31:0] t433;
   wire signed [31:0] Y10;
   wire signed [31:0] Y11;
   wire signed [31:0] Y26;
   wire signed [31:0] Y27;
   wire  [31:0] t442;
   wire  [31:0] t443;
   wire  [31:0] t444;
   wire  [31:0] t445;
   wire signed [31:0] Y4;
   wire signed [31:0] Y5;
   wire signed [31:0] Y20;
   wire signed [31:0] Y21;
   wire  [31:0] t446;
   wire  [31:0] t447;
   wire  [31:0] t448;
   wire  [31:0] t449;
   wire signed [31:0] Y12;
   wire signed [31:0] Y13;
   wire signed [31:0] Y28;
   wire signed [31:0] Y29;
   wire  [31:0] t458;
   wire  [31:0] t459;
   wire  [31:0] t460;
   wire  [31:0] t461;
   wire signed [31:0] Y6;
   wire signed [31:0] Y7;
   wire signed [31:0] Y22;
   wire signed [31:0] Y23;
   wire  [31:0] t462;
   wire  [31:0] t463;
   wire  [31:0] t464;
   wire  [31:0] t465;
   wire signed [31:0] Y14;
   wire signed [31:0] Y15;
   wire signed [31:0] Y30;
   wire signed [31:0] Y31;


   assign a65 = X0;
   assign a66 = X16;
   assign a67 = X1;
   assign a68 = X17;
   assign a73 = X8;
   assign a74 = X24;
   assign a75 = X9;
   assign a76 = X25;
   assign a81 = X2;
   assign a82 = X18;
   assign a83 = X3;
   assign a84 = X19;
   assign a89 = X10;
   assign a90 = X26;
   assign a91 = X11;
   assign a92 = X27;
   assign a97 = X4;
   assign a98 = X20;
   assign a99 = X5;
   assign a100 = X21;
   assign a105 = X12;
   assign a106 = X28;
   assign a107 = X13;
   assign a108 = X29;
   assign a113 = X6;
   assign a114 = X22;
   assign a115 = X7;
   assign a116 = X23;
   assign a121 = X14;
   assign a122 = X30;
   assign a123 = X15;
   assign a124 = X31;
   assign Y0 = t410;
   assign Y1 = t411;
   assign Y16 = t412;
   assign Y17 = t413;
   assign Y8 = t414;
   assign Y9 = t415;
   assign Y24 = t416;
   assign Y25 = t417;
   assign Y2 = t426;
   assign Y3 = t427;
   assign Y18 = t428;
   assign Y19 = t429;
   assign Y10 = t430;
   assign Y11 = t431;
   assign Y26 = t432;
   assign Y27 = t433;
   assign Y4 = t442;
   assign Y5 = t443;
   assign Y20 = t444;
   assign Y21 = t445;
   assign Y12 = t446;
   assign Y13 = t447;
   assign Y28 = t448;
   assign Y29 = t449;
   assign Y6 = t458;
   assign Y7 = t459;
   assign Y22 = t460;
   assign Y23 = t461;
   assign Y14 = t462;
   assign Y15 = t463;
   assign Y30 = t464;
   assign Y31 = t465;

    addfp32 add74397(.a(a65), .b(a66), .clk(clk), .out(t402), .enable(1'b1), .rst(reset));
    addfp32 add74412(.a(a67), .b(a68), .clk(clk), .out(t403), .enable(1'b1), .rst(reset));
    subfp32 sub74427(.a(a65), .b(a66), .clk(clk), .out(t404), .enable(1'b1), .rst(reset));
    subfp32 sub74442(.a(a67), .b(a68), .clk(clk), .out(t405), .enable(1'b1), .rst(reset));
    addfp32 add74457(.a(a73), .b(a74), .clk(clk), .out(t406), .enable(1'b1), .rst(reset));
    addfp32 add74472(.a(a75), .b(a76), .clk(clk), .out(t407), .enable(1'b1), .rst(reset));
    subfp32 sub74487(.a(a73), .b(a74), .clk(clk), .out(t408), .enable(1'b1), .rst(reset));
    subfp32 sub74502(.a(a75), .b(a76), .clk(clk), .out(t409), .enable(1'b1), .rst(reset));
    addfp32 add74605(.a(a81), .b(a82), .clk(clk), .out(t418), .enable(1'b1), .rst(reset));
    addfp32 add74620(.a(a83), .b(a84), .clk(clk), .out(t419), .enable(1'b1), .rst(reset));
    subfp32 sub74635(.a(a81), .b(a82), .clk(clk), .out(t420), .enable(1'b1), .rst(reset));
    subfp32 sub74650(.a(a83), .b(a84), .clk(clk), .out(t421), .enable(1'b1), .rst(reset));
    addfp32 add74665(.a(a89), .b(a90), .clk(clk), .out(t422), .enable(1'b1), .rst(reset));
    addfp32 add74680(.a(a91), .b(a92), .clk(clk), .out(t423), .enable(1'b1), .rst(reset));
    subfp32 sub74695(.a(a89), .b(a90), .clk(clk), .out(t424), .enable(1'b1), .rst(reset));
    subfp32 sub74710(.a(a91), .b(a92), .clk(clk), .out(t425), .enable(1'b1), .rst(reset));
    addfp32 add74813(.a(a97), .b(a98), .clk(clk), .out(t434), .enable(1'b1), .rst(reset));
    addfp32 add74828(.a(a99), .b(a100), .clk(clk), .out(t435), .enable(1'b1), .rst(reset));
    subfp32 sub74843(.a(a97), .b(a98), .clk(clk), .out(t436), .enable(1'b1), .rst(reset));
    subfp32 sub74858(.a(a99), .b(a100), .clk(clk), .out(t437), .enable(1'b1), .rst(reset));
    addfp32 add74873(.a(a105), .b(a106), .clk(clk), .out(t438), .enable(1'b1), .rst(reset));
    addfp32 add74888(.a(a107), .b(a108), .clk(clk), .out(t439), .enable(1'b1), .rst(reset));
    subfp32 sub74903(.a(a105), .b(a106), .clk(clk), .out(t440), .enable(1'b1), .rst(reset));
    subfp32 sub74918(.a(a107), .b(a108), .clk(clk), .out(t441), .enable(1'b1), .rst(reset));
    addfp32 add75021(.a(a113), .b(a114), .clk(clk), .out(t450), .enable(1'b1), .rst(reset));
    addfp32 add75036(.a(a115), .b(a116), .clk(clk), .out(t451), .enable(1'b1), .rst(reset));
    subfp32 sub75051(.a(a113), .b(a114), .clk(clk), .out(t452), .enable(1'b1), .rst(reset));
    subfp32 sub75066(.a(a115), .b(a116), .clk(clk), .out(t453), .enable(1'b1), .rst(reset));
    addfp32 add75081(.a(a121), .b(a122), .clk(clk), .out(t454), .enable(1'b1), .rst(reset));
    addfp32 add75096(.a(a123), .b(a124), .clk(clk), .out(t455), .enable(1'b1), .rst(reset));
    subfp32 sub75111(.a(a121), .b(a122), .clk(clk), .out(t456), .enable(1'b1), .rst(reset));
    subfp32 sub75126(.a(a123), .b(a124), .clk(clk), .out(t457), .enable(1'b1), .rst(reset));
    addfp32 add74509(.a(t402), .b(t406), .clk(clk), .out(t410), .enable(1'b1), .rst(reset));
    addfp32 add74516(.a(t403), .b(t407), .clk(clk), .out(t411), .enable(1'b1), .rst(reset));
    subfp32 sub74523(.a(t402), .b(t406), .clk(clk), .out(t412), .enable(1'b1), .rst(reset));
    subfp32 sub74530(.a(t403), .b(t407), .clk(clk), .out(t413), .enable(1'b1), .rst(reset));
    addfp32 add74553(.a(t404), .b(t409), .clk(clk), .out(t414), .enable(1'b1), .rst(reset));
    subfp32 sub74560(.a(t405), .b(t408), .clk(clk), .out(t415), .enable(1'b1), .rst(reset));
    subfp32 sub74567(.a(t404), .b(t409), .clk(clk), .out(t416), .enable(1'b1), .rst(reset));
    addfp32 add74574(.a(t405), .b(t408), .clk(clk), .out(t417), .enable(1'b1), .rst(reset));
    addfp32 add74717(.a(t418), .b(t422), .clk(clk), .out(t426), .enable(1'b1), .rst(reset));
    addfp32 add74724(.a(t419), .b(t423), .clk(clk), .out(t427), .enable(1'b1), .rst(reset));
    subfp32 sub74731(.a(t418), .b(t422), .clk(clk), .out(t428), .enable(1'b1), .rst(reset));
    subfp32 sub74738(.a(t419), .b(t423), .clk(clk), .out(t429), .enable(1'b1), .rst(reset));
    addfp32 add74761(.a(t420), .b(t425), .clk(clk), .out(t430), .enable(1'b1), .rst(reset));
    subfp32 sub74768(.a(t421), .b(t424), .clk(clk), .out(t431), .enable(1'b1), .rst(reset));
    subfp32 sub74775(.a(t420), .b(t425), .clk(clk), .out(t432), .enable(1'b1), .rst(reset));
    addfp32 add74782(.a(t421), .b(t424), .clk(clk), .out(t433), .enable(1'b1), .rst(reset));
    addfp32 add74925(.a(t434), .b(t438), .clk(clk), .out(t442), .enable(1'b1), .rst(reset));
    addfp32 add74932(.a(t435), .b(t439), .clk(clk), .out(t443), .enable(1'b1), .rst(reset));
    subfp32 sub74939(.a(t434), .b(t438), .clk(clk), .out(t444), .enable(1'b1), .rst(reset));
    subfp32 sub74946(.a(t435), .b(t439), .clk(clk), .out(t445), .enable(1'b1), .rst(reset));
    addfp32 add74969(.a(t436), .b(t441), .clk(clk), .out(t446), .enable(1'b1), .rst(reset));
    subfp32 sub74976(.a(t437), .b(t440), .clk(clk), .out(t447), .enable(1'b1), .rst(reset));
    subfp32 sub74983(.a(t436), .b(t441), .clk(clk), .out(t448), .enable(1'b1), .rst(reset));
    addfp32 add74990(.a(t437), .b(t440), .clk(clk), .out(t449), .enable(1'b1), .rst(reset));
    addfp32 add75133(.a(t450), .b(t454), .clk(clk), .out(t458), .enable(1'b1), .rst(reset));
    addfp32 add75140(.a(t451), .b(t455), .clk(clk), .out(t459), .enable(1'b1), .rst(reset));
    subfp32 sub75147(.a(t450), .b(t454), .clk(clk), .out(t460), .enable(1'b1), .rst(reset));
    subfp32 sub75154(.a(t451), .b(t455), .clk(clk), .out(t461), .enable(1'b1), .rst(reset));
    addfp32 add75177(.a(t452), .b(t457), .clk(clk), .out(t462), .enable(1'b1), .rst(reset));
    subfp32 sub75184(.a(t453), .b(t456), .clk(clk), .out(t463), .enable(1'b1), .rst(reset));
    subfp32 sub75191(.a(t452), .b(t457), .clk(clk), .out(t464), .enable(1'b1), .rst(reset));
    addfp32 add75198(.a(t453), .b(t456), .clk(clk), .out(t465), .enable(1'b1), .rst(reset));


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         X16 <= X16_in;
         X17 <= X17_in;
         X18 <= X18_in;
         X19 <= X19_in;
         X20 <= X20_in;
         X21 <= X21_in;
         X22 <= X22_in;
         X23 <= X23_in;
         X24 <= X24_in;
         X25 <= X25_in;
         X26 <= X26_in;
         X27 <= X27_in;
         X28 <= X28_in;
         X29 <= X29_in;
         X30 <= X30_in;
         X31 <= X31_in;
         next <= next_in;
      end
   end
endmodule


module multfp32fp32(clk, enable, rst, a, b, out);
   input [31:0] a, b;
   output [31:0] out;
   input 	clk, enable, rst;

   wire signA, signB; 
   wire [7:0] expA, expB;
   wire [23:0] sigA, sigB;

   assign signA=b[31];
   assign expA=b[30:23];
   assign sigA={1'b1,b[22:0]};

   assign signB=a[31];
   assign expB=a[30:23];
   assign sigB={1'b1,a[22:0]};
   
   reg 	  signP_m0;
   reg [8:0] expP_m0;

   wire [47:0] mult_res0;
   
   
   multfxp24fxp24 mult(clk, enable, rst, sigA, sigB, mult_res0);

   reg 	       isNaN_a0, isNaN_b0, isZero_a0, isZero_b0, isInf_a0, isInf_b0;   

   wire        sigAZero, sigBZero;
   
   assign      sigAZero = (sigA[22:0] == 0);
   assign      sigBZero = (sigB[22:0] == 0);
      
   // stage 1 mult stage 1
   always@(posedge clk) if (enable) begin
      isNaN_a0 <= (expA == 8'hff) && !sigAZero;
      isNaN_b0 <= (expB == 8'hff) && !sigBZero;

      isZero_a0 <= (expA == 8'h00);
      isZero_b0 <= (expB == 8'h00);

      isInf_a0 <= (expA == 8'hff) && sigAZero;
      isInf_b0 <= (expB == 8'hff) && sigBZero;
      
      signP_m0<=signA!=signB;
      expP_m0<=expA + expB;
   end 

   reg signP_m1, zero_m1, inf_m1, nan_m1, under_m1;
   reg [8:0] expP_m1;

   // stage 2 mult stage 2
   always@(posedge clk) if (enable) begin
      zero_m1 <= isZero_a0 || isZero_b0;
      inf_m1 <= isInf_a0 || isInf_b0;
      nan_m1 <= isNaN_a0 || isNaN_b0;
      under_m1 <= (expP_m0 < 128);      
      
      signP_m1<=signP_m0;      
      expP_m1<=expP_m0 - 127;      
   end 

   reg signP_m2, zero_m2, inf_m2, nan_m2; 
   reg [8:0] expP_m2;

   // stage 3 mult stage 3
   always@(posedge clk) if (enable) begin
      zero_m2 <= zero_m1 || under_m1;
      inf_m2 <= (inf_m1 || (expP_m1[8] && ~under_m1));
      nan_m2 <= nan_m1 || (zero_m1 && inf_m1); // 0 * infty = NaN
            
      signP_m2<=signP_m1;      
      expP_m2<=expP_m1;
   end 

   reg signP_m3, zero_m3, inf_m3, nan_m3; 
   reg [8:0] expP_m3;

   // stage 4 mult stage 4
   always@(posedge clk) if (enable) begin
      zero_m3 <= zero_m2;
      inf_m3 <= (inf_m2 || (expP_m2 == 9'h0ff));
      nan_m3 <= nan_m2;
      
      signP_m3<=signP_m2;
      expP_m3<=expP_m2;
   end 

   reg signP_m4, zero_m4, inf_m4, nan_m4; 
   reg [8:0] expP_m4;

   // stage 5 mult stage 5
   always@(posedge clk) if (enable) begin
      zero_m4 <= zero_m3;
      inf_m4 <= inf_m3;
      nan_m4 <= nan_m3;
      
      signP_m4<=signP_m3;      
      expP_m4<=expP_m3;      
   end 

   reg signP_m5, zero_m5, inf_m5, nan_m5;
   reg [8:0] expP_m5;

   
   // stage 6 mult stage 6
   always@(posedge clk) if (enable) begin
      zero_m5 <= zero_m4;
      inf_m5 <= inf_m4;
      nan_m5 <= nan_m4;
      
      signP_m5<=signP_m4;      
      expP_m5 <= expP_m4;
      
   end

   reg signP_m6, zero_m6, inf_m6, nan_m6;   
   reg [8:0] expP_m6;
   reg [23:0] sig_m6;

   // stage 7 --  mult output here!
   // normalize product
   always@(posedge clk) if (enable) begin

      zero_m6 <= (zero_m5 || (mult_res0[47:23] == 0));
      nan_m6 <= nan_m5;      
      
      signP_m6<=signP_m5;      

      if (mult_res0[47] == 1'b1) begin
	 expP_m6<=expP_m5+1;
	 sig_m6 <= mult_res0[47:24];
	 inf_m6 <= (inf_m5 || (expP_m5 == 9'h0ff));	 
      end
      else begin
	 expP_m6 <= expP_m5;
	 sig_m6 <= mult_res0[46:23];
	 inf_m6 <= inf_m5;	 
      end	 
   end

   reg signP_m7;
   reg [7:0] expP_m7;
   reg [22:0] sig_m7;
   
   // stage 8: cleanup
   always@(posedge clk) if (enable) begin
      signP_m7 <= signP_m6;

      if (inf_m6 || nan_m6)
	expP_m7 <= 8'hff;
      else if (zero_m6)
	expP_m7 <= 8'h00;
      else
	expP_m7 <= expP_m6;

      if (nan_m6)
	sig_m7 <= 1;
      else if (zero_m6 || inf_m6)
	sig_m7 <= 0;
      else
	sig_m7 <= sig_m6[22:0];      
   end

   assign out = {signP_m7, expP_m7, sig_m7};   
   
endmodule


module multfxp24fxp24(clk, enable, rst, a, b, out);
        parameter WIDTH=24, CYCLES=6;
        input  [WIDTH-1:0]   a,b;
        output [2*WIDTH-1:0] out;
        input                clk, rst,enable;
        reg [2*WIDTH-1:0]    q[CYCLES-1:0];
        integer              i;

        assign               out = q[CYCLES-1];   

        always @(posedge clk) begin
                q[0] <= a * b;
                for (i = 1; i < CYCLES; i=i+1) begin
                        q[i] <= q[i-1];
                end
        end
endmodule 


module subfp32(clk, enable, rst,  a, b, out);

   input [31:0] a, b;
   output [31:0] out;
   input 	 clk, enable, rst;	

   addfp32 xyz(.clk(clk), .enable(enable), .rst(rst),  .a(a), .b(b^32'h80000000), .out(out));
endmodule

module addfp32(clk, enable, rst,  a, b, out);

   input [31:0] a, b;
   output [31:0] out;
   input 	 clk, enable, rst;	

   wire [7:0] expA;
   wire [23:0] sigA;

   assign expA=a[30:23];
   assign sigA={1'b1,a[22:0]};
	
   wire [7:0] expB;
   wire [23:0] sigB;

   assign expB=b[30:23];
   assign sigB={1'b1,b[22:0]};

   reg [31:0] Big, Small;
   reg [7:0] expDiff;

   // stage 1 swap A, B
   always@(posedge clk) if (enable) begin
     if (expA>expB) begin
	// A has larger exp
        Big<=a;
	     Small<=b;
        expDiff<=expA-expB;
     end else if (expA==expB) begin
        if (sigA>=sigB) begin
	  // A has larger sig
          Big<=a;
	       Small<=b;
          expDiff<=expA-expB;
        end else begin
          Small<=a;
	       Big<=b;
          expDiff<=expB-expA;
        end
     end else begin
        Small<=a;
        Big<=b;
        expDiff<=expB-expA;
     end
  end

  wire signBig; 
  wire [7:0] expBig;
  wire [23:0] sigBig;

  assign signBig=Big[31];
  assign expBig=Big[30:23];
  assign sigBig=(expBig!=0)?{1'b1,Big[22:0]}:0;

  wire signSmall; 
  wire [7:0] expSmall;
  wire [23:0] sigSmall;

  assign signSmall=Small[31];
  assign expSmall=Small[30:23];
  assign sigSmall=(expDiff[7:5]||(expSmall==0))?0:(expDiff[4]?{16'h0000,1'b1,Small[22:16]}:{1'b1,Small[22:0]});

  reg signSum_a0; 
  reg [7:0] expSum_a0;
  reg [23:0] sigBig_a0;
  reg [23:0] sigSmall_a0;
  reg [3:0] expDiff_a0;
  reg add_a0;

  // stage 2 align addend coarse part 1 
  always@(posedge clk) if (enable) begin
    signSum_a0<=signBig;
    expSum_a0<=expBig;
    sigBig_a0<=sigBig;
    sigSmall_a0<=sigSmall;
    expDiff_a0<=expDiff[3:0];
    add_a0<=signSmall==signBig;
  end

  reg signSum_a1; 
  reg [7:0] expSum_a1;
  reg [23:0] sigBig_a1;
  reg [23:0] sigSmall_a1;
  reg [1:0] expDiff_a1;
  reg add_a1;

  // stage 3  align addend fine part 2
  always@(posedge clk) if (enable) begin
    signSum_a1<=signSum_a0;
    expSum_a1<=expSum_a0;
    sigBig_a1<=sigBig_a0;
    expDiff_a1<=expDiff_a0;
    add_a1<=add_a0;

    if (expDiff_a0[3:2]==2'b11) begin
      sigSmall_a1<={12'h000,sigSmall_a0[23:12]};
    end else if (expDiff_a0[3:2]==2'b10) begin
      sigSmall_a1<={8'h00,sigSmall_a0[23:8]};
    end else if (expDiff_a0[3:2]==2'b01) begin
      sigSmall_a1<={4'h0,sigSmall_a0[23:4]};
    end else begin 
      sigSmall_a1<=sigSmall_a0;
    end
  end


  reg signSum_a2; 
  reg [7:0] expSum_a2;
  reg [23:0] sigBig_a2;
  reg [23:0] sigSmall_a2;
  reg add_a2;

  // stage 4  align addend finest part 3
  always@(posedge clk) if (enable) begin
    signSum_a2<=signSum_a1;
    expSum_a2<=expSum_a1;
    sigBig_a2<=sigBig_a1;
    add_a2<=add_a1;

    if (expDiff_a1[1:0]==2'b11) begin
      sigSmall_a2<={3'h0,sigSmall_a1[23:3]};
    end else if (expDiff_a1[1:0]==2'b10) begin
      sigSmall_a2<={2'h0,sigSmall_a1[23:2]};
    end else if (expDiff_a1[1:0]==2'b01) begin
      sigSmall_a2<={1'h0,sigSmall_a1[23:1]};
    end else begin 
      sigSmall_a2<=sigSmall_a1;
    end
  end

  reg signSum_s0; 
  reg [8:0] expSum_s0;
  reg [24:0] sigSum_s0;
  reg of_s0;

  // stage 5  do addition/substraction
  always@(posedge clk) if (enable) begin
    signSum_s0<=signSum_a2;
    expSum_s0<={1'b0,expSum_a2};
    of_s0<=(expSum_a2==8'hff)?1:0;

    if (add_a2) begin 
      sigSum_s0<={1'b0,sigBig_a2}+{1'b0,sigSmall_a2};
    end else begin
      sigSum_s0<={1'b0,sigBig_a2}-{1'b0,sigSmall_a2};
    end
  end


  reg signSum_n0; 
  reg [8:0] expSum_n0;
  reg [23:0] sigSum_n0;
  reg of_n0;
  
  // stage 6  renormalize after add
  always@(posedge clk) if (enable) begin
    signSum_n0<=signSum_s0;
    if (sigSum_s0[24] && (!of_s0)) begin
      expSum_n0<=expSum_s0+1;
      sigSum_n0<=sigSum_s0[24:1];
      of_n0<=(expSum_s0==9'h0fe);
    end else begin
      expSum_n0<=expSum_s0;
      sigSum_n0<=sigSum_s0[23:0];
      of_n0<=of_s0;
    end
  end 

  reg signSum_n1; 
  reg [8:0] expSum_n1;
  reg [23:0] sigSum_n1;
  reg of_n1;

  // stage 7  renormalized after subtract coarse
  always@(posedge clk) if (enable) begin
    signSum_n1<=signSum_n0;
    of_n1<=of_n0;    

    if (sigSum_n0[23:16]==8'h00) begin
      expSum_n1<=expSum_n0-8;
      sigSum_n1<={sigSum_n0[16:0],8'h00};
    end else begin
      expSum_n1<=expSum_n0;
      sigSum_n1<=sigSum_n0;
    end
  end 

  reg signSum_n2; 
  reg [8:0] expSum_n2;
  reg [23:0] sigSum_n2;
  reg of_n2;

  // stage 8  
  always@(posedge clk) if (enable) begin
    signSum_n2<=signSum_n1;
    of_n2<=of_n1;

    if (sigSum_n1[23:16]==8'h00) begin
      expSum_n2<=expSum_n1-8;
      sigSum_n2<={sigSum_n1[16:0],8'h00};
    end else begin
      expSum_n2<=expSum_n1;
      sigSum_n2<=sigSum_n1;
    end
  end 

  reg signSum_n3; 
  reg [8:0] expSum_n3;
  reg [23:0] sigSum_n3;
  reg of_n3;

  // stage 9  
  always@(posedge clk) if (enable) begin
    signSum_n3<=signSum_n2;
    of_n3<=of_n2;

    if (sigSum_n2[23:20]==4'h0) begin
      expSum_n3<=expSum_n2-4;
      sigSum_n3<={sigSum_n2[20:0],4'h0};
    end else begin
      expSum_n3<=expSum_n2;
      sigSum_n3<=sigSum_n2;
    end
  end 


  reg signSum_n4; 
  reg [8:0] expSum_n4;
  reg [23:0] sigSum_n4;
  reg of_n4;

  // stage 10  
  always@(posedge clk) if (enable) begin
    signSum_n4<=signSum_n3;
    of_n4<=of_n3;

    if (sigSum_n3[23:20]==4'h0) begin
      expSum_n4<=expSum_n3-4;
      sigSum_n4<={sigSum_n3[20:0],4'h0};
    end else if (sigSum_n3[23:21]==3'b000) begin
      expSum_n4<=expSum_n3-3;
      sigSum_n4<={sigSum_n3[21:0],3'h0};
    end else if (sigSum_n3[23:22]==2'b00) begin
      expSum_n4<=expSum_n3-2;
      sigSum_n4<={sigSum_n3[22:0],2'h0};
    end else if (sigSum_n3[23]==1'b0) begin
      expSum_n4<=expSum_n3-1;
      sigSum_n4<={sigSum_n3[22:0],1'h0};
    end else begin
      expSum_n4<=expSum_n3;
      sigSum_n4<=sigSum_n3;
    end
  end 

  reg signSum_f0; 
  reg [7:0] expSum_f0;
  reg [23:0] sigSum_f0;

  // stage 11 clean-up
  always@(posedge clk) if (enable) begin
    signSum_f0<=signSum_n4;

    if (of_n4) begin 
      expSum_f0<=8'hff;
      sigSum_f0<=0;
    end else if (expSum_n4[8]||(expSum_n4==0)||(sigSum_n4==0)) begin
      expSum_f0<=8'h00;
      sigSum_f0<=0;
    end else begin
      expSum_f0<=expSum_n4[7:0];
      sigSum_f0<=sigSum_n4;
    end
  end  

  assign out={signSum_f0, expSum_f0, sigSum_f0[22:0]};

endmodule
module addfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule