import "primitives/state.fil";
import "primitives/core.fil";

comp Window[N, W]<'G: 1>(
    in: ['G, 'G+1] W,
) -> (
    out[N+1]: for<k> ['G, 'G+1] W
) {
    bundle f[N+1]: for<k> ['G, 'G+1] W;

    f{0} = in;
    out{0} = f{0};
    for i in 0..N {
        d := new ContPrev[W, 1]<'G>(f{i});
        f{i+1} = d.prev;
        out{i+1} = f{i+1};
    }
}

/// Combinationally add up numbers
comp CombReduceTree[N, W]<'G: 1>(
    in[N]: for<k> ['G, 'G+1] W
) -> (
    out: ['G, 'G+1] W
) where W > 0 {
    // Track the output from each adder
    bundle o[N]: for<k> ['G, 'G+1] W;
    o{0} = in{0};
    for i in 1..N {
        a := new Add[W]<'G>(o{i-1}, in{i});
        o{i} = a.out;
    }
    out = o{N-1};
}

comp MovingSum[N, W]<'G: 1>(
    in: ['G, 'G+1] W
) -> (
    out: ['G, 'G+1] W
) where W > 0 {
    w := new Window[N, W]<'G>(in);
    r := new CombReduceTree[N, W]<'G>(w.out{1..N+1});
    out = r.out;
}

comp main<'G: 1>(in: ['G, 'G+1] 32) -> (out2: ['G, 'G+1] 32, out3: ['G, 'G+1]  32, out5: ['G, 'G+1] 32) {
    avg2 := new MovingSum[2, 32]<'G>(in);
    out2 = avg2.out;

    avg3 := new MovingSum[3, 32]<'G>(in);
    out3 = avg3.out;

    avg5 := new MovingSum[5, 32]<'G>(in);
    out5 = avg5.out;
}