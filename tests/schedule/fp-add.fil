/**
 * Defines combinational floating point math operations
 */
import "primitives/comb.fil";
import "primitives/signed.fil";

/// Extracts the sign bit, exponent bits, and mantissa from a floating point number.
/// Asserts that WIDTH = EXPONENT+MANTISSA+1
comp _FDecompose[WIDTH, EXPONENT, MANTISSA]<'G: 1> (
     in: ['G, 'G+1] WIDTH
) -> (
     sign: ['G, 'G+1] 1,
     exponent: ['G, 'G+1] EXPONENT,
     mantissa: ['G, 'G+1] MANTISSA
) where
    WIDTH == EXPONENT + MANTISSA + 1,
    EXPONENT > 1,
    MANTISSA > 1
{
    sign_slice := new Select[WIDTH, WIDTH-1]<'G, 'G+1>(in);
    sign = sign_slice.out;
    exponent_slice := new Slice[WIDTH, WIDTH-2, MANTISSA, EXPONENT]<'G, 'G+1>(in);
    exponent = exponent_slice.out;
    mantissa_slice := new Slice[WIDTH, MANTISSA-1, 0, MANTISSA]<'G, 'G+1>(in);
    mantissa = mantissa_slice.out;
}

/// Combines components into a single float
comp _FCompose[WIDTH, EXPONENT, MANTISSA]<'G: 1> (
     sign: ['G, 'G+1] 1,
     exponent: ['G, 'G+1] EXPONENT,
     mantissa: ['G, 'G+1] MANTISSA
) -> (
     out: ['G, 'G+1] WIDTH
) where
    WIDTH == EXPONENT + MANTISSA + 1,
    EXPONENT > 1,
    MANTISSA > 1
{
    first := new Concat[1, EXPONENT, 1+EXPONENT]<'G, 'G+1>(sign, exponent);
    second := new Concat[1+EXPONENT, MANTISSA, WIDTH]<'G, 'G+1>(first.out, mantissa);
    out = second.out;
}

/// Adds two floating point numbers
#[schedule=1]
comp main[?WIDTH=32, ?EXPONENT=8, ?MANTISSA=23]<'G: 1> (
    go: interface['G],
    left: ['G, 'G+1] WIDTH,
    right: ['G, 'G+1] WIDTH,
) -> (
    out: ['G+L, 'G+L+1] WIDTH
) with {
    some L where L >= 0;
} where
    WIDTH == EXPONENT + MANTISSA + 1,
    EXPONENT > 1,
    MANTISSA > 1
{
     //// comb stage 1 ////
    left := new _FDecompose[WIDTH, EXPONENT, MANTISSA]<'G>(left);
    right := new _FDecompose[WIDTH, EXPONENT, MANTISSA]<'G>(right);

    _one := new Const[1, 1]<'G+?>();

    _esub_l_r := new Sub[EXPONENT, WIDTH]<'G>(left.exponent, right.exponent);
    _esub_r_l := new Sub[EXPONENT, WIDTH]<'G>(right.exponent, left.exponent); // negate esub
    _control_gt := new Gt[EXPONENT]<'G>(left.exponent, right.exponent);
    _num_shift := new Mux[WIDTH]<'G+?>(_control_gt.out, _esub_l_r.out, _esub_r_l.out);
    larger_exp := new Mux[EXPONENT]<'G+?>(_control_gt.out, left.exponent, right.exponent);
    large_mantissa := new Mux[MANTISSA]<'G+?>(_control_gt.out, left.mantissa, right.mantissa);
    small_mantissa := new Mux[MANTISSA]<'G+?>(_control_gt.out, right.mantissa, left.mantissa);


    _zero_exp := new Const[EXPONENT, 0]<'G+?>();
    __control_2_a := new Neq[EXPONENT]<'G+?>(left.exponent, _zero_exp.out);
    __control_2_b := new Neq[EXPONENT]<'G+?>(right.exponent, _zero_exp.out);
    _control_2 := new And[1]<'G+?>(__control_2_a.out, __control_2_b.out);
    _zero_width := new Const[WIDTH, 0]<'G+?>();
    num_shift := new Mux[WIDTH]<'G+?>(_control_2.out, _num_shift.out, _zero_width.out); // num_shift = (e1 == 0 | e2 == 0) ? 0 : num_shift

    //// comb stage 2 //// 

    _small_mantissa_cut := new Slice[MANTISSA, MANTISSA-1, 1, MANTISSA-1]<'G+?>(small_mantissa.out); // small_mant[22:1]
    _small_mantissa_2 := new Concat[1, MANTISSA-1, MANTISSA]<'G+?>(_one.out, _small_mantissa_cut.out);
    _small_mantissa_2_shift := new ShiftRight[MANTISSA, WIDTH]<'G+?>(_small_mantissa_2.out, num_shift.out);
    small_exp_mant := new Mux[MANTISSA]<'G+?>(__control_2_a.out, _small_mantissa_2_shift.out, small_mantissa.out);

    _large_mantissa_cut := new Slice[MANTISSA, MANTISSA-1, 1, MANTISSA-1]<'G+?>(large_mantissa.out);
    _large_mantissa_2 := new Concat[1, MANTISSA-1, MANTISSA]<'G+?>(_one.out, _large_mantissa_cut.out);
    large_mantissa_2 := new Mux[MANTISSA]<'G+?>(__control_2_b.out, _large_mantissa_2.out, large_mantissa.out);

    //// comb stage 3 ////
    _control_lt_2 := new Lt[MANTISSA]<'G+?>(small_exp_mant.out, large_mantissa_2.out);
    s_mantissa_3 := new Mux[MANTISSA]<'G+?>(_control_lt_2.out, small_exp_mant.out, large_mantissa_2.out);
    l_mantissa_3 := new Mux[MANTISSA]<'G+?>(_control_lt_2.out, large_mantissa_2.out, small_exp_mant.out);


    //// comb stage 4 ////
    _mant_add := new Add[MANTISSA, MANTISSA+1]<'G+?>(s_mantissa_3.out, l_mantissa_3.out);
    _mant_sub := new Sub[MANTISSA, MANTISSA+1]<'G+?>(l_mantissa_3.out, s_mantissa_3.out);
    _add_mant_sel := new Eq[1]<'G+?>(left.sign, right.sign);
    _add_mant := new Mux[MANTISSA+1]<'G+?>(_add_mant_sel.out, _mant_add.out, _mant_sub.out);
    _l_mantissa_3_ext := new ZeroExtend[MANTISSA, MANTISSA+1]<'G+?>(l_mantissa_3.out);
    add_mant := new Mux[MANTISSA+1]<'G+?>(_control_2.out, _add_mant.out, _l_mantissa_3_ext.out);

    let shift_amts_num = ?;
    let shift_amts_den = ?;
    let shift_amts_base = ?;
    assert shift_amts_den > 0;
    // renormalization
    bundle shift_amts[MANTISSA+1]: for<i> ['G + i * shift_amts_num + shift_amts_base, 'G + i * shift_amts_num + shift_amts_base + 1] WIDTH;
    _mant_1_const := new Const[WIDTH, 0]<'G+?>(); // constant value set if all mantissa bits are 0
    _shift_max_const := new Const[WIDTH, MANTISSA+1]<'G+?>();
    _shift_max_sel := new Select[MANTISSA+1, 0]<'G+?>(add_mant.out);
    _shift_max_mux := new Mux[WIDTH]<'G+?>(_shift_max_sel.out, _shift_max_const.out, _mant_1_const.out);
    shift_amts{0} = _shift_max_mux.out;
    
    let exp_amts_num = ?;
    let exp_amts_den = ?;
    let exp_amts_base = ?;
    assert exp_amts_den > 0;

    bundle exp_amts[MANTISSA+1]: for<i> ['G + i * exp_amts_num + exp_amts_base, 'G + i * exp_amts_num + exp_amts_base + 1] EXPONENT;
    _exp_1_const := new Neg[EXPONENT]<'G+?>(larger_exp.out);
    _exp_max_const_p := new Const[EXPONENT, MANTISSA-1]<'G+?>();
    _exp_max_const := new Neg[EXPONENT]<'G+?>(_exp_max_const_p.out);
    _exp_max_mux := new Mux[EXPONENT]<'G+?>(_shift_max_sel.out, _exp_max_const.out, _exp_1_const.out);
    exp_amts{0} = _exp_max_mux.out;

    for j in 1..MANTISSA+1 {
        _shift_const := new Const[WIDTH, MANTISSA+1-j]<'G+?>();
        _shift_sel := new Select[MANTISSA+1, j]<'G+?>(add_mant.out);
        _shift_mux := new Mux[WIDTH]<'G+?>(_shift_sel.out, _shift_const.out, shift_amts{j-1});
        shift_amts{j} = _shift_mux.out;

        if j == MANTISSA {
            _exp_const_a := new Const[EXPONENT, 1]<'G+?>();
            _exp_mux_a := new Mux[EXPONENT]<'G+?>(_shift_sel.out, _exp_const_a.out, exp_amts{j-1});
            exp_amts{j} = _exp_mux_a.out;
        } else {
            _exp_const_b_p := new Const[EXPONENT, MANTISSA-1-j]<'G+?>();
            _exp_const_b := new Neg[EXPONENT]<'G+?>(_exp_const_b_p.out);
            _exp_mux_b := new Mux[EXPONENT]<'G+?>(_shift_sel.out, _exp_const_b.out, exp_amts{j-1});
            exp_amts{j} = _exp_mux_b.out;
        }
    }

    //// comb stage 5 ////
    final_exp := new Add[EXPONENT]<'G+?>(larger_exp.out, exp_amts{MANTISSA});
    _final_mantissa := new ShiftLeft[MANTISSA+1, WIDTH]<'G+?>(add_mant.out, shift_amts{MANTISSA});
    final_mantissa := new Slice[MANTISSA+1, MANTISSA, 1, MANTISSA]<'G+?>(_final_mantissa.out);

    l_signless := new Slice[WIDTH, WIDTH-2, 0, WIDTH-1]<'G+?>(left);
    r_signless := new Slice[WIDTH, WIDTH-2, 0, WIDTH-1]<'G+?>(right);

    _fsign_1_cond := new Gt[WIDTH-1]<'G+?>(l_signless.out, r_signless.out);
    _fsign_2_cond := new Eq[1]<'G+?>(left.sign, right.sign);
    _fsign_cb_cond := new Or[1]<'G+?>(_fsign_1_cond.out, _fsign_2_cond.out);
    final_sign := new Mux[1]<'G+?>(_fsign_cb_cond.out, left.sign, right.sign);

    res := new _FCompose[WIDTH, EXPONENT, MANTISSA]<'G+?>(final_sign.out, final_exp.out, final_mantissa.out);
    out = res.out;
    
    L := ?;
}