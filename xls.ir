package xls

file_number 0 "xls/dslx/stdlib/apfloat.x"
file_number 1 "xls/dslx/stdlib/std.x"
file_number 2 "/home/filament/xls.x"

fn __apfloat__is_zero_or_subnormal__8_23(x: (bits[1], bits[8], bits[23])) -> bits[1] {
  x_bexp: bits[8] = tuple_index(x, index=1, id=4, pos=[(0,736,3)])
  literal.5: bits[8] = literal(value=0, id=5, pos=[(0,736,23)])
  EXP_SZ: bits[32] = literal(value=8, id=2, pos=[(0,734,28)])
  FRACTION_SZ: bits[32] = literal(value=23, id=3, pos=[(0,734,41)])
  ret eq.6: bits[1] = eq(x_bexp, literal.5, id=6, pos=[(0,736,9)])
}

fn __std__mask_bits__8() -> bits[8] {
  literal.8: bits[8] = literal(value=0, id=8, pos=[(1,484,49)])
  X: bits[32] = literal(value=8, id=7, pos=[(1,484,17)])
  ret not.9: bits[8] = not(literal.8, id=9, pos=[(1,484,40)])
}

fn __apfloat__is_inf__8_23(x: (bits[1], bits[8], bits[23])) -> bits[1] {
  x_bexp: bits[8] = tuple_index(x, index=1, id=13, pos=[(0,101,4)])
  invoke.14: bits[8] = invoke(to_apply=__std__mask_bits__8, id=14, pos=[(0,101,27)])
  x_fraction: bits[23] = tuple_index(x, index=2, id=16, pos=[(0,101,42)])
  literal.17: bits[23] = literal(value=0, id=17, pos=[(0,101,73)])
  eq.15: bits[1] = eq(x_bexp, invoke.14, id=15, pos=[(0,101,10)])
  eq.18: bits[1] = eq(x_fraction, literal.17, id=18, pos=[(0,101,52)])
  EXP_SZ: bits[32] = literal(value=8, id=11, pos=[(0,99,14)])
  FRACTION_SZ: bits[32] = literal(value=23, id=12, pos=[(0,99,26)])
  ret and.19: bits[1] = and(eq.15, eq.18, id=19, pos=[(0,101,38)])
}

fn __apfloat__is_nan__8_23(x: (bits[1], bits[8], bits[23])) -> bits[1] {
  x_bexp: bits[8] = tuple_index(x, index=1, id=23, pos=[(0,70,4)])
  invoke.24: bits[8] = invoke(to_apply=__std__mask_bits__8, id=24, pos=[(0,70,27)])
  x_fraction: bits[23] = tuple_index(x, index=2, id=26, pos=[(0,70,42)])
  literal.27: bits[23] = literal(value=0, id=27, pos=[(0,70,73)])
  eq.25: bits[1] = eq(x_bexp, invoke.24, id=25, pos=[(0,70,10)])
  ne.28: bits[1] = ne(x_fraction, literal.27, id=28, pos=[(0,70,52)])
  EXP_SZ: bits[32] = literal(value=8, id=21, pos=[(0,68,14)])
  FRACTION_SZ: bits[32] = literal(value=23, id=22, pos=[(0,68,26)])
  ret and.29: bits[1] = and(eq.25, ne.28, id=29, pos=[(0,70,38)])
}

fn __apfloat__mul__8_23(x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> (bits[1], bits[8], bits[23]) {
  FRACTION_SZ: bits[32] = literal(value=23, id=33, pos=[(0,1804,24)])
  x_fraction: bits[23] = tuple_index(x, index=2, id=47, pos=[(0,1824,21)])
  literal.49: bits[48] = literal(value=1, id=49, pos=[(0,1824,74)])
  zero_ext.50: bits[48] = zero_ext(FRACTION_SZ, new_bit_count=48, id=50)
  y_fraction: bits[23] = tuple_index(y, index=2, id=53, pos=[(0,1825,21)])
  literal.55: bits[48] = literal(value=1, id=55, pos=[(0,1825,74)])
  zero_ext.56: bits[48] = zero_ext(FRACTION_SZ, new_bit_count=48, id=56)
  zero_ext.48: bits[48] = zero_ext(x_fraction, new_bit_count=48, id=48)
  shll.51: bits[48] = shll(literal.49, zero_ext.50, id=51, pos=[(0,1824,76)])
  zero_ext.54: bits[48] = zero_ext(y_fraction, new_bit_count=48, id=54)
  shll.57: bits[48] = shll(literal.55, zero_ext.56, id=57, pos=[(0,1825,76)])
  invoke.59: bits[1] = invoke(x, to_apply=__apfloat__is_zero_or_subnormal__8_23, id=59, pos=[(0,1828,42)])
  x_fraction__1: bits[48] = or(zero_ext.48, shll.51, id=52, pos=[(0,1824,53)])
  literal.60: bits[48] = literal(value=0, id=60, pos=[(0,1828,66)])
  invoke.62: bits[1] = invoke(y, to_apply=__apfloat__is_zero_or_subnormal__8_23, id=62, pos=[(0,1829,42)])
  y_fraction__1: bits[48] = or(zero_ext.54, shll.57, id=58, pos=[(0,1825,53)])
  literal.63: bits[48] = literal(value=0, id=63, pos=[(0,1829,66)])
  x_bexp: bits[8] = tuple_index(x, index=1, id=70, pos=[(0,1841,14)])
  y_bexp: bits[8] = tuple_index(y, index=1, id=72, pos=[(0,1841,43)])
  invoke.66: bits[8] = invoke(to_apply=__std__mask_bits__8, id=66, pos=[(0,1840,27)])
  x_fraction__2: bits[48] = sel(invoke.59, cases=[x_fraction__1, literal.60], id=61, pos=[(0,1828,19)])
  y_fraction__2: bits[48] = sel(invoke.62, cases=[y_fraction__1, literal.63], id=64, pos=[(0,1829,19)])
  zero_ext.71: bits[10] = zero_ext(x_bexp, new_bit_count=10, id=71)
  zero_ext.73: bits[10] = zero_ext(y_bexp, new_bit_count=10, id=73)
  zero_ext.67: bits[10] = zero_ext(invoke.66, new_bit_count=10, id=67)
  literal.68: bits[10] = literal(value=1, id=68, pos=[(0,1840,74)])
  fraction: bits[48] = umul(x_fraction__2, y_fraction__2, id=65, pos=[(0,1832,28)])
  invoke.76: bits[1] = invoke(x, to_apply=__apfloat__is_zero_or_subnormal__8_23, id=76, pos=[(0,1850,35)])
  invoke.77: bits[1] = invoke(y, to_apply=__apfloat__is_zero_or_subnormal__8_23, id=77, pos=[(0,1850,62)])
  add.74: bits[10] = add(zero_ext.71, zero_ext.73, id=74, pos=[(0,1841,39)])
  bias: bits[10] = shra(zero_ext.67, literal.68, id=69, pos=[(0,1840,56)])
  bit_slice.81: bits[1] = bit_slice(fraction, start=47, width=1, id=81, pos=[(0,1856,31)])
  or.78: bits[1] = or(invoke.76, invoke.77, id=78, pos=[(0,1850,39)])
  exp: bits[10] = sub(add.74, bias, id=75, pos=[(0,1841,68)])
  literal.79: bits[10] = literal(value=0, id=79, pos=[(0,1850,83)])
  fraction_shift: bits[48] = zero_ext(bit_slice.81, new_bit_count=48, id=82)
  bit_slice.83: bits[1] = bit_slice(fraction, start=0, width=1, id=83, pos=[(0,1861,23)])
  exp__1: bits[10] = sel(or.78, cases=[exp, literal.79], id=80, pos=[(0,1850,12)])
  bit_slice.87: bits[10] = bit_slice(fraction_shift, start=0, width=10, id=87)
  fraction__1: bits[48] = shrl(fraction, fraction_shift, id=85, pos=[(0,1862,26)])
  sticky: bits[48] = zero_ext(bit_slice.83, new_bit_count=48, id=84)
  exp__2: bits[10] = add(exp__1, bit_slice.87, id=88, pos=[(0,1866,16)])
  literal.91: bits[10] = literal(value=0, id=91, pos=[(0,1877,42)])
  fraction__2: bits[48] = or(fraction__1, sticky, id=86, pos=[(0,1863,26)])
  literal.93: bits[48] = literal(value=1, id=93, pos=[(0,1877,76)])
  sle.92: bits[1] = sle(exp__2, literal.91, id=92, pos=[(0,1877,24)])
  shrl.94: bits[48] = shrl(fraction__2, literal.93, id=94, pos=[(0,1877,55)])
  bit_slice.89: bits[1] = bit_slice(fraction__2, start=0, width=1, id=89, pos=[(0,1876,23)])
  fraction__3: bits[48] = sel(sle.92, cases=[fraction__2, shrl.94], id=95, pos=[(0,1877,17)])
  sticky__1: bits[48] = zero_ext(bit_slice.89, new_bit_count=48, id=90)
  fraction__4: bits[48] = or(fraction__3, sticky__1, id=96, pos=[(0,1878,26)])
  bit_slice.98: bits[22] = bit_slice(fraction__4, start=0, width=22, id=98, pos=[(0,1890,15)])
  literal.99: bits[22] = literal(value=0, id=99, pos=[(0,1890,77)])
  zero_ext.110: bits[48] = zero_ext(FRACTION_SZ, new_bit_count=48, id=110)
  bit_slice.103: bits[22] = bit_slice(fraction__4, start=0, width=22, id=103, pos=[(0,1893,15)])
  literal.104: bits[22] = literal(value=0, id=104, pos=[(0,1893,77)])
  bit_slice.97: bits[1] = bit_slice(fraction__4, start=22, width=1, id=97, pos=[(0,1889,14)])
  eq.100: bits[1] = eq(bit_slice.98, literal.99, id=100, pos=[(0,1890,48)])
  shrl.111: bits[48] = shrl(fraction__4, zero_ext.110, id=111, pos=[(0,1900,27)])
  bit_slice.102: bits[1] = bit_slice(fraction__4, start=22, width=1, id=102, pos=[(0,1892,14)])
  ne.105: bits[1] = ne(bit_slice.103, literal.104, id=105, pos=[(0,1893,48)])
  is_half_way: bits[1] = and(bit_slice.97, eq.100, id=101, pos=[(0,1889,66)])
  bit_slice.107: bits[1] = bit_slice(fraction__4, start=23, width=1, id=107, pos=[(0,1895,54)])
  fraction__5: bits[23] = bit_slice(shrl.111, start=0, width=23, id=112)
  greater_than_half_way: bits[1] = and(bit_slice.102, ne.105, id=106, pos=[(0,1892,66)])
  and.108: bits[1] = and(is_half_way, bit_slice.107, id=108, pos=[(0,1895,44)])
  fraction__6: bits[24] = zero_ext(fraction__5, new_bit_count=24, id=113)
  literal.114: bits[24] = literal(value=1, id=114, pos=[(0,1902,67)])
  do_round_up: bits[1] = or(greater_than_half_way, and.108, id=109, pos=[(0,1895,28)])
  add.115: bits[24] = add(fraction__6, literal.114, id=115, pos=[(0,1902,43)])
  fraction__7: bits[24] = sel(do_round_up, cases=[fraction__6, add.115], id=116, pos=[(0,1902,17)])
  literal.118: bits[10] = literal(value=1, id=118, pos=[(0,1906,52)])
  bit_slice.117: bits[1] = bit_slice(fraction__7, start=23, width=1, id=117, pos=[(0,1906,23)])
  add.119: bits[10] = add(exp__2, literal.118, id=119, pos=[(0,1906,35)])
  exp__3: bits[10] = sel(bit_slice.117, cases=[exp__2, add.119], id=120, pos=[(0,1906,12)])
  literal.121: bits[10] = literal(value=0, id=121, pos=[(0,1907,43)])
  is_subnormal: bits[1] = sle(exp__3, literal.121, id=122, pos=[(0,1907,25)])
  result_exp: bits[9] = bit_slice(exp__3, start=0, width=9, id=126)
  literal.128: bits[9] = literal(value=0, id=128, pos=[(0,1916,50)])
  high_exp: bits[8] = invoke(to_apply=__std__mask_bits__8, id=132, pos=[(0,1920,31)])
  invoke.147: bits[1] = invoke(x, to_apply=__apfloat__is_zero_or_subnormal__8_23, id=147, pos=[(0,1932,38)])
  invoke.148: bits[1] = invoke(y, to_apply=__apfloat__is_zero_or_subnormal__8_23, id=148, pos=[(0,1932,65)])
  invoke.153: bits[1] = invoke(x, to_apply=__apfloat__is_inf__8_23, id=153, pos=[(0,1935,26)])
  invoke.154: bits[1] = invoke(y, to_apply=__apfloat__is_inf__8_23, id=154, pos=[(0,1936,12)])
  result_exp__1: bits[9] = sel(is_subnormal, cases=[result_exp, literal.128], id=129, pos=[(0,1916,19)])
  zero_ext.137: bits[9] = zero_ext(high_exp, new_bit_count=9, id=137)
  zero_ext.133: bits[9] = zero_ext(high_exp, new_bit_count=9, id=133)
  result_fraction: bits[23] = bit_slice(fraction__7, start=0, width=23, id=127)
  literal.130: bits[23] = literal(value=0, id=130, pos=[(0,1917,58)])
  invoke.150: bits[1] = invoke(x, to_apply=__apfloat__is_nan__8_23, id=150, pos=[(0,1933,26)])
  invoke.151: bits[1] = invoke(y, to_apply=__apfloat__is_nan__8_23, id=151, pos=[(0,1934,12)])
  has_0_arg: bits[1] = or(invoke.147, invoke.148, id=149, pos=[(0,1932,42)])
  has_inf_arg: bits[1] = or(invoke.153, invoke.154, id=155, pos=[(0,1935,51)])
  invoke.141: bits[1] = invoke(x, to_apply=__apfloat__is_inf__8_23, id=141, pos=[(0,1925,29)])
  invoke.142: bits[1] = invoke(y, to_apply=__apfloat__is_inf__8_23, id=142, pos=[(0,1926,12)])
  ult.138: bits[1] = ult(result_exp__1, zero_ext.137, id=138, pos=[(0,1922,33)])
  bit_slice.139: bits[8] = bit_slice(result_exp__1, start=0, width=8, id=139)
  ult.134: bits[1] = ult(result_exp__1, zero_ext.133, id=134, pos=[(0,1921,38)])
  literal.135: bits[23] = literal(value=0, id=135, pos=[(0,1921,110)])
  result_fraction__1: bits[23] = sel(is_subnormal, cases=[result_fraction, literal.130], id=131, pos=[(0,1917,24)])
  bit_slice.160: bits[23] = bit_slice(FRACTION_SZ, start=0, width=23, id=160)
  literal.161: bits[23] = literal(value=1, id=161, pos=[(0,1939,92)])
  has_nan_arg: bits[1] = or(invoke.150, invoke.151, id=152, pos=[(0,1933,51)])
  and.156: bits[1] = and(has_0_arg, has_inf_arg, id=156, pos=[(0,1937,48)])
  x_sign: bits[1] = tuple_index(x, index=0, id=123, pos=[(0,1910,21)])
  y_sign: bits[1] = tuple_index(y, index=0, id=124, pos=[(0,1910,31)])
  is_operand_inf: bits[1] = or(invoke.141, invoke.142, id=143, pos=[(0,1925,54)])
  result_exp__2: bits[8] = sel(ult.138, cases=[high_exp, bit_slice.139], id=140, pos=[(0,1922,19)])
  result_fraction__2: bits[23] = sel(ult.134, cases=[literal.135, result_fraction__1], id=136, pos=[(0,1921,24)])
  literal.145: bits[23] = literal(value=0, id=145, pos=[(0,1928,60)])
  literal.159: bits[23] = literal(value=1, id=159, pos=[(0,1939,37)])
  sub.162: bits[23] = sub(bit_slice.160, literal.161, id=162, pos=[(0,1939,74)])
  EXP_SZ: bits[32] = literal(value=8, id=32, pos=[(0,1804,11)])
  literal.34: bits[32] = literal(value=1, id=34, pos=[(0,1808,37)])
  is_result_nan: bits[1] = or(has_nan_arg, and.156, id=157, pos=[(0,1937,34)])
  result_sign: bits[1] = ne(x_sign, y_sign, id=125, pos=[(0,1910,27)])
  literal.165: bits[1] = literal(value=0, id=165, pos=[(0,1941,42)])
  result_exp__3: bits[8] = sel(is_operand_inf, cases=[result_exp__2, high_exp], id=144, pos=[(0,1927,19)])
  result_fraction__3: bits[23] = sel(is_operand_inf, cases=[result_fraction__2, literal.145], id=146, pos=[(0,1928,24)])
  nan_fraction: bits[23] = shll(literal.159, sub.162, id=163, pos=[(0,1939,39)])
  WIDE_EXP: bits[32] = add(EXP_SZ, literal.34, id=35, pos=[(0,1808,31)])
  literal.36: bits[32] = literal(value=1, id=36, pos=[(0,1810,41)])
  literal.38: bits[32] = literal(value=1, id=38, pos=[(0,1813,51)])
  add.40: bits[32] = add(FRACTION_SZ, FRACTION_SZ, id=40, pos=[(0,1816,41)])
  literal.41: bits[32] = literal(value=2, id=41, pos=[(0,1816,61)])
  literal.43: bits[32] = literal(value=1, id=43, pos=[(0,1818,55)])
  literal.45: bits[32] = literal(value=1, id=45, pos=[(0,1821,49)])
  result_sign__1: bits[1] = sel(is_result_nan, cases=[result_sign, literal.165], id=166, pos=[(0,1941,20)])
  result_exp__4: bits[8] = sel(is_result_nan, cases=[result_exp__3, high_exp], id=158, pos=[(0,1938,19)])
  result_fraction__4: bits[23] = sel(is_result_nan, cases=[result_fraction__3, nan_fraction], id=164, pos=[(0,1940,24)])
  SIGNED_EXP: bits[32] = add(WIDE_EXP, literal.36, id=37, pos=[(0,1810,35)])
  ROUNDING_FRACTION: bits[32] = add(FRACTION_SZ, literal.38, id=39, pos=[(0,1813,45)])
  WIDE_FRACTION: bits[32] = add(add.40, literal.41, id=42, pos=[(0,1816,55)])
  FRACTION_ROUNDING_BIT: bits[32] = sub(FRACTION_SZ, literal.43, id=44, pos=[(0,1818,49)])
  STICKY_FRACTION: bits[32] = add(FRACTION_SZ, literal.45, id=46, pos=[(0,1821,43)])
  ret tuple.167: (bits[1], bits[8], bits[23]) = tuple(result_sign__1, result_exp__4, result_fraction__4, id=167, pos=[(0,1943,30)])
}

fn __itok__apfloat__add__8_23(__token: token, __activated: bits[1], x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> (token, (bits[1], bits[8], bits[23])) {
  FRACTION_SZ: bits[32] = literal(value=23, id=173, pos=[(0,1603,24)])
  bit_slice.185: bits[23] = bit_slice(FRACTION_SZ, start=0, width=23, id=185)
  literal.186: bits[23] = literal(value=1, id=186, pos=[(0,1623,97)])
  literal.184: bits[23] = literal(value=1, id=184, pos=[(0,1623,42)])
  sub.187: bits[23] = sub(bit_slice.185, literal.186, id=187, pos=[(0,1623,79)])
  x_bexp__1: bits[8] = tuple_index(x, index=1, id=212, pos=[(0,1633,24)])
  y_bexp__1: bits[8] = tuple_index(y, index=1, id=213, pos=[(0,1633,33)])
  fraction_high_bit: bits[23] = shll(literal.184, sub.187, id=188, pos=[(0,1623,44)])
  ugt.214: bits[1] = ugt(x_bexp__1, y_bexp__1, id=214, pos=[(0,1633,30)])
  x_fraction: bits[23] = tuple_index(x, index=2, id=192, pos=[(0,1625,18)])
  zero_ext.189: bits[28] = zero_ext(fraction_high_bit, new_bit_count=28, id=189)
  literal.190: bits[28] = literal(value=1, id=190, pos=[(0,1624,91)])
  literal.178: bits[32] = literal(value=5, id=178, pos=[(0,1612,46)])
  greater_exp: (bits[1], bits[8], bits[23]) = sel(ugt.214, cases=[y, x], id=215, pos=[(0,1633,20)])
  y_fraction: bits[23] = tuple_index(y, index=2, id=197, pos=[(0,1626,18)])
  zero_ext.193: bits[28] = zero_ext(x_fraction, new_bit_count=28, id=193)
  wide_fraction_high_bit: bits[28] = shll(zero_ext.189, literal.190, id=191, pos=[(0,1624,70)])
  WIDE_FRACTION: bits[32] = add(FRACTION_SZ, literal.178, id=179, pos=[(0,1612,40)])
  greater_exp_bexp: bits[8] = tuple_index(greater_exp, index=1, id=216, pos=[(0,1634,27)])
  x_bexp__2: bits[8] = tuple_index(x, index=1, id=217, pos=[(0,1634,36)])
  zero_ext.198: bits[28] = zero_ext(y_fraction, new_bit_count=28, id=198)
  greater_exp_bexp__1: bits[8] = tuple_index(greater_exp, index=1, id=219, pos=[(0,1635,27)])
  y_bexp__2: bits[8] = tuple_index(y, index=1, id=220, pos=[(0,1635,36)])
  x_bexp: bits[8] = tuple_index(x, index=1, id=202, pos=[(0,1629,19)])
  literal.203: bits[8] = literal(value=0, id=203, pos=[(0,1629,39)])
  or.194: bits[28] = or(zero_ext.193, wide_fraction_high_bit, id=194, pos=[(0,1625,50)])
  literal.195: bits[28] = literal(value=3, id=195, pos=[(0,1625,97)])
  bit_slice.228: bits[8] = bit_slice(WIDE_FRACTION, start=0, width=8, id=228)
  shift_x: bits[8] = sub(greater_exp_bexp, x_bexp__2, id=218, pos=[(0,1634,33)])
  y_bexp: bits[8] = tuple_index(y, index=1, id=207, pos=[(0,1630,19)])
  literal.208: bits[8] = literal(value=0, id=208, pos=[(0,1630,39)])
  or.199: bits[28] = or(zero_ext.198, wide_fraction_high_bit, id=199, pos=[(0,1626,50)])
  literal.200: bits[28] = literal(value=3, id=200, pos=[(0,1626,97)])
  bit_slice.232: bits[8] = bit_slice(WIDE_FRACTION, start=0, width=8, id=232)
  shift_y: bits[8] = sub(greater_exp_bexp__1, y_bexp__2, id=221, pos=[(0,1635,33)])
  eq.204: bits[1] = eq(x_bexp, literal.203, id=204, pos=[(0,1629,25)])
  wide_x: bits[28] = shll(or.194, literal.195, id=196, pos=[(0,1625,76)])
  literal.205: bits[28] = literal(value=0, id=205, pos=[(0,1629,61)])
  sub.229: bits[8] = sub(bit_slice.228, shift_x, id=229, pos=[(0,1641,58)])
  eq.209: bits[1] = eq(y_bexp, literal.208, id=209, pos=[(0,1630,25)])
  wide_y: bits[28] = shll(or.199, literal.200, id=201, pos=[(0,1626,76)])
  literal.210: bits[28] = literal(value=0, id=210, pos=[(0,1630,61)])
  sub.233: bits[8] = sub(bit_slice.232, shift_y, id=233, pos=[(0,1642,58)])
  wide_x__1: bits[28] = sel(eq.204, cases=[wide_x, literal.205], id=206, pos=[(0,1629,15)])
  zero_ext.230: bits[28] = zero_ext(sub.229, new_bit_count=28, id=230)
  wide_y__1: bits[28] = sel(eq.209, cases=[wide_y, literal.210], id=211, pos=[(0,1630,15)])
  zero_ext.234: bits[28] = zero_ext(sub.233, new_bit_count=28, id=234)
  zero_ext.222: bits[28] = zero_ext(shift_x, new_bit_count=28, id=222)
  dropped_x: bits[28] = shll(wide_x__1, zero_ext.230, id=231, pos=[(0,1641,25)])
  literal.236: bits[28] = literal(value=0, id=236, pos=[(0,1643,47)])
  zero_ext.225: bits[28] = zero_ext(shift_y, new_bit_count=28, id=225)
  dropped_y: bits[28] = shll(wide_y__1, zero_ext.234, id=235, pos=[(0,1642,25)])
  literal.238: bits[28] = literal(value=0, id=238, pos=[(0,1644,47)])
  shrl.223: bits[28] = shrl(wide_x__1, zero_ext.222, id=223, pos=[(0,1636,26)])
  sticky_x: bits[1] = ugt(dropped_x, literal.236, id=237, pos=[(0,1643,27)])
  shrl.226: bits[28] = shrl(wide_y__1, zero_ext.225, id=226, pos=[(0,1637,26)])
  sticky_y: bits[1] = ugt(dropped_y, literal.238, id=239, pos=[(0,1644,27)])
  shifted_x: bits[28] = zero_ext(shrl.223, new_bit_count=28, id=224)
  zero_ext.240: bits[28] = zero_ext(sticky_x, new_bit_count=28, id=240)
  shifted_y: bits[28] = zero_ext(shrl.226, new_bit_count=28, id=227)
  zero_ext.242: bits[28] = zero_ext(sticky_y, new_bit_count=28, id=242)
  x_sign: bits[1] = tuple_index(x, index=0, id=244, pos=[(0,1650,21)])
  greater_exp_sign: bits[1] = tuple_index(greater_exp, index=0, id=245, pos=[(0,1650,41)])
  addend_x: bits[28] = or(shifted_x, zero_ext.240, id=241, pos=[(0,1645,27)])
  y_sign: bits[1] = tuple_index(y, index=0, id=249, pos=[(0,1651,21)])
  greater_exp_sign__1: bits[1] = tuple_index(greater_exp, index=0, id=250, pos=[(0,1651,41)])
  addend_y: bits[28] = or(shifted_y, zero_ext.242, id=243, pos=[(0,1646,27)])
  ne.246: bits[1] = ne(x_sign, greater_exp_sign, id=246, pos=[(0,1650,27)])
  neg.247: bits[28] = neg(addend_x, id=247, pos=[(0,1650,49)])
  ne.251: bits[1] = ne(y_sign, greater_exp_sign__1, id=251, pos=[(0,1651,27)])
  neg.252: bits[28] = neg(addend_y, id=252, pos=[(0,1651,49)])
  addend_x__1: bits[28] = sel(ne.246, cases=[addend_x, neg.247], id=248, pos=[(0,1650,17)])
  addend_y__1: bits[28] = sel(ne.251, cases=[addend_y, neg.252], id=253, pos=[(0,1651,17)])
  sign_ext.254: bits[29] = sign_ext(addend_x__1, new_bit_count=29, id=254)
  sign_ext.255: bits[29] = sign_ext(addend_y__1, new_bit_count=29, id=255)
  fraction: bits[29] = add(sign_ext.254, sign_ext.255, id=256, pos=[(0,1655,50)])
  literal.287: bits[29] = literal(value=0, id=287, pos=[(0,1664,55)])
  slt.288: bits[1] = slt(fraction, literal.287, id=288, pos=[(0,1664,34)])
  neg.289: bits[29] = neg(fraction, id=289, pos=[(0,1664,59)])
  sel.290: bits[29] = sel(slt.288, cases=[fraction, neg.289], id=290, pos=[(0,1664,22)])
  abs_fraction: bits[28] = bit_slice(sel.290, start=0, width=28, id=291)
  reverse.299: bits[28] = reverse(abs_fraction, id=299, pos=[(0,1675,26)])
  one_hot.300: bits[29] = one_hot(reverse.299, lsb_prio=true, id=300, pos=[(0,1675,26)])
  encode.301: bits[5] = encode(one_hot.300, id=301, pos=[(0,1675,26)])
  leading_zeroes: bits[28] = zero_ext(encode.301, new_bit_count=28, id=302, pos=[(0,1675,26)])
  literal.303: bits[28] = literal(value=1, id=303, pos=[(0,1676,50)])
  carry_bit: bits[1] = bit_slice(abs_fraction, start=27, width=1, id=292, pos=[(0,1669,30)])
  cancel: bits[1] = ugt(leading_zeroes, literal.303, id=304, pos=[(0,1676,30)])
  tuple.309: (bits[1], bits[1]) = tuple(carry_bit, cancel, id=309, pos=[(0,1678,30)])
  literal.330: bits[1] = literal(value=0, id=330, pos=[(0,1681,5)])
  tuple_index.329: bits[1] = tuple_index(tuple.309, index=0, id=329)
  literal.321: bits[1] = literal(value=0, id=321, pos=[(0,1680,5)])
  tuple_index.320: bits[1] = tuple_index(tuple.309, index=0, id=320)
  literal.312: bits[1] = literal(value=1, id=312, pos=[(0,1679,5)])
  tuple_index.311: bits[1] = tuple_index(tuple.309, index=0, id=311)
  literal.328: bits[1] = literal(value=1, id=328)
  eq.331: bits[1] = eq(literal.330, tuple_index.329, id=331)
  literal.334: bits[1] = literal(value=0, id=334, pos=[(0,1681,12)])
  tuple_index.333: bits[1] = tuple_index(tuple.309, index=1, id=333)
  literal.319: bits[1] = literal(value=1, id=319)
  eq.322: bits[1] = eq(literal.321, tuple_index.320, id=322)
  literal.325: bits[1] = literal(value=1, id=325, pos=[(0,1680,12)])
  tuple_index.324: bits[1] = tuple_index(tuple.309, index=1, id=324)
  literal.310: bits[1] = literal(value=1, id=310)
  eq.313: bits[1] = eq(literal.312, tuple_index.311, id=313)
  literal.316: bits[1] = literal(value=0, id=316, pos=[(0,1679,11)])
  tuple_index.315: bits[1] = tuple_index(tuple.309, index=1, id=315)
  and.332: bits[1] = and(literal.328, eq.331, id=332)
  eq.335: bits[1] = eq(literal.334, tuple_index.333, id=335)
  and.323: bits[1] = and(literal.319, eq.322, id=323)
  eq.326: bits[1] = eq(literal.325, tuple_index.324, id=326)
  and.314: bits[1] = and(literal.310, eq.313, id=314)
  eq.317: bits[1] = eq(literal.316, tuple_index.315, id=317)
  literal.293: bits[28] = literal(value=1, id=293, pos=[(0,1670,58)])
  literal.305: bits[28] = literal(value=1, id=305, pos=[(0,1677,77)])
  and.336: bits[1] = and(and.332, eq.335, id=336)
  and.327: bits[1] = and(and.323, eq.326, id=327)
  and.318: bits[1] = and(and.314, eq.317, id=318)
  shrl.294: bits[28] = shrl(abs_fraction, literal.293, id=294, pos=[(0,1670,37)])
  bit_slice.296: bits[1] = bit_slice(abs_fraction, start=0, width=1, id=296, pos=[(0,1671,53)])
  sub.306: bits[28] = sub(leading_zeroes, literal.305, id=306, pos=[(0,1677,57)])
  concat.342: bits[3] = concat(and.336, and.327, and.318, id=342)
  carry_fraction: bits[27] = bit_slice(shrl.294, start=0, width=27, id=295)
  zero_ext.297: bits[27] = zero_ext(bit_slice.296, new_bit_count=27, id=297)
  shll.307: bits[28] = shll(abs_fraction, sub.306, id=307, pos=[(0,1677,38)])
  literal.340: bits[27] = literal(value=0, id=340, pos=[(0,1682,59)])
  one_hot.343: bits[4] = one_hot(concat.342, lsb_prio=true, id=343)
  carry_fraction__1: bits[27] = or(carry_fraction, zero_ext.297, id=298, pos=[(0,1671,38)])
  cancel_fraction: bits[27] = bit_slice(shll.307, start=0, width=27, id=308)
  bit_slice.337: bits[27] = bit_slice(abs_fraction, start=0, width=27, id=337)
  identity.341: bits[27] = identity(literal.340, id=341)
  shifted_fraction: bits[27] = one_hot_sel(one_hot.343, cases=[carry_fraction__1, cancel_fraction, bit_slice.337, identity.341], id=344)
  normal_chunk: bits[3] = bit_slice(shifted_fraction, start=0, width=3, id=345, pos=[(0,1695,37)])
  literal.347: bits[3] = literal(value=4, id=347, pos=[(0,1698,28)])
  half_way_chunk: bits[2] = bit_slice(shifted_fraction, start=2, width=2, id=346, pos=[(0,1696,39)])
  literal.349: bits[2] = literal(value=3, id=349, pos=[(0,1698,57)])
  ugt.348: bits[1] = ugt(normal_chunk, literal.347, id=348, pos=[(0,1698,23)])
  eq.350: bits[1] = eq(half_way_chunk, literal.349, id=350, pos=[(0,1698,51)])
  or.351: bits[1] = or(ugt.348, eq.350, id=351, pos=[(0,1698,33)])
  literal.353: bits[1] = literal(value=0, id=353, pos=[(0,1699,16)])
  literal.352: bits[1] = literal(value=1, id=352, pos=[(0,1698,67)])
  zero_ext.355: bits[28] = zero_ext(shifted_fraction, new_bit_count=28, id=355)
  literal.356: bits[28] = literal(value=8, id=356, pos=[(0,1702,102)])
  do_round_up: bits[1] = sel(or.351, cases=[literal.353, literal.352], id=354, pos=[(0,1698,6)])
  zero_ext.358: bits[28] = zero_ext(shifted_fraction, new_bit_count=28, id=358)
  add.357: bits[28] = add(zero_ext.355, literal.356, id=357, pos=[(0,1702,82)])
  rounded_fraction: bits[28] = sel(do_round_up, cases=[zero_ext.358, add.357], id=359, pos=[(0,1702,25)])
  greater_exp_bexp__2: bits[8] = tuple_index(greater_exp, index=1, id=369, pos=[(0,1716,18)])
  rounding_carry: bits[1] = bit_slice(rounded_fraction, start=27, width=1, id=360, pos=[(0,1704,39)])
  zero_ext.370: bits[10] = zero_ext(greater_exp_bexp__2, new_bit_count=10, id=370)
  zero_ext.371: bits[10] = zero_ext(rounding_carry, new_bit_count=10, id=371)
  literal.257: bits[29] = literal(value=0, id=257, pos=[(0,1656,56)])
  literal.259: bits[29] = literal(value=0, id=259, pos=[(0,1657,75)])
  add.372: bits[10] = add(zero_ext.370, zero_ext.371, id=372, pos=[(0,1716,42)])
  literal.373: bits[10] = literal(value=1, id=373, pos=[(0,1718,20)])
  fraction_is_zero: bits[1] = eq(fraction, literal.257, id=258, pos=[(0,1656,34)])
  slt.260: bits[1] = slt(fraction, literal.259, id=260, pos=[(0,1657,54)])
  add.374: bits[10] = add(add.372, literal.373, id=374, pos=[(0,1717,40)])
  bit_slice.375: bits[10] = bit_slice(leading_zeroes, start=0, width=10, id=375)
  tuple.261: (bits[1], bits[1]) = tuple(fraction_is_zero, slt.260, id=261, pos=[(0,1657,26)])
  wide_exponent: bits[10] = sub(add.374, bit_slice.375, id=376, pos=[(0,1718,22)])
  literal.377: bits[10] = literal(value=0, id=377, pos=[(0,1719,58)])
  bit_slice.362: bits[1] = bit_slice(rounded_fraction, start=27, width=1, id=362, pos=[(0,1710,26)])
  literal.364: bits[28] = literal(value=0, id=364, pos=[(0,1710,81)])
  literal.363: bits[28] = literal(value=1, id=363, pos=[(0,1710,52)])
  literal.273: bits[1] = literal(value=0, id=273, pos=[(0,1659,5)])
  tuple_index.272: bits[1] = tuple_index(tuple.261, index=0, id=272)
  literal.264: bits[1] = literal(value=1, id=264, pos=[(0,1658,5)])
  tuple_index.263: bits[1] = tuple_index(tuple.261, index=0, id=263)
  wide_exponent__1: bits[10] = sel(fraction_is_zero, cases=[wide_exponent, literal.377], id=378, pos=[(0,1719,22)])
  literal.379: bits[10] = literal(value=0, id=379, pos=[(0,1723,39)])
  literal.361: bits[28] = literal(value=3, id=361, pos=[(0,1709,41)])
  sel.365: bits[28] = sel(bit_slice.362, cases=[literal.364, literal.363], id=365, pos=[(0,1710,7)])
  literal.271: bits[1] = literal(value=1, id=271)
  eq.274: bits[1] = eq(literal.273, tuple_index.272, id=274)
  literal.277: bits[1] = literal(value=1, id=277, pos=[(0,1659,12)])
  tuple_index.276: bits[1] = tuple_index(tuple.261, index=1, id=276)
  literal.262: bits[1] = literal(value=1, id=262)
  eq.265: bits[1] = eq(literal.264, tuple_index.263, id=265)
  x_sign__1: bits[1] = tuple_index(x, index=0, id=404, pos=[(0,1747,56)])
  literal.405: bits[1] = literal(value=0, id=405, pos=[(0,1747,68)])
  y_sign__1: bits[1] = tuple_index(y, index=0, id=409, pos=[(0,1748,56)])
  literal.410: bits[1] = literal(value=0, id=410, pos=[(0,1748,68)])
  x_sign__2: bits[1] = tuple_index(x, index=0, id=417, pos=[(0,1754,42)])
  literal.418: bits[1] = literal(value=1, id=418, pos=[(0,1754,54)])
  y_sign__2: bits[1] = tuple_index(y, index=0, id=422, pos=[(0,1755,42)])
  literal.423: bits[1] = literal(value=1, id=423, pos=[(0,1755,54)])
  slt.380: bits[1] = slt(wide_exponent__1, literal.379, id=380, pos=[(0,1723,23)])
  bit_slice.382: bits[9] = bit_slice(wide_exponent__1, start=0, width=9, id=382)
  literal.381: bits[9] = literal(value=0, id=381, pos=[(0,1723,56)])
  fraction_shift: bits[28] = add(literal.361, sel.365, id=366, pos=[(0,1709,43)])
  and.275: bits[1] = and(literal.271, eq.274, id=275)
  eq.278: bits[1] = eq(literal.277, tuple_index.276, id=278)
  and.266: bits[1] = and(literal.262, eq.265, id=266)
  literal.268: bits[1] = literal(value=1, id=268, pos=[(0,1658,11)])
  invoke.403: bits[1] = invoke(x, to_apply=__apfloat__is_inf__8_23, id=403, pos=[(0,1747,27)])
  eq.406: bits[1] = eq(x_sign__1, literal.405, id=406, pos=[(0,1747,62)])
  invoke.408: bits[1] = invoke(y, to_apply=__apfloat__is_inf__8_23, id=408, pos=[(0,1748,27)])
  eq.411: bits[1] = eq(y_sign__1, literal.410, id=411, pos=[(0,1748,62)])
  invoke.416: bits[1] = invoke(x, to_apply=__apfloat__is_inf__8_23, id=416, pos=[(0,1754,13)])
  eq.419: bits[1] = eq(x_sign__2, literal.418, id=419, pos=[(0,1754,48)])
  invoke.421: bits[1] = invoke(y, to_apply=__apfloat__is_inf__8_23, id=421, pos=[(0,1755,13)])
  eq.424: bits[1] = eq(y_sign__2, literal.423, id=424, pos=[(0,1755,48)])
  invoke.388: bits[8] = invoke(to_apply=__std__mask_bits__8, id=388, pos=[(0,1732,36)])
  wide_exponent__2: bits[9] = sel(slt.380, cases=[bit_slice.382, literal.381], id=383, pos=[(0,1723,6)])
  literal.384: bits[9] = literal(value=1, id=384, pos=[(0,1729,56)])
  shrl.367: bits[28] = shrl(rounded_fraction, fraction_shift, id=367, pos=[(0,1711,42)])
  and.279: bits[1] = and(and.275, eq.278, id=279)
  and.269: bits[1] = and(and.266, literal.268, id=269)
  and.407: bits[1] = and(invoke.403, eq.406, id=407, pos=[(0,1747,52)])
  and.412: bits[1] = and(invoke.408, eq.411, id=412, pos=[(0,1748,52)])
  and.420: bits[1] = and(invoke.416, eq.419, id=420, pos=[(0,1754,38)])
  and.425: bits[1] = and(invoke.421, eq.424, id=425, pos=[(0,1755,38)])
  saturated_exp: bits[9] = zero_ext(invoke.388, new_bit_count=9, id=389)
  ult.385: bits[1] = ult(wide_exponent__2, literal.384, id=385, pos=[(0,1729,41)])
  result_fraction: bits[23] = bit_slice(shrl.367, start=0, width=23, id=368)
  literal.386: bits[23] = literal(value=0, id=386, pos=[(0,1729,76)])
  concat.284: bits[2] = concat(and.279, and.269, id=284)
  greater_exp_sign__2: bits[1] = tuple_index(greater_exp, index=0, id=280, pos=[(0,1659,33)])
  invoke.427: bits[1] = invoke(x, to_apply=__apfloat__is_nan__8_23, id=427, pos=[(0,1756,28)])
  invoke.428: bits[1] = invoke(y, to_apply=__apfloat__is_nan__8_23, id=428, pos=[(0,1757,12)])
  has_pos_inf: bits[1] = or(and.407, and.412, id=413, pos=[(0,1747,72)])
  has_neg_inf: bits[1] = or(and.420, and.425, id=426, pos=[(0,1754,58)])
  invoke.397: bits[1] = invoke(x, to_apply=__apfloat__is_inf__8_23, id=397, pos=[(0,1742,29)])
  invoke.398: bits[1] = invoke(y, to_apply=__apfloat__is_inf__8_23, id=398, pos=[(0,1743,12)])
  ult.391: bits[1] = ult(wide_exponent__2, saturated_exp, id=391, pos=[(0,1735,23)])
  literal.392: bits[23] = literal(value=0, id=392, pos=[(0,1736,29)])
  result_fraction__1: bits[23] = sel(ult.385, cases=[result_fraction, literal.386], id=387, pos=[(0,1729,24)])
  one_hot.285: bits[3] = one_hot(concat.284, lsb_prio=true, id=285)
  literal.270: bits[1] = literal(value=0, id=270, pos=[(0,1658,20)])
  not.281: bits[1] = not(greater_exp_sign__2, id=281, pos=[(0,1659,21)])
  greater_exp_sign__3: bits[1] = tuple_index(greater_exp, index=0, id=283, pos=[(0,1660,20)])
  ult.394: bits[1] = ult(wide_exponent__2, saturated_exp, id=394, pos=[(0,1738,23)])
  max_exp: bits[8] = invoke(to_apply=__std__mask_bits__8, id=390, pos=[(0,1733,30)])
  bit_slice.395: bits[8] = bit_slice(wide_exponent__2, start=0, width=8, id=395)
  or.429: bits[1] = or(invoke.427, invoke.428, id=429, pos=[(0,1756,53)])
  and.430: bits[1] = and(has_pos_inf, has_neg_inf, id=430, pos=[(0,1757,52)])
  is_operand_inf: bits[1] = or(invoke.397, invoke.398, id=399, pos=[(0,1742,54)])
  result_fraction__2: bits[23] = sel(ult.391, cases=[literal.392, result_fraction__1], id=393, pos=[(0,1735,6)])
  literal.401: bits[23] = literal(value=0, id=401, pos=[(0,1745,60)])
  result_sign: bits[1] = one_hot_sel(one_hot.285, cases=[literal.270, not.281, greater_exp_sign__3], id=286)
  not.414: bits[1] = not(has_pos_inf, id=414, pos=[(0,1749,40)])
  result_exponent: bits[8] = sel(ult.394, cases=[max_exp, bit_slice.395], id=396, pos=[(0,1738,6)])
  is_result_nan: bits[1] = or(or.429, and.430, id=431, pos=[(0,1757,37)])
  result_fraction__3: bits[23] = sel(is_operand_inf, cases=[result_fraction__2, literal.401], id=402, pos=[(0,1745,24)])
  result_sign__1: bits[1] = sel(is_operand_inf, cases=[result_sign, not.414], id=415, pos=[(0,1749,20)])
  literal.434: bits[1] = literal(value=0, id=434, pos=[(0,1760,42)])
  result_exponent__1: bits[8] = sel(is_operand_inf, cases=[result_exponent, max_exp], id=400, pos=[(0,1744,24)])
  result_fraction__4: bits[23] = sel(is_result_nan, cases=[result_fraction__3, fraction_high_bit], id=433, pos=[(0,1759,24)])
  EXP_SZ: bits[32] = literal(value=8, id=172, pos=[(0,1603,11)])
  literal.174: bits[32] = literal(value=1, id=174, pos=[(0,1607,36)])
  result_sign__2: bits[1] = sel(is_result_nan, cases=[result_sign__1, literal.434], id=435, pos=[(0,1760,20)])
  result_exponent__2: bits[8] = sel(is_result_nan, cases=[result_exponent__1, max_exp], id=432, pos=[(0,1758,24)])
  zero_ext.436: bits[23] = zero_ext(result_fraction__4, new_bit_count=23, id=436)
  WIDE_EXP: bits[32] = add(EXP_SZ, literal.174, id=175, pos=[(0,1607,30)])
  literal.176: bits[32] = literal(value=1, id=176, pos=[(0,1609,39)])
  literal.180: bits[32] = literal(value=1, id=180, pos=[(0,1614,49)])
  literal.182: bits[32] = literal(value=1, id=182, pos=[(0,1617,54)])
  after_all.438: token = after_all(id=438)
  tuple.437: (bits[1], bits[8], bits[23]) = tuple(result_sign__2, result_exponent__2, zero_ext.436, id=437, pos=[(0,1763,31)])
  CARRY_EXP: bits[32] = add(WIDE_EXP, literal.176, id=177, pos=[(0,1609,33)])
  CARRY_FRACTION: bits[32] = add(WIDE_FRACTION, literal.180, id=181, pos=[(0,1614,43)])
  NORMALIZED_FRACTION: bits[32] = sub(WIDE_FRACTION, literal.182, id=183, pos=[(0,1617,48)])
  tuple_index.267: bits[1] = tuple_index(tuple.261, index=1, id=267)
  literal.282: bits[1] = literal(value=1, id=282, pos=[(0,1660,4)])
  literal.338: bits[1] = literal(value=1, id=338, pos=[(0,1682,4)])
  literal.339: bits[8][16] = literal(value=[99, 97, 114, 114, 121, 95, 97, 110, 100, 95, 99, 97, 110, 99, 101, 108], id=339, pos=[(0,1682,15)])
  ret tuple.439: (token, (bits[1], bits[8], bits[23])) = tuple(after_all.438, tuple.437, id=439)
}

fn __itok__apfloat__sub__8_23(__token: token, __activated: bits[1], x: (bits[1], bits[8], bits[23]), y: (bits[1], bits[8], bits[23])) -> (token, (bits[1], bits[8], bits[23])) {
  y_sign: bits[1] = tuple_index(y, index=0, id=446, pos=[(0,1778,47)])
  not.447: bits[1] = not(y_sign, id=447, pos=[(0,1778,45)])
  y_bexp: bits[8] = tuple_index(y, index=1, id=448, pos=[(0,1778,61)])
  y_fraction: bits[23] = tuple_index(y, index=2, id=449, pos=[(0,1778,79)])
  y__1: (bits[1], bits[8], bits[23]) = tuple(not.447, y_bexp, y_fraction, id=450, pos=[(0,1778,38)])
  invoke.451: (token, (bits[1], bits[8], bits[23])) = invoke(__token, __activated, x, y__1, to_apply=__itok__apfloat__add__8_23, id=451, pos=[(0,1779,5)])
  tuple_index.452: token = tuple_index(invoke.451, index=0, id=452)
  after_all.454: token = after_all(tuple_index.452, id=454)
  tuple_index.453: (bits[1], bits[8], bits[23]) = tuple_index(invoke.451, index=1, id=453)
  EXP_SZ: bits[32] = literal(value=8, id=444, pos=[(0,1775,11)])
  FRACTION_SZ: bits[32] = literal(value=23, id=445, pos=[(0,1775,24)])
  ret tuple.455: (token, (bits[1], bits[8], bits[23])) = tuple(after_all.454, tuple_index.453, id=455)
}

fn __itok__xls__Butterfly(__token: token, __activated: bits[1], in0_r: (bits[1], bits[8], bits[23]), in0_i: (bits[1], bits[8], bits[23]), in1_r: (bits[1], bits[8], bits[23]), in1_i: (bits[1], bits[8], bits[23]), twd_r: (bits[1], bits[8], bits[23]), twd_i: (bits[1], bits[8], bits[23])) -> (token, ((bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23]))) {
  ac: (bits[1], bits[8], bits[23]) = invoke(in1_r, twd_r, to_apply=__apfloat__mul__8_23, id=464, pos=[(2,15,25)])
  bd: (bits[1], bits[8], bits[23]) = invoke(in1_i, twd_i, to_apply=__apfloat__mul__8_23, id=465, pos=[(2,16,25)])
  ad: (bits[1], bits[8], bits[23]) = invoke(in1_r, twd_i, to_apply=__apfloat__mul__8_23, id=469, pos=[(2,19,25)])
  bc: (bits[1], bits[8], bits[23]) = invoke(in1_i, twd_r, to_apply=__apfloat__mul__8_23, id=470, pos=[(2,20,25)])
  invoke.466: (token, (bits[1], bits[8], bits[23])) = invoke(__token, __activated, ac, bd, to_apply=__itok__apfloat__sub__8_23, id=466, pos=[(2,17,25)])
  invoke.471: (token, (bits[1], bits[8], bits[23])) = invoke(__token, __activated, ad, bc, to_apply=__itok__apfloat__add__8_23, id=471, pos=[(2,21,25)])
  re: (bits[1], bits[8], bits[23]) = tuple_index(invoke.466, index=1, id=468)
  im: (bits[1], bits[8], bits[23]) = tuple_index(invoke.471, index=1, id=473)
  invoke.474: (token, (bits[1], bits[8], bits[23])) = invoke(__token, __activated, in0_r, re, to_apply=__itok__apfloat__add__8_23, id=474, pos=[(2,24,29)])
  invoke.477: (token, (bits[1], bits[8], bits[23])) = invoke(__token, __activated, in0_i, im, to_apply=__itok__apfloat__add__8_23, id=477, pos=[(2,25,29)])
  invoke.480: (token, (bits[1], bits[8], bits[23])) = invoke(__token, __activated, in0_r, re, to_apply=__itok__apfloat__sub__8_23, id=480, pos=[(2,28,29)])
  invoke.483: (token, (bits[1], bits[8], bits[23])) = invoke(__token, __activated, in0_i, im, to_apply=__itok__apfloat__sub__8_23, id=483, pos=[(2,29,29)])
  tuple_index.467: token = tuple_index(invoke.466, index=0, id=467)
  tuple_index.472: token = tuple_index(invoke.471, index=0, id=472)
  tuple_index.475: token = tuple_index(invoke.474, index=0, id=475)
  tuple_index.478: token = tuple_index(invoke.477, index=0, id=478)
  tuple_index.481: token = tuple_index(invoke.480, index=0, id=481)
  tuple_index.484: token = tuple_index(invoke.483, index=0, id=484)
  out0_r: (bits[1], bits[8], bits[23]) = tuple_index(invoke.474, index=1, id=476)
  out0_i: (bits[1], bits[8], bits[23]) = tuple_index(invoke.477, index=1, id=479)
  out1_r: (bits[1], bits[8], bits[23]) = tuple_index(invoke.480, index=1, id=482)
  out1_i: (bits[1], bits[8], bits[23]) = tuple_index(invoke.483, index=1, id=485)
  after_all.487: token = after_all(tuple_index.467, tuple_index.472, tuple_index.475, tuple_index.478, tuple_index.481, tuple_index.484, id=487)
  tuple.486: ((bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23])) = tuple(out0_r, out0_i, out1_r, out1_i, id=486, pos=[(2,31,4)])
  ret tuple.488: (token, ((bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23]))) = tuple(after_all.487, tuple.486, id=488)
}

fn __xls__Butterfly(in0_r: (bits[1], bits[8], bits[23]), in0_i: (bits[1], bits[8], bits[23]), in1_r: (bits[1], bits[8], bits[23]), in1_i: (bits[1], bits[8], bits[23]), twd_r: (bits[1], bits[8], bits[23]), twd_i: (bits[1], bits[8], bits[23])) -> ((bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23])) {
  after_all.495: token = after_all(id=495)
  literal.496: bits[1] = literal(value=1, id=496)
  invoke.497: (token, ((bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23]))) = invoke(after_all.495, literal.496, in0_r, in0_i, in1_r, in1_i, twd_r, twd_i, to_apply=__itok__xls__Butterfly, id=497)
  ret tuple_index.498: ((bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23]), (bits[1], bits[8], bits[23])) = tuple_index(invoke.497, index=1, id=498)
}
